<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.10.0">Jekyll</generator><link href="http://0.0.0.0:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://0.0.0.0:4000/" rel="alternate" type="text/html" /><updated>2025-06-17T21:20:01+08:00</updated><id>http://0.0.0.0:4000/feed.xml</id><title type="html">Chico Gong’s Tech Blog</title><subtitle>Welcome to my tech blog! I&apos;m a Conversational AI Enthusiast and Real-time Communication Developer.  Sharing insights on AI, voice interaction, WebRTC, and cutting-edge technologies.</subtitle><author><name>Chico Gong</name><email>chicogong@tencent.com</email></author><entry><title type="html">云原生Kubernetes实战指南：从入门到生产环境部署</title><link href="http://0.0.0.0:4000/%E4%BA%91%E5%8E%9F%E7%94%9F/devops/cloud-native-kubernetes-guide/" rel="alternate" type="text/html" title="云原生Kubernetes实战指南：从入门到生产环境部署" /><published>2024-01-15T11:45:00+08:00</published><updated>2024-01-15T11:45:00+08:00</updated><id>http://0.0.0.0:4000/%E4%BA%91%E5%8E%9F%E7%94%9F/devops/cloud-native-kubernetes-guide</id><content type="html" xml:base="http://0.0.0.0:4000/%E4%BA%91%E5%8E%9F%E7%94%9F/devops/cloud-native-kubernetes-guide/"><![CDATA[<p>Kubernetes已经成为现代云原生应用部署的标准平台。本文将从基础概念开始，逐步深入到生产环境的最佳实践，帮助你全面掌握Kubernetes的核心技能。</p>

<h2 id="什么是kubernetes">什么是Kubernetes？</h2>

<p>Kubernetes（简称K8s）是一个开源的容器编排系统，用于自动化应用程序的部署、扩展和管理。它提供了：</p>

<ul>
  <li><strong>容器编排</strong>：管理大量容器的生命周期</li>
  <li><strong>服务发现</strong>：自动发现和连接服务</li>
  <li><strong>负载均衡</strong>：分发流量到健康的实例</li>
  <li><strong>自动扩缩容</strong>：根据负载自动调整实例数量</li>
  <li><strong>滚动更新</strong>：零停机时间的应用更新</li>
</ul>

<h2 id="核心概念详解">核心概念详解</h2>

<h3 id="1-基础对象">1. 基础对象</h3>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># pod.yaml - Pod是K8s中最小的部署单元</span>
<span class="na">apiVersion</span><span class="pi">:</span> <span class="s">v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Pod</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">my-app-pod</span>
  <span class="na">labels</span><span class="pi">:</span>
    <span class="na">app</span><span class="pi">:</span> <span class="s">my-app</span>
    <span class="na">version</span><span class="pi">:</span> <span class="s">v1.0</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">containers</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">app-container</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">nginx:1.20</span>
    <span class="na">ports</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">containerPort</span><span class="pi">:</span> <span class="m">80</span>
    <span class="na">resources</span><span class="pi">:</span>
      <span class="na">requests</span><span class="pi">:</span>
        <span class="na">memory</span><span class="pi">:</span> <span class="s2">"</span><span class="s">64Mi"</span>
        <span class="na">cpu</span><span class="pi">:</span> <span class="s2">"</span><span class="s">250m"</span>
      <span class="na">limits</span><span class="pi">:</span>
        <span class="na">memory</span><span class="pi">:</span> <span class="s2">"</span><span class="s">128Mi"</span>
        <span class="na">cpu</span><span class="pi">:</span> <span class="s2">"</span><span class="s">500m"</span>
    <span class="na">env</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">ENV_VAR</span>
      <span class="na">value</span><span class="pi">:</span> <span class="s2">"</span><span class="s">production"</span>
    <span class="na">livenessProbe</span><span class="pi">:</span>
      <span class="na">httpGet</span><span class="pi">:</span>
        <span class="na">path</span><span class="pi">:</span> <span class="s">/health</span>
        <span class="na">port</span><span class="pi">:</span> <span class="m">80</span>
      <span class="na">initialDelaySeconds</span><span class="pi">:</span> <span class="m">30</span>
      <span class="na">periodSeconds</span><span class="pi">:</span> <span class="m">10</span>
    <span class="na">readinessProbe</span><span class="pi">:</span>
      <span class="na">httpGet</span><span class="pi">:</span>
        <span class="na">path</span><span class="pi">:</span> <span class="s">/ready</span>
        <span class="na">port</span><span class="pi">:</span> <span class="m">80</span>
      <span class="na">initialDelaySeconds</span><span class="pi">:</span> <span class="m">5</span>
      <span class="na">periodSeconds</span><span class="pi">:</span> <span class="m">5</span>

<span class="nn">---</span>
<span class="c1"># service.yaml - Service提供稳定的网络端点</span>
<span class="na">apiVersion</span><span class="pi">:</span> <span class="s">v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Service</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">my-app-service</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">selector</span><span class="pi">:</span>
    <span class="na">app</span><span class="pi">:</span> <span class="s">my-app</span>
  <span class="na">ports</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">port</span><span class="pi">:</span> <span class="m">80</span>
    <span class="na">targetPort</span><span class="pi">:</span> <span class="m">80</span>
    <span class="na">protocol</span><span class="pi">:</span> <span class="s">TCP</span>
  <span class="na">type</span><span class="pi">:</span> <span class="s">ClusterIP</span>

<span class="nn">---</span>
<span class="c1"># deployment.yaml - Deployment管理Pod的副本</span>
<span class="na">apiVersion</span><span class="pi">:</span> <span class="s">apps/v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Deployment</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">my-app-deployment</span>
  <span class="na">labels</span><span class="pi">:</span>
    <span class="na">app</span><span class="pi">:</span> <span class="s">my-app</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">replicas</span><span class="pi">:</span> <span class="m">3</span>
  <span class="na">selector</span><span class="pi">:</span>
    <span class="na">matchLabels</span><span class="pi">:</span>
      <span class="na">app</span><span class="pi">:</span> <span class="s">my-app</span>
  <span class="na">template</span><span class="pi">:</span>
    <span class="na">metadata</span><span class="pi">:</span>
      <span class="na">labels</span><span class="pi">:</span>
        <span class="na">app</span><span class="pi">:</span> <span class="s">my-app</span>
    <span class="na">spec</span><span class="pi">:</span>
      <span class="na">containers</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">app-container</span>
        <span class="na">image</span><span class="pi">:</span> <span class="s">nginx:1.20</span>
        <span class="na">ports</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="na">containerPort</span><span class="pi">:</span> <span class="m">80</span>
  <span class="na">strategy</span><span class="pi">:</span>
    <span class="na">type</span><span class="pi">:</span> <span class="s">RollingUpdate</span>
    <span class="na">rollingUpdate</span><span class="pi">:</span>
      <span class="na">maxSurge</span><span class="pi">:</span> <span class="m">1</span>
      <span class="na">maxUnavailable</span><span class="pi">:</span> <span class="m">1</span>
</code></pre></div></div>

<h3 id="2-配置管理">2. 配置管理</h3>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># configmap.yaml - 配置数据</span>
<span class="na">apiVersion</span><span class="pi">:</span> <span class="s">v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">ConfigMap</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">app-config</span>
<span class="na">data</span><span class="pi">:</span>
  <span class="na">database_url</span><span class="pi">:</span> <span class="s2">"</span><span class="s">postgresql://localhost:5432/mydb"</span>
  <span class="na">debug_mode</span><span class="pi">:</span> <span class="s2">"</span><span class="s">false"</span>
  <span class="na">app.properties</span><span class="pi">:</span> <span class="pi">|</span>
    <span class="s">server.port=8080</span>
    <span class="s">logging.level=INFO</span>
    <span class="s">cache.enabled=true</span>

<span class="s">---</span>
<span class="c1"># secret.yaml - 敏感信息</span>
<span class="na">apiVersion</span><span class="pi">:</span> <span class="s">v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Secret</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">app-secrets</span>
<span class="na">type</span><span class="pi">:</span> <span class="s">Opaque</span>
<span class="na">data</span><span class="pi">:</span>
  <span class="c1"># 注意：这些值需要base64编码</span>
  <span class="na">database-password</span><span class="pi">:</span> <span class="s">cGFzc3dvcmQxMjM=</span>  <span class="c1"># password123</span>
  <span class="na">api-key</span><span class="pi">:</span> <span class="s">YWJjZGVmZ2hpams=</span>            <span class="c1"># abcdefghijk</span>

<span class="nn">---</span>
<span class="c1"># deployment-with-config.yaml - 使用配置的部署</span>
<span class="na">apiVersion</span><span class="pi">:</span> <span class="s">apps/v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Deployment</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">app-with-config</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">replicas</span><span class="pi">:</span> <span class="m">2</span>
  <span class="na">selector</span><span class="pi">:</span>
    <span class="na">matchLabels</span><span class="pi">:</span>
      <span class="na">app</span><span class="pi">:</span> <span class="s">configured-app</span>
  <span class="na">template</span><span class="pi">:</span>
    <span class="na">metadata</span><span class="pi">:</span>
      <span class="na">labels</span><span class="pi">:</span>
        <span class="na">app</span><span class="pi">:</span> <span class="s">configured-app</span>
    <span class="na">spec</span><span class="pi">:</span>
      <span class="na">containers</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">app</span>
        <span class="na">image</span><span class="pi">:</span> <span class="s">my-app:v1.0</span>
        <span class="na">env</span><span class="pi">:</span>
        <span class="c1"># 从ConfigMap获取环境变量</span>
        <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">DATABASE_URL</span>
          <span class="na">valueFrom</span><span class="pi">:</span>
            <span class="na">configMapKeyRef</span><span class="pi">:</span>
              <span class="na">name</span><span class="pi">:</span> <span class="s">app-config</span>
              <span class="na">key</span><span class="pi">:</span> <span class="s">database_url</span>
        <span class="c1"># 从Secret获取敏感信息</span>
        <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">DB_PASSWORD</span>
          <span class="na">valueFrom</span><span class="pi">:</span>
            <span class="na">secretKeyRef</span><span class="pi">:</span>
              <span class="na">name</span><span class="pi">:</span> <span class="s">app-secrets</span>
              <span class="na">key</span><span class="pi">:</span> <span class="s">database-password</span>
        <span class="na">volumeMounts</span><span class="pi">:</span>
        <span class="c1"># 挂载配置文件</span>
        <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">config-volume</span>
          <span class="na">mountPath</span><span class="pi">:</span> <span class="s">/etc/config</span>
        <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">secret-volume</span>
          <span class="na">mountPath</span><span class="pi">:</span> <span class="s">/etc/secrets</span>
          <span class="na">readOnly</span><span class="pi">:</span> <span class="no">true</span>
      <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">config-volume</span>
        <span class="na">configMap</span><span class="pi">:</span>
          <span class="na">name</span><span class="pi">:</span> <span class="s">app-config</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">secret-volume</span>
        <span class="na">secret</span><span class="pi">:</span>
          <span class="na">secretName</span><span class="pi">:</span> <span class="s">app-secrets</span>
</code></pre></div></div>

<h3 id="3-持久化存储">3. 持久化存储</h3>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># pv.yaml - 持久卷</span>
<span class="na">apiVersion</span><span class="pi">:</span> <span class="s">v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">PersistentVolume</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">mysql-pv</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">capacity</span><span class="pi">:</span>
    <span class="na">storage</span><span class="pi">:</span> <span class="s">10Gi</span>
  <span class="na">accessModes</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">ReadWriteOnce</span>
  <span class="na">persistentVolumeReclaimPolicy</span><span class="pi">:</span> <span class="s">Retain</span>
  <span class="na">storageClassName</span><span class="pi">:</span> <span class="s">standard</span>
  <span class="na">hostPath</span><span class="pi">:</span>
    <span class="na">path</span><span class="pi">:</span> <span class="s">/data/mysql</span>

<span class="nn">---</span>
<span class="c1"># pvc.yaml - 持久卷声明</span>
<span class="na">apiVersion</span><span class="pi">:</span> <span class="s">v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">PersistentVolumeClaim</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">mysql-pvc</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">accessModes</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">ReadWriteOnce</span>
  <span class="na">resources</span><span class="pi">:</span>
    <span class="na">requests</span><span class="pi">:</span>
      <span class="na">storage</span><span class="pi">:</span> <span class="s">10Gi</span>
  <span class="na">storageClassName</span><span class="pi">:</span> <span class="s">standard</span>

<span class="nn">---</span>
<span class="c1"># mysql-deployment.yaml - 使用持久存储的数据库</span>
<span class="na">apiVersion</span><span class="pi">:</span> <span class="s">apps/v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Deployment</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">mysql</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">replicas</span><span class="pi">:</span> <span class="m">1</span>
  <span class="na">selector</span><span class="pi">:</span>
    <span class="na">matchLabels</span><span class="pi">:</span>
      <span class="na">app</span><span class="pi">:</span> <span class="s">mysql</span>
  <span class="na">template</span><span class="pi">:</span>
    <span class="na">metadata</span><span class="pi">:</span>
      <span class="na">labels</span><span class="pi">:</span>
        <span class="na">app</span><span class="pi">:</span> <span class="s">mysql</span>
    <span class="na">spec</span><span class="pi">:</span>
      <span class="na">containers</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">mysql</span>
        <span class="na">image</span><span class="pi">:</span> <span class="s">mysql:8.0</span>
        <span class="na">env</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">MYSQL_ROOT_PASSWORD</span>
          <span class="na">valueFrom</span><span class="pi">:</span>
            <span class="na">secretKeyRef</span><span class="pi">:</span>
              <span class="na">name</span><span class="pi">:</span> <span class="s">mysql-secret</span>
              <span class="na">key</span><span class="pi">:</span> <span class="s">root-password</span>
        <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">MYSQL_DATABASE</span>
          <span class="na">value</span><span class="pi">:</span> <span class="s2">"</span><span class="s">myapp"</span>
        <span class="na">ports</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="na">containerPort</span><span class="pi">:</span> <span class="m">3306</span>
        <span class="na">volumeMounts</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">mysql-storage</span>
          <span class="na">mountPath</span><span class="pi">:</span> <span class="s">/var/lib/mysql</span>
        <span class="na">resources</span><span class="pi">:</span>
          <span class="na">requests</span><span class="pi">:</span>
            <span class="na">memory</span><span class="pi">:</span> <span class="s2">"</span><span class="s">512Mi"</span>
            <span class="na">cpu</span><span class="pi">:</span> <span class="s2">"</span><span class="s">500m"</span>
          <span class="na">limits</span><span class="pi">:</span>
            <span class="na">memory</span><span class="pi">:</span> <span class="s2">"</span><span class="s">1Gi"</span>
            <span class="na">cpu</span><span class="pi">:</span> <span class="s2">"</span><span class="s">1000m"</span>
      <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">mysql-storage</span>
        <span class="na">persistentVolumeClaim</span><span class="pi">:</span>
          <span class="na">claimName</span><span class="pi">:</span> <span class="s">mysql-pvc</span>
</code></pre></div></div>

<h2 id="高级功能实战">高级功能实战</h2>

<h3 id="1-自动扩缩容hpa">1. 自动扩缩容（HPA）</h3>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># hpa.yaml - 水平Pod自动扩缩容</span>
<span class="na">apiVersion</span><span class="pi">:</span> <span class="s">autoscaling/v2</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">HorizontalPodAutoscaler</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">my-app-hpa</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">scaleTargetRef</span><span class="pi">:</span>
    <span class="na">apiVersion</span><span class="pi">:</span> <span class="s">apps/v1</span>
    <span class="na">kind</span><span class="pi">:</span> <span class="s">Deployment</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">my-app-deployment</span>
  <span class="na">minReplicas</span><span class="pi">:</span> <span class="m">2</span>
  <span class="na">maxReplicas</span><span class="pi">:</span> <span class="m">10</span>
  <span class="na">metrics</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">type</span><span class="pi">:</span> <span class="s">Resource</span>
    <span class="na">resource</span><span class="pi">:</span>
      <span class="na">name</span><span class="pi">:</span> <span class="s">cpu</span>
      <span class="na">target</span><span class="pi">:</span>
        <span class="na">type</span><span class="pi">:</span> <span class="s">Utilization</span>
        <span class="na">averageUtilization</span><span class="pi">:</span> <span class="m">70</span>
  <span class="pi">-</span> <span class="na">type</span><span class="pi">:</span> <span class="s">Resource</span>
    <span class="na">resource</span><span class="pi">:</span>
      <span class="na">name</span><span class="pi">:</span> <span class="s">memory</span>
      <span class="na">target</span><span class="pi">:</span>
        <span class="na">type</span><span class="pi">:</span> <span class="s">Utilization</span>
        <span class="na">averageUtilization</span><span class="pi">:</span> <span class="m">80</span>
  <span class="na">behavior</span><span class="pi">:</span>
    <span class="na">scaleDown</span><span class="pi">:</span>
      <span class="na">stabilizationWindowSeconds</span><span class="pi">:</span> <span class="m">300</span>
      <span class="na">policies</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">type</span><span class="pi">:</span> <span class="s">Percent</span>
        <span class="na">value</span><span class="pi">:</span> <span class="m">50</span>
        <span class="na">periodSeconds</span><span class="pi">:</span> <span class="m">15</span>
    <span class="na">scaleUp</span><span class="pi">:</span>
      <span class="na">stabilizationWindowSeconds</span><span class="pi">:</span> <span class="m">0</span>
      <span class="na">policies</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">type</span><span class="pi">:</span> <span class="s">Percent</span>
        <span class="na">value</span><span class="pi">:</span> <span class="m">100</span>
        <span class="na">periodSeconds</span><span class="pi">:</span> <span class="m">15</span>

<span class="nn">---</span>
<span class="c1"># vpa.yaml - 垂直Pod自动扩缩容</span>
<span class="na">apiVersion</span><span class="pi">:</span> <span class="s">autoscaling.k8s.io/v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">VerticalPodAutoscaler</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">my-app-vpa</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">targetRef</span><span class="pi">:</span>
    <span class="na">apiVersion</span><span class="pi">:</span> <span class="s">apps/v1</span>
    <span class="na">kind</span><span class="pi">:</span> <span class="s">Deployment</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">my-app-deployment</span>
  <span class="na">updatePolicy</span><span class="pi">:</span>
    <span class="na">updateMode</span><span class="pi">:</span> <span class="s2">"</span><span class="s">Auto"</span>  <span class="c1"># 或 "Off", "Initial"</span>
  <span class="na">resourcePolicy</span><span class="pi">:</span>
    <span class="na">containerPolicies</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">containerName</span><span class="pi">:</span> <span class="s">app-container</span>
      <span class="na">maxAllowed</span><span class="pi">:</span>
        <span class="na">cpu</span><span class="pi">:</span> <span class="m">2</span>
        <span class="na">memory</span><span class="pi">:</span> <span class="s">4Gi</span>
      <span class="na">minAllowed</span><span class="pi">:</span>
        <span class="na">cpu</span><span class="pi">:</span> <span class="s">100m</span>
        <span class="na">memory</span><span class="pi">:</span> <span class="s">128Mi</span>
</code></pre></div></div>

<h3 id="2-网络策略和安全">2. 网络策略和安全</h3>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># network-policy.yaml - 网络访问控制</span>
<span class="na">apiVersion</span><span class="pi">:</span> <span class="s">networking.k8s.io/v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">NetworkPolicy</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">app-network-policy</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">podSelector</span><span class="pi">:</span>
    <span class="na">matchLabels</span><span class="pi">:</span>
      <span class="na">app</span><span class="pi">:</span> <span class="s">my-app</span>
  <span class="na">policyTypes</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s">Ingress</span>
  <span class="pi">-</span> <span class="s">Egress</span>
  <span class="na">ingress</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">from</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">podSelector</span><span class="pi">:</span>
        <span class="na">matchLabels</span><span class="pi">:</span>
          <span class="na">role</span><span class="pi">:</span> <span class="s">frontend</span>
    <span class="pi">-</span> <span class="na">namespaceSelector</span><span class="pi">:</span>
        <span class="na">matchLabels</span><span class="pi">:</span>
          <span class="na">name</span><span class="pi">:</span> <span class="s">trusted</span>
    <span class="na">ports</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">protocol</span><span class="pi">:</span> <span class="s">TCP</span>
      <span class="na">port</span><span class="pi">:</span> <span class="m">80</span>
  <span class="na">egress</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">to</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">podSelector</span><span class="pi">:</span>
        <span class="na">matchLabels</span><span class="pi">:</span>
          <span class="na">app</span><span class="pi">:</span> <span class="s">database</span>
    <span class="na">ports</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">protocol</span><span class="pi">:</span> <span class="s">TCP</span>
      <span class="na">port</span><span class="pi">:</span> <span class="m">5432</span>

<span class="nn">---</span>
<span class="c1"># rbac.yaml - 基于角色的访问控制</span>
<span class="na">apiVersion</span><span class="pi">:</span> <span class="s">v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">ServiceAccount</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">app-service-account</span>
  <span class="na">namespace</span><span class="pi">:</span> <span class="s">default</span>

<span class="nn">---</span>
<span class="na">apiVersion</span><span class="pi">:</span> <span class="s">rbac.authorization.k8s.io/v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Role</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">app-role</span>
  <span class="na">namespace</span><span class="pi">:</span> <span class="s">default</span>
<span class="na">rules</span><span class="pi">:</span>
<span class="pi">-</span> <span class="na">apiGroups</span><span class="pi">:</span> <span class="pi">[</span><span class="s2">"</span><span class="s">"</span><span class="pi">]</span>
  <span class="na">resources</span><span class="pi">:</span> <span class="pi">[</span><span class="s2">"</span><span class="s">configmaps"</span><span class="pi">,</span> <span class="s2">"</span><span class="s">secrets"</span><span class="pi">]</span>
  <span class="na">verbs</span><span class="pi">:</span> <span class="pi">[</span><span class="s2">"</span><span class="s">get"</span><span class="pi">,</span> <span class="s2">"</span><span class="s">list"</span><span class="pi">]</span>
<span class="pi">-</span> <span class="na">apiGroups</span><span class="pi">:</span> <span class="pi">[</span><span class="s2">"</span><span class="s">apps"</span><span class="pi">]</span>
  <span class="na">resources</span><span class="pi">:</span> <span class="pi">[</span><span class="s2">"</span><span class="s">deployments"</span><span class="pi">]</span>
  <span class="na">verbs</span><span class="pi">:</span> <span class="pi">[</span><span class="s2">"</span><span class="s">get"</span><span class="pi">,</span> <span class="s2">"</span><span class="s">list"</span><span class="pi">,</span> <span class="s2">"</span><span class="s">patch"</span><span class="pi">]</span>

<span class="nn">---</span>
<span class="na">apiVersion</span><span class="pi">:</span> <span class="s">rbac.authorization.k8s.io/v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">RoleBinding</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">app-role-binding</span>
  <span class="na">namespace</span><span class="pi">:</span> <span class="s">default</span>
<span class="na">subjects</span><span class="pi">:</span>
<span class="pi">-</span> <span class="na">kind</span><span class="pi">:</span> <span class="s">ServiceAccount</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">app-service-account</span>
  <span class="na">namespace</span><span class="pi">:</span> <span class="s">default</span>
<span class="na">roleRef</span><span class="pi">:</span>
  <span class="na">kind</span><span class="pi">:</span> <span class="s">Role</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">app-role</span>
  <span class="na">apiGroup</span><span class="pi">:</span> <span class="s">rbac.authorization.k8s.io</span>

<span class="nn">---</span>
<span class="c1"># pod-security-policy.yaml - Pod安全策略</span>
<span class="na">apiVersion</span><span class="pi">:</span> <span class="s">policy/v1beta1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">PodSecurityPolicy</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">restricted-psp</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">privileged</span><span class="pi">:</span> <span class="no">false</span>
  <span class="na">allowPrivilegeEscalation</span><span class="pi">:</span> <span class="no">false</span>
  <span class="na">requiredDropCapabilities</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">ALL</span>
  <span class="na">volumes</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s1">'</span><span class="s">configMap'</span>
    <span class="pi">-</span> <span class="s1">'</span><span class="s">emptyDir'</span>
    <span class="pi">-</span> <span class="s1">'</span><span class="s">projected'</span>
    <span class="pi">-</span> <span class="s1">'</span><span class="s">secret'</span>
    <span class="pi">-</span> <span class="s1">'</span><span class="s">downwardAPI'</span>
    <span class="pi">-</span> <span class="s1">'</span><span class="s">persistentVolumeClaim'</span>
  <span class="na">runAsUser</span><span class="pi">:</span>
    <span class="na">rule</span><span class="pi">:</span> <span class="s1">'</span><span class="s">MustRunAsNonRoot'</span>
  <span class="na">seLinux</span><span class="pi">:</span>
    <span class="na">rule</span><span class="pi">:</span> <span class="s1">'</span><span class="s">RunAsAny'</span>
  <span class="na">fsGroup</span><span class="pi">:</span>
    <span class="na">rule</span><span class="pi">:</span> <span class="s1">'</span><span class="s">RunAsAny'</span>
</code></pre></div></div>

<h3 id="3-ingress和负载均衡">3. Ingress和负载均衡</h3>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># ingress.yaml - Ingress资源</span>
<span class="na">apiVersion</span><span class="pi">:</span> <span class="s">networking.k8s.io/v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Ingress</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">app-ingress</span>
  <span class="na">annotations</span><span class="pi">:</span>
    <span class="na">nginx.ingress.kubernetes.io/rewrite-target</span><span class="pi">:</span> <span class="s">/</span>
    <span class="na">nginx.ingress.kubernetes.io/ssl-redirect</span><span class="pi">:</span> <span class="s2">"</span><span class="s">true"</span>
    <span class="na">nginx.ingress.kubernetes.io/use-regex</span><span class="pi">:</span> <span class="s2">"</span><span class="s">true"</span>
    <span class="na">cert-manager.io/cluster-issuer</span><span class="pi">:</span> <span class="s2">"</span><span class="s">letsencrypt-prod"</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">tls</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">hosts</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">myapp.example.com</span>
    <span class="na">secretName</span><span class="pi">:</span> <span class="s">app-tls-secret</span>
  <span class="na">rules</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">host</span><span class="pi">:</span> <span class="s">myapp.example.com</span>
    <span class="na">http</span><span class="pi">:</span>
      <span class="na">paths</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">path</span><span class="pi">:</span> <span class="s">/api/v1</span>
        <span class="na">pathType</span><span class="pi">:</span> <span class="s">Prefix</span>
        <span class="na">backend</span><span class="pi">:</span>
          <span class="na">service</span><span class="pi">:</span>
            <span class="na">name</span><span class="pi">:</span> <span class="s">api-service</span>
            <span class="na">port</span><span class="pi">:</span>
              <span class="na">number</span><span class="pi">:</span> <span class="m">80</span>
      <span class="pi">-</span> <span class="na">path</span><span class="pi">:</span> <span class="s">/</span>
        <span class="na">pathType</span><span class="pi">:</span> <span class="s">Prefix</span>
        <span class="na">backend</span><span class="pi">:</span>
          <span class="na">service</span><span class="pi">:</span>
            <span class="na">name</span><span class="pi">:</span> <span class="s">frontend-service</span>
            <span class="na">port</span><span class="pi">:</span>
              <span class="na">number</span><span class="pi">:</span> <span class="m">80</span>

<span class="nn">---</span>
<span class="c1"># load-balancer-service.yaml - LoadBalancer类型服务</span>
<span class="na">apiVersion</span><span class="pi">:</span> <span class="s">v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Service</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">app-loadbalancer</span>
  <span class="na">annotations</span><span class="pi">:</span>
    <span class="na">service.beta.kubernetes.io/aws-load-balancer-type</span><span class="pi">:</span> <span class="s">nlb</span>
    <span class="na">service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled</span><span class="pi">:</span> <span class="s2">"</span><span class="s">true"</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">type</span><span class="pi">:</span> <span class="s">LoadBalancer</span>
  <span class="na">selector</span><span class="pi">:</span>
    <span class="na">app</span><span class="pi">:</span> <span class="s">my-app</span>
  <span class="na">ports</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">port</span><span class="pi">:</span> <span class="m">80</span>
    <span class="na">targetPort</span><span class="pi">:</span> <span class="m">8080</span>
    <span class="na">protocol</span><span class="pi">:</span> <span class="s">TCP</span>
</code></pre></div></div>

<h2 id="cicd集成">CI/CD集成</h2>

<h3 id="1-gitlab-ci配置">1. GitLab CI配置</h3>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># .gitlab-ci.yml</span>
<span class="na">stages</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s">build</span>
  <span class="pi">-</span> <span class="s">test</span>
  <span class="pi">-</span> <span class="s">deploy-staging</span>
  <span class="pi">-</span> <span class="s">deploy-production</span>

<span class="na">variables</span><span class="pi">:</span>
  <span class="na">DOCKER_REGISTRY</span><span class="pi">:</span> <span class="s">registry.gitlab.com/myproject</span>
  <span class="na">KUBE_NAMESPACE_STAGING</span><span class="pi">:</span> <span class="s">myapp-staging</span>
  <span class="na">KUBE_NAMESPACE_PRODUCTION</span><span class="pi">:</span> <span class="s">myapp-production</span>

<span class="na">build</span><span class="pi">:</span>
  <span class="na">stage</span><span class="pi">:</span> <span class="s">build</span>
  <span class="na">image</span><span class="pi">:</span> <span class="s">docker:latest</span>
  <span class="na">services</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">docker:dind</span>
  <span class="na">script</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">docker build -t $DOCKER_REGISTRY/myapp:$CI_COMMIT_SHA .</span>
    <span class="pi">-</span> <span class="s">docker push $DOCKER_REGISTRY/myapp:$CI_COMMIT_SHA</span>
  <span class="na">only</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">main</span>
    <span class="pi">-</span> <span class="s">develop</span>

<span class="na">test</span><span class="pi">:</span>
  <span class="na">stage</span><span class="pi">:</span> <span class="s">test</span>
  <span class="na">image</span><span class="pi">:</span> <span class="s">$DOCKER_REGISTRY/myapp:$CI_COMMIT_SHA</span>
  <span class="na">script</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">npm test</span>
    <span class="pi">-</span> <span class="s">npm run lint</span>
  <span class="na">coverage</span><span class="pi">:</span> <span class="s1">'</span><span class="s">/Coverage:</span><span class="nv"> </span><span class="s">\d+\.\d+%/'</span>

<span class="na">deploy-staging</span><span class="pi">:</span>
  <span class="na">stage</span><span class="pi">:</span> <span class="s">deploy-staging</span>
  <span class="na">image</span><span class="pi">:</span> <span class="s">bitnami/kubectl:latest</span>
  <span class="na">script</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">kubectl config use-context $KUBE_CONTEXT_STAGING</span>
    <span class="pi">-</span> <span class="s">kubectl set image deployment/myapp-deployment app=$DOCKER_REGISTRY/myapp:$CI_COMMIT_SHA -n $KUBE_NAMESPACE_STAGING</span>
    <span class="pi">-</span> <span class="s">kubectl rollout status deployment/myapp-deployment -n $KUBE_NAMESPACE_STAGING</span>
  <span class="na">environment</span><span class="pi">:</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">staging</span>
    <span class="na">url</span><span class="pi">:</span> <span class="s">https://staging.myapp.com</span>
  <span class="na">only</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">develop</span>

<span class="na">deploy-production</span><span class="pi">:</span>
  <span class="na">stage</span><span class="pi">:</span> <span class="s">deploy-production</span>
  <span class="na">image</span><span class="pi">:</span> <span class="s">bitnami/kubectl:latest</span>
  <span class="na">script</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">kubectl config use-context $KUBE_CONTEXT_PRODUCTION</span>
    <span class="pi">-</span> <span class="s">kubectl set image deployment/myapp-deployment app=$DOCKER_REGISTRY/myapp:$CI_COMMIT_SHA -n $KUBE_NAMESPACE_PRODUCTION</span>
    <span class="pi">-</span> <span class="s">kubectl rollout status deployment/myapp-deployment -n $KUBE_NAMESPACE_PRODUCTION</span>
  <span class="na">environment</span><span class="pi">:</span>
    <span class="na">name</span><span class="pi">:</span> <span class="s">production</span>
    <span class="na">url</span><span class="pi">:</span> <span class="s">https://myapp.com</span>
  <span class="na">when</span><span class="pi">:</span> <span class="s">manual</span>
  <span class="na">only</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">main</span>
</code></pre></div></div>

<h3 id="2-helm-charts">2. Helm Charts</h3>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Chart.yaml</span>
<span class="na">apiVersion</span><span class="pi">:</span> <span class="s">v2</span>
<span class="na">name</span><span class="pi">:</span> <span class="s">myapp</span>
<span class="na">description</span><span class="pi">:</span> <span class="s">My Application Helm Chart</span>
<span class="na">version</span><span class="pi">:</span> <span class="s">0.1.0</span>
<span class="na">appVersion</span><span class="pi">:</span> <span class="s">1.0.0</span>

<span class="c1"># values.yaml</span>
<span class="na">replicaCount</span><span class="pi">:</span> <span class="m">3</span>

<span class="na">image</span><span class="pi">:</span>
  <span class="na">repository</span><span class="pi">:</span> <span class="s">myapp</span>
  <span class="na">tag</span><span class="pi">:</span> <span class="s">latest</span>
  <span class="na">pullPolicy</span><span class="pi">:</span> <span class="s">IfNotPresent</span>

<span class="na">service</span><span class="pi">:</span>
  <span class="na">type</span><span class="pi">:</span> <span class="s">ClusterIP</span>
  <span class="na">port</span><span class="pi">:</span> <span class="m">80</span>
  <span class="na">targetPort</span><span class="pi">:</span> <span class="m">8080</span>

<span class="na">ingress</span><span class="pi">:</span>
  <span class="na">enabled</span><span class="pi">:</span> <span class="no">true</span>
  <span class="na">annotations</span><span class="pi">:</span>
    <span class="na">kubernetes.io/ingress.class</span><span class="pi">:</span> <span class="s">nginx</span>
  <span class="na">hosts</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">host</span><span class="pi">:</span> <span class="s">myapp.local</span>
      <span class="na">paths</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="na">path</span><span class="pi">:</span> <span class="s">/</span>
          <span class="na">pathType</span><span class="pi">:</span> <span class="s">Prefix</span>
  <span class="na">tls</span><span class="pi">:</span> <span class="pi">[]</span>

<span class="na">resources</span><span class="pi">:</span>
  <span class="na">limits</span><span class="pi">:</span>
    <span class="na">cpu</span><span class="pi">:</span> <span class="s">500m</span>
    <span class="na">memory</span><span class="pi">:</span> <span class="s">512Mi</span>
  <span class="na">requests</span><span class="pi">:</span>
    <span class="na">cpu</span><span class="pi">:</span> <span class="s">250m</span>
    <span class="na">memory</span><span class="pi">:</span> <span class="s">256Mi</span>

<span class="na">autoscaling</span><span class="pi">:</span>
  <span class="na">enabled</span><span class="pi">:</span> <span class="no">true</span>
  <span class="na">minReplicas</span><span class="pi">:</span> <span class="m">2</span>
  <span class="na">maxReplicas</span><span class="pi">:</span> <span class="m">10</span>
  <span class="na">targetCPU</span><span class="pi">:</span> <span class="m">70</span>
  <span class="na">targetMemory</span><span class="pi">:</span> <span class="m">80</span>

<span class="na">monitoring</span><span class="pi">:</span>
  <span class="na">enabled</span><span class="pi">:</span> <span class="no">true</span>
  <span class="na">serviceMonitor</span><span class="pi">:</span>
    <span class="na">enabled</span><span class="pi">:</span> <span class="no">true</span>

<span class="c1"># templates/deployment.yaml</span>

<span class="na">apiVersion</span><span class="pi">:</span> <span class="s">apps/v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Deployment</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="pi">{{</span> <span class="nv">include "myapp.fullname" .</span> <span class="pi">}}</span>
  <span class="na">labels</span><span class="pi">:</span>
    <span class="pi">{{</span><span class="nv">- include "myapp.labels" . | nindent 4</span> <span class="pi">}}</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="pi">{{</span><span class="nv">- if not .Values.autoscaling.enabled</span> <span class="pi">}}</span>
  <span class="na">replicas</span><span class="pi">:</span> <span class="pi">{{</span> <span class="nv">.Values.replicaCount</span> <span class="pi">}}</span>
  <span class="pi">{{</span><span class="nv">- end</span> <span class="pi">}}</span>
  <span class="na">selector</span><span class="pi">:</span>
    <span class="na">matchLabels</span><span class="pi">:</span>
      <span class="pi">{{</span><span class="nv">- include "myapp.selectorLabels" . | nindent 6</span> <span class="pi">}}</span>
  <span class="na">template</span><span class="pi">:</span>
    <span class="na">metadata</span><span class="pi">:</span>
      <span class="na">labels</span><span class="pi">:</span>
        <span class="pi">{{</span><span class="nv">- include "myapp.selectorLabels" . | nindent 8</span> <span class="pi">}}</span>
    <span class="na">spec</span><span class="pi">:</span>
      <span class="na">containers</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="pi">{{</span> <span class="nv">.Chart.Name</span> <span class="pi">}}</span>
          <span class="na">image</span><span class="pi">:</span> <span class="s2">"</span><span class="s">{{</span><span class="nv"> </span><span class="s">.Values.image.repository</span><span class="nv"> </span><span class="s">}}:{{</span><span class="nv"> </span><span class="s">.Values.image.tag</span><span class="nv"> </span><span class="s">|</span><span class="nv"> </span><span class="s">default</span><span class="nv"> </span><span class="s">.Chart.AppVersion</span><span class="nv"> </span><span class="s">}}"</span>
          <span class="na">imagePullPolicy</span><span class="pi">:</span> <span class="pi">{{</span> <span class="nv">.Values.image.pullPolicy</span> <span class="pi">}}</span>
          <span class="na">ports</span><span class="pi">:</span>
            <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">http</span>
              <span class="na">containerPort</span><span class="pi">:</span> <span class="pi">{{</span> <span class="nv">.Values.service.targetPort</span> <span class="pi">}}</span>
              <span class="na">protocol</span><span class="pi">:</span> <span class="s">TCP</span>
          <span class="na">livenessProbe</span><span class="pi">:</span>
            <span class="na">httpGet</span><span class="pi">:</span>
              <span class="na">path</span><span class="pi">:</span> <span class="s">/health</span>
              <span class="na">port</span><span class="pi">:</span> <span class="s">http</span>
            <span class="na">initialDelaySeconds</span><span class="pi">:</span> <span class="m">30</span>
            <span class="na">periodSeconds</span><span class="pi">:</span> <span class="m">10</span>
          <span class="na">readinessProbe</span><span class="pi">:</span>
            <span class="na">httpGet</span><span class="pi">:</span>
              <span class="na">path</span><span class="pi">:</span> <span class="s">/ready</span>
              <span class="na">port</span><span class="pi">:</span> <span class="s">http</span>
            <span class="na">initialDelaySeconds</span><span class="pi">:</span> <span class="m">5</span>
            <span class="na">periodSeconds</span><span class="pi">:</span> <span class="m">5</span>
          <span class="na">resources</span><span class="pi">:</span>
            <span class="pi">{{</span><span class="nv">- toYaml .Values.resources | nindent 12</span> <span class="pi">}}</span>


<span class="c1"># 部署命令</span>
<span class="c1"># helm install myapp ./myapp-chart</span>
<span class="c1"># helm upgrade myapp ./myapp-chart --set image.tag=v2.0.0</span>
</code></pre></div></div>

<h2 id="监控和日志">监控和日志</h2>

<h3 id="1-prometheus监控">1. Prometheus监控</h3>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># monitoring/prometheus-config.yaml</span>
<span class="na">apiVersion</span><span class="pi">:</span> <span class="s">v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">ConfigMap</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">prometheus-config</span>
<span class="na">data</span><span class="pi">:</span>
  <span class="na">prometheus.yml</span><span class="pi">:</span> <span class="pi">|</span>
    <span class="s">global:</span>
      <span class="s">scrape_interval: 15s</span>
      <span class="s">evaluation_interval: 15s</span>
    
    <span class="s">rule_files:</span>
      <span class="s">- "alert_rules.yml"</span>
    
    <span class="s">alerting:</span>
      <span class="s">alertmanagers:</span>
        <span class="s">- static_configs:</span>
            <span class="s">- targets:</span>
              <span class="s">- alertmanager:9093</span>
    
    <span class="s">scrape_configs:</span>
      <span class="s">- job_name: 'kubernetes-pods'</span>
        <span class="s">kubernetes_sd_configs:</span>
          <span class="s">- role: pod</span>
        <span class="s">relabel_configs:</span>
          <span class="s">- source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]</span>
            <span class="s">action: keep</span>
            <span class="s">regex: true</span>
          <span class="s">- source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]</span>
            <span class="s">action: replace</span>
            <span class="s">target_label: __metrics_path__</span>
            <span class="s">regex: (.+)</span>
    <span class="no">  </span>
      <span class="s">- job_name: 'kubernetes-services'</span>
        <span class="s">kubernetes_sd_configs:</span>
          <span class="s">- role: service</span>
        <span class="s">relabel_configs:</span>
          <span class="s">- source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]</span>
            <span class="s">action: keep</span>
            <span class="s">regex: true</span>

<span class="s">---</span>
<span class="c1"># monitoring/grafana-dashboard.json</span>
<span class="pi">{</span>
  <span class="s2">"</span><span class="s">dashboard"</span><span class="pi">:</span> <span class="pi">{</span>
    <span class="s2">"</span><span class="s">id"</span><span class="pi">:</span> <span class="nv">null</span><span class="pi">,</span>
    <span class="s2">"</span><span class="s">title"</span><span class="pi">:</span> <span class="s2">"</span><span class="s">Kubernetes</span><span class="nv"> </span><span class="s">Application</span><span class="nv"> </span><span class="s">Monitoring"</span><span class="pi">,</span>
    <span class="s2">"</span><span class="s">panels"</span><span class="pi">:</span> <span class="pi">[</span>
      <span class="pi">{</span>
        <span class="s2">"</span><span class="s">title"</span><span class="pi">:</span> <span class="s2">"</span><span class="s">CPU</span><span class="nv"> </span><span class="s">Usage"</span><span class="pi">,</span>
        <span class="s2">"</span><span class="s">type"</span><span class="pi">:</span> <span class="s2">"</span><span class="s">graph"</span><span class="pi">,</span>
        <span class="s2">"</span><span class="s">targets"</span><span class="pi">:</span> <span class="pi">[</span>
          <span class="pi">{</span>
            <span class="s2">"</span><span class="s">expr"</span><span class="pi">:</span> <span class="s2">"</span><span class="s">rate(container_cpu_usage_seconds_total{namespace=</span><span class="se">\"</span><span class="s">default</span><span class="se">\"</span><span class="s">}[5m])"</span><span class="pi">,</span>
            <span class="s2">"</span><span class="s">legendFormat"</span><span class="pi">:</span> <span class="s2">"</span><span class="s">"</span>
          <span class="pi">}</span>
        <span class="pi">]</span>
      <span class="pi">},</span>
      <span class="pi">{</span>
        <span class="s2">"</span><span class="s">title"</span><span class="pi">:</span> <span class="s2">"</span><span class="s">Memory</span><span class="nv"> </span><span class="s">Usage"</span><span class="pi">,</span>
        <span class="s2">"</span><span class="s">type"</span><span class="pi">:</span> <span class="s2">"</span><span class="s">graph"</span><span class="pi">,</span>
        <span class="s2">"</span><span class="s">targets"</span><span class="pi">:</span> <span class="pi">[</span>
          <span class="pi">{</span>
            <span class="s2">"</span><span class="s">expr"</span><span class="pi">:</span> <span class="s2">"</span><span class="s">container_memory_working_set_bytes{namespace=</span><span class="se">\"</span><span class="s">default</span><span class="se">\"</span><span class="s">}"</span><span class="pi">,</span>
            <span class="s2">"</span><span class="s">legendFormat"</span><span class="pi">:</span> <span class="s2">"</span><span class="s">"</span>
          <span class="pi">}</span>
        <span class="pi">]</span>
      <span class="pi">},</span>
      <span class="pi">{</span>
        <span class="s2">"</span><span class="s">title"</span><span class="pi">:</span> <span class="s2">"</span><span class="s">Request</span><span class="nv"> </span><span class="s">Rate"</span><span class="pi">,</span>
        <span class="s2">"</span><span class="s">type"</span><span class="pi">:</span> <span class="s2">"</span><span class="s">graph"</span><span class="pi">,</span>
        <span class="s2">"</span><span class="s">targets"</span><span class="pi">:</span> <span class="pi">[</span>
          <span class="pi">{</span>
            <span class="s2">"</span><span class="s">expr"</span><span class="pi">:</span> <span class="s2">"</span><span class="s">rate(http_requests_total[5m])"</span><span class="pi">,</span>
            <span class="s2">"</span><span class="s">legendFormat"</span><span class="pi">:</span> <span class="s2">"</span><span class="nv"> </span><span class="s">"</span>
          <span class="pi">}</span>
        <span class="pi">]</span>
      <span class="pi">}</span>
    <span class="pi">]</span>
  <span class="pi">}</span>
<span class="pi">}</span>
</code></pre></div></div>

<h3 id="2-日志收集">2. 日志收集</h3>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># logging/fluentd-daemonset.yaml</span>
<span class="na">apiVersion</span><span class="pi">:</span> <span class="s">apps/v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">DaemonSet</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">fluentd</span>
  <span class="na">namespace</span><span class="pi">:</span> <span class="s">kube-system</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">selector</span><span class="pi">:</span>
    <span class="na">matchLabels</span><span class="pi">:</span>
      <span class="na">name</span><span class="pi">:</span> <span class="s">fluentd</span>
  <span class="na">template</span><span class="pi">:</span>
    <span class="na">metadata</span><span class="pi">:</span>
      <span class="na">labels</span><span class="pi">:</span>
        <span class="na">name</span><span class="pi">:</span> <span class="s">fluentd</span>
    <span class="na">spec</span><span class="pi">:</span>
      <span class="na">containers</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">fluentd</span>
        <span class="na">image</span><span class="pi">:</span> <span class="s">fluent/fluentd-kubernetes-daemonset:v1-debian-elasticsearch</span>
        <span class="na">env</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">FLUENT_ELASTICSEARCH_HOST</span>
          <span class="na">value</span><span class="pi">:</span> <span class="s2">"</span><span class="s">elasticsearch.logging.svc.cluster.local"</span>
        <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">FLUENT_ELASTICSEARCH_PORT</span>
          <span class="na">value</span><span class="pi">:</span> <span class="s2">"</span><span class="s">9200"</span>
        <span class="na">volumeMounts</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">varlog</span>
          <span class="na">mountPath</span><span class="pi">:</span> <span class="s">/var/log</span>
        <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">varlibdockercontainers</span>
          <span class="na">mountPath</span><span class="pi">:</span> <span class="s">/var/lib/docker/containers</span>
          <span class="na">readOnly</span><span class="pi">:</span> <span class="no">true</span>
        <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">config-volume</span>
          <span class="na">mountPath</span><span class="pi">:</span> <span class="s">/fluentd/etc</span>
      <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">varlog</span>
        <span class="na">hostPath</span><span class="pi">:</span>
          <span class="na">path</span><span class="pi">:</span> <span class="s">/var/log</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">varlibdockercontainers</span>
        <span class="na">hostPath</span><span class="pi">:</span>
          <span class="na">path</span><span class="pi">:</span> <span class="s">/var/lib/docker/containers</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">config-volume</span>
        <span class="na">configMap</span><span class="pi">:</span>
          <span class="na">name</span><span class="pi">:</span> <span class="s">fluentd-config</span>

<span class="nn">---</span>
<span class="c1"># logging/fluentd-config.yaml</span>
<span class="na">apiVersion</span><span class="pi">:</span> <span class="s">v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">ConfigMap</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">fluentd-config</span>
  <span class="na">namespace</span><span class="pi">:</span> <span class="s">kube-system</span>
<span class="na">data</span><span class="pi">:</span>
  <span class="na">fluent.conf</span><span class="pi">:</span> <span class="pi">|</span>
    <span class="s">&lt;source&gt;</span>
      <span class="s">@type tail</span>
      <span class="s">path /var/log/containers/*.log</span>
      <span class="s">pos_file /var/log/fluentd-containers.log.pos</span>
      <span class="s">tag kubernetes.*</span>
      <span class="s">read_from_head true</span>
      <span class="s">&lt;parse&gt;</span>
        <span class="s">@type json</span>
        <span class="s">time_format %Y-%m-%dT%H:%M:%S.%NZ</span>
      <span class="s">&lt;/parse&gt;</span>
    <span class="s">&lt;/source&gt;</span>
    
    <span class="s">&lt;filter kubernetes.**&gt;</span>
      <span class="s">@type kubernetes_metadata</span>
    <span class="s">&lt;/filter&gt;</span>
    
    <span class="s">&lt;match kubernetes.**&gt;</span>
      <span class="s">@type elasticsearch</span>
      <span class="s">host elasticsearch.logging.svc.cluster.local</span>
      <span class="s">port 9200</span>
      <span class="s">index_name kubernetes</span>
      <span class="s">type_name fluentd</span>
    <span class="s">&lt;/match&gt;</span>
</code></pre></div></div>

<h2 id="生产环境最佳实践">生产环境最佳实践</h2>

<h3 id="1-集群安全加固">1. 集群安全加固</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>
<span class="c"># security-hardening.sh</span>

<span class="c"># 1. 启用RBAC</span>
kubectl apply <span class="nt">-f</span> - <span class="o">&lt;&lt;</span><span class="no">EOF</span><span class="sh">
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: pod-reader
rules:
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "watch", "list"]
</span><span class="no">EOF

</span><span class="c"># 2. 网络策略</span>
kubectl apply <span class="nt">-f</span> - <span class="o">&lt;&lt;</span><span class="no">EOF</span><span class="sh">
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: default-deny-all
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
</span><span class="no">EOF

</span><span class="c"># 3. Pod安全标准</span>
kubectl label namespace default pod-security.kubernetes.io/enforce<span class="o">=</span>restricted
kubectl label namespace default pod-security.kubernetes.io/audit<span class="o">=</span>restricted
kubectl label namespace default pod-security.kubernetes.io/warn<span class="o">=</span>restricted

<span class="c"># 4. 启用审计日志</span>
<span class="nb">cat</span> <span class="o">&lt;&lt;</span> <span class="no">EOF</span><span class="sh"> &gt; /etc/kubernetes/audit-policy.yaml
apiVersion: audit.k8s.io/v1
kind: Policy
rules:
- level: Metadata
  resources:
  - group: ""
    resources: ["secrets", "configmaps"]
- level: RequestResponse
  resources:
  - group: ""
    resources: [""]
  - group: "apps"
    resources: ["deployments"]
</span><span class="no">EOF

</span><span class="c"># 5. 定期更新和补丁</span>
kubectl get nodes <span class="nt">-o</span> wide
kubectl get pods <span class="nt">--all-namespaces</span> <span class="nt">-o</span> wide | <span class="nb">grep</span> <span class="nt">-v</span> Running
</code></pre></div></div>

<h3 id="2-备份和灾难恢复">2. 备份和灾难恢复</h3>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># backup/velero-backup.yaml</span>
<span class="na">apiVersion</span><span class="pi">:</span> <span class="s">velero.io/v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Backup</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">daily-backup</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">includedNamespaces</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s">default</span>
  <span class="pi">-</span> <span class="s">production</span>
  <span class="na">excludedResources</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s">events</span>
  <span class="pi">-</span> <span class="s">events.events.k8s.io</span>
  <span class="na">storageLocation</span><span class="pi">:</span> <span class="s">default</span>
  <span class="na">ttl</span><span class="pi">:</span> <span class="s">720h0m0s</span>  <span class="c1"># 30 days</span>

<span class="nn">---</span>
<span class="c1"># backup/schedule-backup.yaml</span>
<span class="na">apiVersion</span><span class="pi">:</span> <span class="s">velero.io/v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Schedule</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">daily-backup-schedule</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">schedule</span><span class="pi">:</span> <span class="s2">"</span><span class="s">0</span><span class="nv"> </span><span class="s">2</span><span class="nv"> </span><span class="s">*</span><span class="nv"> </span><span class="s">*</span><span class="nv"> </span><span class="s">*"</span>  <span class="c1"># 每天凌晨2点</span>
  <span class="na">template</span><span class="pi">:</span>
    <span class="na">includedNamespaces</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">default</span>
    <span class="pi">-</span> <span class="s">production</span>
    <span class="na">storageLocation</span><span class="pi">:</span> <span class="s">default</span>
    <span class="na">ttl</span><span class="pi">:</span> <span class="s">720h0m0s</span>

<span class="c1"># 恢复命令示例</span>
<span class="c1"># velero restore create --from-backup daily-backup-20240115</span>
</code></pre></div></div>

<h3 id="3-性能优化脚本">3. 性能优化脚本</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#!/usr/bin/env python3
# k8s-optimizer.py
</span>
<span class="kn">import</span> <span class="nn">subprocess</span>
<span class="kn">import</span> <span class="nn">json</span>
<span class="kn">import</span> <span class="nn">yaml</span>
<span class="kn">from</span> <span class="nn">datetime</span> <span class="kn">import</span> <span class="n">datetime</span><span class="p">,</span> <span class="n">timedelta</span>

<span class="k">class</span> <span class="nc">K8sOptimizer</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">kubectl</span> <span class="o">=</span> <span class="s">"kubectl"</span>
    
    <span class="k">def</span> <span class="nf">get_resource_usage</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">namespace</span><span class="o">=</span><span class="s">"default"</span><span class="p">):</span>
        <span class="s">"""获取资源使用统计"""</span>
        <span class="n">cmd</span> <span class="o">=</span> <span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">kubectl</span><span class="si">}</span><span class="s"> top pods -n </span><span class="si">{</span><span class="n">namespace</span><span class="si">}</span><span class="s"> --no-headers"</span>
        <span class="n">result</span> <span class="o">=</span> <span class="n">subprocess</span><span class="p">.</span><span class="n">run</span><span class="p">(</span><span class="n">cmd</span><span class="p">.</span><span class="n">split</span><span class="p">(),</span> <span class="n">capture_output</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">text</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
        
        <span class="n">pods_usage</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">result</span><span class="p">.</span><span class="n">stdout</span><span class="p">.</span><span class="n">strip</span><span class="p">().</span><span class="n">split</span><span class="p">(</span><span class="s">'</span><span class="se">\n</span><span class="s">'</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">line</span><span class="p">:</span>
                <span class="n">parts</span> <span class="o">=</span> <span class="n">line</span><span class="p">.</span><span class="n">split</span><span class="p">()</span>
                <span class="n">pods_usage</span><span class="p">.</span><span class="n">append</span><span class="p">({</span>
                    <span class="s">'name'</span><span class="p">:</span> <span class="n">parts</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span>
                    <span class="s">'cpu'</span><span class="p">:</span> <span class="n">parts</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span>
                    <span class="s">'memory'</span><span class="p">:</span> <span class="n">parts</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>
                <span class="p">})</span>
        
        <span class="k">return</span> <span class="n">pods_usage</span>
    
    <span class="k">def</span> <span class="nf">find_unused_resources</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="s">"""查找未使用的资源"""</span>
        <span class="c1"># 查找未使用的ConfigMaps
</span>        <span class="n">cmd</span> <span class="o">=</span> <span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">kubectl</span><span class="si">}</span><span class="s"> get configmaps -o json"</span>
        <span class="n">result</span> <span class="o">=</span> <span class="n">subprocess</span><span class="p">.</span><span class="n">run</span><span class="p">(</span><span class="n">cmd</span><span class="p">.</span><span class="n">split</span><span class="p">(),</span> <span class="n">capture_output</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">text</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
        <span class="n">configmaps</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="n">loads</span><span class="p">(</span><span class="n">result</span><span class="p">.</span><span class="n">stdout</span><span class="p">)</span>
        
        <span class="n">unused_configmaps</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">cm</span> <span class="ow">in</span> <span class="n">configmaps</span><span class="p">[</span><span class="s">'items'</span><span class="p">]:</span>
            <span class="c1"># 检查是否被Pod使用
</span>            <span class="n">cmd</span> <span class="o">=</span> <span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">kubectl</span><span class="si">}</span><span class="s"> get pods -o json"</span>
            <span class="n">pods_result</span> <span class="o">=</span> <span class="n">subprocess</span><span class="p">.</span><span class="n">run</span><span class="p">(</span><span class="n">cmd</span><span class="p">.</span><span class="n">split</span><span class="p">(),</span> <span class="n">capture_output</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">text</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
            <span class="n">pods</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="n">loads</span><span class="p">(</span><span class="n">pods_result</span><span class="p">.</span><span class="n">stdout</span><span class="p">)</span>
            
            <span class="n">is_used</span> <span class="o">=</span> <span class="bp">False</span>
            <span class="k">for</span> <span class="n">pod</span> <span class="ow">in</span> <span class="n">pods</span><span class="p">[</span><span class="s">'items'</span><span class="p">]:</span>
                <span class="c1"># 检查环境变量和挂载卷
</span>                <span class="n">spec</span> <span class="o">=</span> <span class="n">pod</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s">'spec'</span><span class="p">,</span> <span class="p">{})</span>
                <span class="n">containers</span> <span class="o">=</span> <span class="n">spec</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s">'containers'</span><span class="p">,</span> <span class="p">[])</span>
                
                <span class="k">for</span> <span class="n">container</span> <span class="ow">in</span> <span class="n">containers</span><span class="p">:</span>
                    <span class="c1"># 检查环境变量
</span>                    <span class="n">env</span> <span class="o">=</span> <span class="n">container</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s">'env'</span><span class="p">,</span> <span class="p">[])</span>
                    <span class="k">for</span> <span class="n">env_var</span> <span class="ow">in</span> <span class="n">env</span><span class="p">:</span>
                        <span class="k">if</span> <span class="n">env_var</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s">'valueFrom'</span><span class="p">,</span> <span class="p">{}).</span><span class="n">get</span><span class="p">(</span><span class="s">'configMapKeyRef'</span><span class="p">,</span> <span class="p">{}).</span><span class="n">get</span><span class="p">(</span><span class="s">'name'</span><span class="p">)</span> <span class="o">==</span> <span class="n">cm</span><span class="p">[</span><span class="s">'metadata'</span><span class="p">][</span><span class="s">'name'</span><span class="p">]:</span>
                            <span class="n">is_used</span> <span class="o">=</span> <span class="bp">True</span>
                            <span class="k">break</span>
                    
                    <span class="c1"># 检查挂载卷
</span>                    <span class="n">volume_mounts</span> <span class="o">=</span> <span class="n">container</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s">'volumeMounts'</span><span class="p">,</span> <span class="p">[])</span>
                    <span class="n">volumes</span> <span class="o">=</span> <span class="n">spec</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s">'volumes'</span><span class="p">,</span> <span class="p">[])</span>
                    <span class="k">for</span> <span class="n">volume</span> <span class="ow">in</span> <span class="n">volumes</span><span class="p">:</span>
                        <span class="k">if</span> <span class="n">volume</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s">'configMap'</span><span class="p">,</span> <span class="p">{}).</span><span class="n">get</span><span class="p">(</span><span class="s">'name'</span><span class="p">)</span> <span class="o">==</span> <span class="n">cm</span><span class="p">[</span><span class="s">'metadata'</span><span class="p">][</span><span class="s">'name'</span><span class="p">]:</span>
                            <span class="n">is_used</span> <span class="o">=</span> <span class="bp">True</span>
                            <span class="k">break</span>
            
            <span class="k">if</span> <span class="ow">not</span> <span class="n">is_used</span><span class="p">:</span>
                <span class="n">unused_configmaps</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">cm</span><span class="p">[</span><span class="s">'metadata'</span><span class="p">][</span><span class="s">'name'</span><span class="p">])</span>
        
        <span class="k">return</span> <span class="p">{</span>
            <span class="s">'unused_configmaps'</span><span class="p">:</span> <span class="n">unused_configmaps</span>
        <span class="p">}</span>
    
    <span class="k">def</span> <span class="nf">optimize_resources</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="s">"""资源优化建议"""</span>
        <span class="n">usage</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">get_resource_usage</span><span class="p">()</span>
        <span class="n">recommendations</span> <span class="o">=</span> <span class="p">[]</span>
        
        <span class="k">for</span> <span class="n">pod</span> <span class="ow">in</span> <span class="n">usage</span><span class="p">:</span>
            <span class="n">cpu_val</span> <span class="o">=</span> <span class="nb">float</span><span class="p">(</span><span class="n">pod</span><span class="p">[</span><span class="s">'cpu'</span><span class="p">].</span><span class="n">replace</span><span class="p">(</span><span class="s">'m'</span><span class="p">,</span> <span class="s">''</span><span class="p">))</span> <span class="k">if</span> <span class="s">'m'</span> <span class="ow">in</span> <span class="n">pod</span><span class="p">[</span><span class="s">'cpu'</span><span class="p">]</span> <span class="k">else</span> <span class="nb">float</span><span class="p">(</span><span class="n">pod</span><span class="p">[</span><span class="s">'cpu'</span><span class="p">])</span> <span class="o">*</span> <span class="mi">1000</span>
            <span class="n">memory_val</span> <span class="o">=</span> <span class="nb">float</span><span class="p">(</span><span class="n">pod</span><span class="p">[</span><span class="s">'memory'</span><span class="p">].</span><span class="n">replace</span><span class="p">(</span><span class="s">'Mi'</span><span class="p">,</span> <span class="s">''</span><span class="p">))</span>
            
            <span class="c1"># CPU使用率过低
</span>            <span class="k">if</span> <span class="n">cpu_val</span> <span class="o">&lt;</span> <span class="mi">50</span><span class="p">:</span>  <span class="c1"># 50m
</span>                <span class="n">recommendations</span><span class="p">.</span><span class="n">append</span><span class="p">({</span>
                    <span class="s">'pod'</span><span class="p">:</span> <span class="n">pod</span><span class="p">[</span><span class="s">'name'</span><span class="p">],</span>
                    <span class="s">'type'</span><span class="p">:</span> <span class="s">'CPU_UNDERUTILIZED'</span><span class="p">,</span>
                    <span class="s">'current'</span><span class="p">:</span> <span class="n">pod</span><span class="p">[</span><span class="s">'cpu'</span><span class="p">],</span>
                    <span class="s">'suggestion'</span><span class="p">:</span> <span class="s">'Consider reducing CPU request/limit'</span>
                <span class="p">})</span>
            
            <span class="c1"># 内存使用率检查
</span>            <span class="k">if</span> <span class="n">memory_val</span> <span class="o">&lt;</span> <span class="mi">64</span><span class="p">:</span>  <span class="c1"># 64Mi
</span>                <span class="n">recommendations</span><span class="p">.</span><span class="n">append</span><span class="p">({</span>
                    <span class="s">'pod'</span><span class="p">:</span> <span class="n">pod</span><span class="p">[</span><span class="s">'name'</span><span class="p">],</span>
                    <span class="s">'type'</span><span class="p">:</span> <span class="s">'MEMORY_UNDERUTILIZED'</span><span class="p">,</span>
                    <span class="s">'current'</span><span class="p">:</span> <span class="n">pod</span><span class="p">[</span><span class="s">'memory'</span><span class="p">],</span>
                    <span class="s">'suggestion'</span><span class="p">:</span> <span class="s">'Consider reducing memory request/limit'</span>
                <span class="p">})</span>
        
        <span class="k">return</span> <span class="n">recommendations</span>
    
    <span class="k">def</span> <span class="nf">generate_report</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="s">"""生成优化报告"""</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"="</span> <span class="o">*</span> <span class="mi">50</span><span class="p">)</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"Kubernetes 集群优化报告"</span><span class="p">)</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"="</span> <span class="o">*</span> <span class="mi">50</span><span class="p">)</span>
        <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"生成时间: </span><span class="si">{</span><span class="n">datetime</span><span class="p">.</span><span class="n">now</span><span class="p">().</span><span class="n">strftime</span><span class="p">(</span><span class="s">'%Y-%m-%d %H</span><span class="si">:</span><span class="o">%</span><span class="n">M</span><span class="si">:</span><span class="o">%</span><span class="n">S</span><span class="s">')</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
        <span class="k">print</span><span class="p">()</span>
        
        <span class="c1"># 资源使用情况
</span>        <span class="n">usage</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">get_resource_usage</span><span class="p">()</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"资源使用情况:"</span><span class="p">)</span>
        <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="s">'Pod名称'</span><span class="si">:</span><span class="o">&lt;</span><span class="mi">30</span><span class="si">}</span><span class="s"> </span><span class="si">{</span><span class="s">'CPU'</span><span class="si">:</span><span class="o">&lt;</span><span class="mi">10</span><span class="si">}</span><span class="s"> </span><span class="si">{</span><span class="s">'内存'</span><span class="si">:</span><span class="o">&lt;</span><span class="mi">10</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"-"</span> <span class="o">*</span> <span class="mi">50</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">pod</span> <span class="ow">in</span> <span class="n">usage</span><span class="p">:</span>
            <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="n">pod</span><span class="p">[</span><span class="s">'name'</span><span class="p">]</span><span class="si">:</span><span class="o">&lt;</span><span class="mi">30</span><span class="si">}</span><span class="s"> </span><span class="si">{</span><span class="n">pod</span><span class="p">[</span><span class="s">'cpu'</span><span class="p">]</span><span class="si">:</span><span class="o">&lt;</span><span class="mi">10</span><span class="si">}</span><span class="s"> </span><span class="si">{</span><span class="n">pod</span><span class="p">[</span><span class="s">'memory'</span><span class="p">]</span><span class="si">:</span><span class="o">&lt;</span><span class="mi">10</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
        <span class="k">print</span><span class="p">()</span>
        
        <span class="c1"># 优化建议
</span>        <span class="n">recommendations</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">optimize_resources</span><span class="p">()</span>
        <span class="k">if</span> <span class="n">recommendations</span><span class="p">:</span>
            <span class="k">print</span><span class="p">(</span><span class="s">"优化建议:"</span><span class="p">)</span>
            <span class="k">for</span> <span class="n">rec</span> <span class="ow">in</span> <span class="n">recommendations</span><span class="p">:</span>
                <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"- </span><span class="si">{</span><span class="n">rec</span><span class="p">[</span><span class="s">'pod'</span><span class="p">]</span><span class="si">}</span><span class="s">: </span><span class="si">{</span><span class="n">rec</span><span class="p">[</span><span class="s">'suggestion'</span><span class="p">]</span><span class="si">}</span><span class="s"> (当前: </span><span class="si">{</span><span class="n">rec</span><span class="p">[</span><span class="s">'current'</span><span class="p">]</span><span class="si">}</span><span class="s">)"</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">print</span><span class="p">(</span><span class="s">"暂无优化建议"</span><span class="p">)</span>
        <span class="k">print</span><span class="p">()</span>
        
        <span class="c1"># 未使用资源
</span>        <span class="n">unused</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">find_unused_resources</span><span class="p">()</span>
        <span class="k">if</span> <span class="n">unused</span><span class="p">[</span><span class="s">'unused_configmaps'</span><span class="p">]:</span>
            <span class="k">print</span><span class="p">(</span><span class="s">"未使用的ConfigMaps:"</span><span class="p">)</span>
            <span class="k">for</span> <span class="n">cm</span> <span class="ow">in</span> <span class="n">unused</span><span class="p">[</span><span class="s">'unused_configmaps'</span><span class="p">]:</span>
                <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"- </span><span class="si">{</span><span class="n">cm</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">print</span><span class="p">(</span><span class="s">"未发现未使用的ConfigMaps"</span><span class="p">)</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">"__main__"</span><span class="p">:</span>
    <span class="n">optimizer</span> <span class="o">=</span> <span class="n">K8sOptimizer</span><span class="p">()</span>
    <span class="n">optimizer</span><span class="p">.</span><span class="n">generate_report</span><span class="p">()</span>
</code></pre></div></div>

<h2 id="故障排查指南">故障排查指南</h2>

<h3 id="1-常用调试命令">1. 常用调试命令</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>
<span class="c"># k8s-debug.sh</span>

<span class="c"># 集群状态检查</span>
<span class="nb">echo</span> <span class="s2">"=== 集群状态 ==="</span>
kubectl cluster-info
kubectl get nodes <span class="nt">-o</span> wide
kubectl get pods <span class="nt">--all-namespaces</span> | <span class="nb">grep</span> <span class="nt">-v</span> Running

<span class="c"># 资源使用情况</span>
<span class="nb">echo</span> <span class="s2">"=== 资源使用 ==="</span>
kubectl top nodes
kubectl top pods <span class="nt">--all-namespaces</span> <span class="nt">--sort-by</span><span class="o">=</span>cpu
kubectl top pods <span class="nt">--all-namespaces</span> <span class="nt">--sort-by</span><span class="o">=</span>memory

<span class="c"># 事件查看</span>
<span class="nb">echo</span> <span class="s2">"=== 最近事件 ==="</span>
kubectl get events <span class="nt">--sort-by</span><span class="o">=</span>.metadata.creationTimestamp

<span class="c"># 网络连接测试</span>
<span class="nb">echo</span> <span class="s2">"=== 网络测试 ==="</span>
kubectl run tmp-shell <span class="nt">--rm</span> <span class="nt">-i</span> <span class="nt">--tty</span> <span class="nt">--image</span> nicolaka/netshoot <span class="nt">--</span> /bin/bash

<span class="c"># 日志查看</span>
<span class="nb">echo</span> <span class="s2">"=== Pod日志 ==="</span>
kubectl logs <span class="nt">-f</span> deployment/my-app <span class="nt">--tail</span><span class="o">=</span>100

<span class="c"># 进入Pod调试</span>
<span class="nb">echo</span> <span class="s2">"=== Pod调试 ==="</span>
kubectl <span class="nb">exec</span> <span class="nt">-it</span> pod-name <span class="nt">--</span> /bin/bash

<span class="c"># 端口转发</span>
<span class="nb">echo</span> <span class="s2">"=== 端口转发 ==="</span>
kubectl port-forward service/my-service 8080:80
</code></pre></div></div>

<h3 id="2-问题诊断脚本">2. 问题诊断脚本</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#!/usr/bin/env python3
# k8s-troubleshoot.py
</span>
<span class="kn">import</span> <span class="nn">subprocess</span>
<span class="kn">import</span> <span class="nn">json</span>
<span class="kn">import</span> <span class="nn">re</span>
<span class="kn">from</span> <span class="nn">datetime</span> <span class="kn">import</span> <span class="n">datetime</span>

<span class="k">class</span> <span class="nc">K8sTroubleshooter</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">kubectl</span> <span class="o">=</span> <span class="s">"kubectl"</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">issues</span> <span class="o">=</span> <span class="p">[]</span>
    
    <span class="k">def</span> <span class="nf">check_pod_status</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="s">"""检查Pod状态"""</span>
        <span class="n">cmd</span> <span class="o">=</span> <span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">kubectl</span><span class="si">}</span><span class="s"> get pods --all-namespaces -o json"</span>
        <span class="n">result</span> <span class="o">=</span> <span class="n">subprocess</span><span class="p">.</span><span class="n">run</span><span class="p">(</span><span class="n">cmd</span><span class="p">.</span><span class="n">split</span><span class="p">(),</span> <span class="n">capture_output</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">text</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
        <span class="n">pods</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="n">loads</span><span class="p">(</span><span class="n">result</span><span class="p">.</span><span class="n">stdout</span><span class="p">)</span>
        
        <span class="k">for</span> <span class="n">pod</span> <span class="ow">in</span> <span class="n">pods</span><span class="p">[</span><span class="s">'items'</span><span class="p">]:</span>
            <span class="n">pod_name</span> <span class="o">=</span> <span class="n">pod</span><span class="p">[</span><span class="s">'metadata'</span><span class="p">][</span><span class="s">'name'</span><span class="p">]</span>
            <span class="n">namespace</span> <span class="o">=</span> <span class="n">pod</span><span class="p">[</span><span class="s">'metadata'</span><span class="p">][</span><span class="s">'namespace'</span><span class="p">]</span>
            <span class="n">status</span> <span class="o">=</span> <span class="n">pod</span><span class="p">[</span><span class="s">'status'</span><span class="p">][</span><span class="s">'phase'</span><span class="p">]</span>
            
            <span class="k">if</span> <span class="n">status</span> <span class="o">!=</span> <span class="s">'Running'</span><span class="p">:</span>
                <span class="c1"># 获取详细状态
</span>                <span class="n">conditions</span> <span class="o">=</span> <span class="n">pod</span><span class="p">[</span><span class="s">'status'</span><span class="p">].</span><span class="n">get</span><span class="p">(</span><span class="s">'conditions'</span><span class="p">,</span> <span class="p">[])</span>
                <span class="n">container_statuses</span> <span class="o">=</span> <span class="n">pod</span><span class="p">[</span><span class="s">'status'</span><span class="p">].</span><span class="n">get</span><span class="p">(</span><span class="s">'containerStatuses'</span><span class="p">,</span> <span class="p">[])</span>
                
                <span class="n">issue</span> <span class="o">=</span> <span class="p">{</span>
                    <span class="s">'type'</span><span class="p">:</span> <span class="s">'POD_NOT_RUNNING'</span><span class="p">,</span>
                    <span class="s">'pod'</span><span class="p">:</span> <span class="n">pod_name</span><span class="p">,</span>
                    <span class="s">'namespace'</span><span class="p">:</span> <span class="n">namespace</span><span class="p">,</span>
                    <span class="s">'status'</span><span class="p">:</span> <span class="n">status</span><span class="p">,</span>
                    <span class="s">'conditions'</span><span class="p">:</span> <span class="n">conditions</span><span class="p">,</span>
                    <span class="s">'containers'</span><span class="p">:</span> <span class="n">container_statuses</span>
                <span class="p">}</span>
                <span class="bp">self</span><span class="p">.</span><span class="n">issues</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">issue</span><span class="p">)</span>
    
    <span class="k">def</span> <span class="nf">check_resource_limits</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="s">"""检查资源限制"""</span>
        <span class="n">cmd</span> <span class="o">=</span> <span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">kubectl</span><span class="si">}</span><span class="s"> describe nodes"</span>
        <span class="n">result</span> <span class="o">=</span> <span class="n">subprocess</span><span class="p">.</span><span class="n">run</span><span class="p">(</span><span class="n">cmd</span><span class="p">.</span><span class="n">split</span><span class="p">(),</span> <span class="n">capture_output</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">text</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
        
        <span class="c1"># 解析节点资源使用情况
</span>        <span class="n">lines</span> <span class="o">=</span> <span class="n">result</span><span class="p">.</span><span class="n">stdout</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="s">'</span><span class="se">\n</span><span class="s">'</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">line</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">lines</span><span class="p">):</span>
            <span class="k">if</span> <span class="s">'Allocated resources:'</span> <span class="ow">in</span> <span class="n">line</span><span class="p">:</span>
                <span class="c1"># 查找CPU和内存使用率
</span>                <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="nb">min</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">10</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">lines</span><span class="p">))):</span>
                    <span class="k">if</span> <span class="s">'cpu'</span> <span class="ow">in</span> <span class="n">lines</span><span class="p">[</span><span class="n">j</span><span class="p">]:</span>
                        <span class="n">cpu_match</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="n">search</span><span class="p">(</span><span class="sa">r</span><span class="s">'(\d+)%'</span><span class="p">,</span> <span class="n">lines</span><span class="p">[</span><span class="n">j</span><span class="p">])</span>
                        <span class="k">if</span> <span class="n">cpu_match</span> <span class="ow">and</span> <span class="nb">int</span><span class="p">(</span><span class="n">cpu_match</span><span class="p">.</span><span class="n">group</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span> <span class="o">&gt;</span> <span class="mi">80</span><span class="p">:</span>
                            <span class="bp">self</span><span class="p">.</span><span class="n">issues</span><span class="p">.</span><span class="n">append</span><span class="p">({</span>
                                <span class="s">'type'</span><span class="p">:</span> <span class="s">'HIGH_CPU_USAGE'</span><span class="p">,</span>
                                <span class="s">'usage'</span><span class="p">:</span> <span class="n">cpu_match</span><span class="p">.</span><span class="n">group</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="s">'%'</span>
                            <span class="p">})</span>
                    <span class="k">elif</span> <span class="s">'memory'</span> <span class="ow">in</span> <span class="n">lines</span><span class="p">[</span><span class="n">j</span><span class="p">]:</span>
                        <span class="n">memory_match</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="n">search</span><span class="p">(</span><span class="sa">r</span><span class="s">'(\d+)%'</span><span class="p">,</span> <span class="n">lines</span><span class="p">[</span><span class="n">j</span><span class="p">])</span>
                        <span class="k">if</span> <span class="n">memory_match</span> <span class="ow">and</span> <span class="nb">int</span><span class="p">(</span><span class="n">memory_match</span><span class="p">.</span><span class="n">group</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span> <span class="o">&gt;</span> <span class="mi">80</span><span class="p">:</span>
                            <span class="bp">self</span><span class="p">.</span><span class="n">issues</span><span class="p">.</span><span class="n">append</span><span class="p">({</span>
                                <span class="s">'type'</span><span class="p">:</span> <span class="s">'HIGH_MEMORY_USAGE'</span><span class="p">,</span>
                                <span class="s">'usage'</span><span class="p">:</span> <span class="n">memory_match</span><span class="p">.</span><span class="n">group</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="s">'%'</span>
                            <span class="p">})</span>
    
    <span class="k">def</span> <span class="nf">check_storage_issues</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="s">"""检查存储问题"""</span>
        <span class="n">cmd</span> <span class="o">=</span> <span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">kubectl</span><span class="si">}</span><span class="s"> get pvc --all-namespaces -o json"</span>
        <span class="n">result</span> <span class="o">=</span> <span class="n">subprocess</span><span class="p">.</span><span class="n">run</span><span class="p">(</span><span class="n">cmd</span><span class="p">.</span><span class="n">split</span><span class="p">(),</span> <span class="n">capture_output</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">text</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
        <span class="n">pvcs</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="n">loads</span><span class="p">(</span><span class="n">result</span><span class="p">.</span><span class="n">stdout</span><span class="p">)</span>
        
        <span class="k">for</span> <span class="n">pvc</span> <span class="ow">in</span> <span class="n">pvcs</span><span class="p">[</span><span class="s">'items'</span><span class="p">]:</span>
            <span class="n">status</span> <span class="o">=</span> <span class="n">pvc</span><span class="p">[</span><span class="s">'status'</span><span class="p">].</span><span class="n">get</span><span class="p">(</span><span class="s">'phase'</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">status</span> <span class="o">!=</span> <span class="s">'Bound'</span><span class="p">:</span>
                <span class="bp">self</span><span class="p">.</span><span class="n">issues</span><span class="p">.</span><span class="n">append</span><span class="p">({</span>
                    <span class="s">'type'</span><span class="p">:</span> <span class="s">'PVC_NOT_BOUND'</span><span class="p">,</span>
                    <span class="s">'pvc'</span><span class="p">:</span> <span class="n">pvc</span><span class="p">[</span><span class="s">'metadata'</span><span class="p">][</span><span class="s">'name'</span><span class="p">],</span>
                    <span class="s">'namespace'</span><span class="p">:</span> <span class="n">pvc</span><span class="p">[</span><span class="s">'metadata'</span><span class="p">][</span><span class="s">'namespace'</span><span class="p">],</span>
                    <span class="s">'status'</span><span class="p">:</span> <span class="n">status</span>
                <span class="p">})</span>
    
    <span class="k">def</span> <span class="nf">check_network_policies</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="s">"""检查网络策略"""</span>
        <span class="n">cmd</span> <span class="o">=</span> <span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">kubectl</span><span class="si">}</span><span class="s"> get networkpolicies --all-namespaces -o json"</span>
        <span class="n">result</span> <span class="o">=</span> <span class="n">subprocess</span><span class="p">.</span><span class="n">run</span><span class="p">(</span><span class="n">cmd</span><span class="p">.</span><span class="n">split</span><span class="p">(),</span> <span class="n">capture_output</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">text</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
        
        <span class="k">if</span> <span class="n">result</span><span class="p">.</span><span class="n">returncode</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
            <span class="n">policies</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="n">loads</span><span class="p">(</span><span class="n">result</span><span class="p">.</span><span class="n">stdout</span><span class="p">)</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">policies</span><span class="p">[</span><span class="s">'items'</span><span class="p">]:</span>
                <span class="bp">self</span><span class="p">.</span><span class="n">issues</span><span class="p">.</span><span class="n">append</span><span class="p">({</span>
                    <span class="s">'type'</span><span class="p">:</span> <span class="s">'NO_NETWORK_POLICIES'</span><span class="p">,</span>
                    <span class="s">'message'</span><span class="p">:</span> <span class="s">'未发现网络策略，可能存在安全风险'</span>
                <span class="p">})</span>
    
    <span class="k">def</span> <span class="nf">generate_report</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="s">"""生成故障排查报告"""</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"="</span> <span class="o">*</span> <span class="mi">60</span><span class="p">)</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"Kubernetes 故障排查报告"</span><span class="p">)</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"="</span> <span class="o">*</span> <span class="mi">60</span><span class="p">)</span>
        <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"检查时间: </span><span class="si">{</span><span class="n">datetime</span><span class="p">.</span><span class="n">now</span><span class="p">().</span><span class="n">strftime</span><span class="p">(</span><span class="s">'%Y-%m-%d %H</span><span class="si">:</span><span class="o">%</span><span class="n">M</span><span class="si">:</span><span class="o">%</span><span class="n">S</span><span class="s">')</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
        <span class="k">print</span><span class="p">()</span>
        
        <span class="k">if</span> <span class="ow">not</span> <span class="bp">self</span><span class="p">.</span><span class="n">issues</span><span class="p">:</span>
            <span class="k">print</span><span class="p">(</span><span class="s">"✅ 未发现明显问题"</span><span class="p">)</span>
            <span class="k">return</span>
        
        <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"🔍 发现 </span><span class="si">{</span><span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">issues</span><span class="p">)</span><span class="si">}</span><span class="s"> 个问题:"</span><span class="p">)</span>
        <span class="k">print</span><span class="p">()</span>
        
        <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">issue</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">issues</span><span class="p">,</span> <span class="mi">1</span><span class="p">):</span>
            <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s">. </span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">format_issue</span><span class="p">(</span><span class="n">issue</span><span class="p">)</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
            <span class="k">print</span><span class="p">()</span>
    
    <span class="k">def</span> <span class="nf">format_issue</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">issue</span><span class="p">):</span>
        <span class="s">"""格式化问题描述"""</span>
        <span class="n">issue_type</span> <span class="o">=</span> <span class="n">issue</span><span class="p">[</span><span class="s">'type'</span><span class="p">]</span>
        
        <span class="k">if</span> <span class="n">issue_type</span> <span class="o">==</span> <span class="s">'POD_NOT_RUNNING'</span><span class="p">:</span>
            <span class="k">return</span> <span class="sa">f</span><span class="s">"Pod </span><span class="si">{</span><span class="n">issue</span><span class="p">[</span><span class="s">'pod'</span><span class="p">]</span><span class="si">}</span><span class="s"> (namespace: </span><span class="si">{</span><span class="n">issue</span><span class="p">[</span><span class="s">'namespace'</span><span class="p">]</span><span class="si">}</span><span class="s">) 状态异常: </span><span class="si">{</span><span class="n">issue</span><span class="p">[</span><span class="s">'status'</span><span class="p">]</span><span class="si">}</span><span class="s">"</span>
        
        <span class="k">elif</span> <span class="n">issue_type</span> <span class="o">==</span> <span class="s">'HIGH_CPU_USAGE'</span><span class="p">:</span>
            <span class="k">return</span> <span class="sa">f</span><span class="s">"节点CPU使用率过高: </span><span class="si">{</span><span class="n">issue</span><span class="p">[</span><span class="s">'usage'</span><span class="p">]</span><span class="si">}</span><span class="s">"</span>
        
        <span class="k">elif</span> <span class="n">issue_type</span> <span class="o">==</span> <span class="s">'HIGH_MEMORY_USAGE'</span><span class="p">:</span>
            <span class="k">return</span> <span class="sa">f</span><span class="s">"节点内存使用率过高: </span><span class="si">{</span><span class="n">issue</span><span class="p">[</span><span class="s">'usage'</span><span class="p">]</span><span class="si">}</span><span class="s">"</span>
        
        <span class="k">elif</span> <span class="n">issue_type</span> <span class="o">==</span> <span class="s">'PVC_NOT_BOUND'</span><span class="p">:</span>
            <span class="k">return</span> <span class="sa">f</span><span class="s">"PVC </span><span class="si">{</span><span class="n">issue</span><span class="p">[</span><span class="s">'pvc'</span><span class="p">]</span><span class="si">}</span><span class="s"> (namespace: </span><span class="si">{</span><span class="n">issue</span><span class="p">[</span><span class="s">'namespace'</span><span class="p">]</span><span class="si">}</span><span class="s">) 未绑定: </span><span class="si">{</span><span class="n">issue</span><span class="p">[</span><span class="s">'status'</span><span class="p">]</span><span class="si">}</span><span class="s">"</span>
        
        <span class="k">elif</span> <span class="n">issue_type</span> <span class="o">==</span> <span class="s">'NO_NETWORK_POLICIES'</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">issue</span><span class="p">[</span><span class="s">'message'</span><span class="p">]</span>
        
        <span class="k">return</span> <span class="sa">f</span><span class="s">"未知问题: </span><span class="si">{</span><span class="n">issue</span><span class="si">}</span><span class="s">"</span>
    
    <span class="k">def</span> <span class="nf">run_diagnostics</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="s">"""运行所有诊断检查"""</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"正在进行Kubernetes集群诊断..."</span><span class="p">)</span>
        
        <span class="bp">self</span><span class="p">.</span><span class="n">check_pod_status</span><span class="p">()</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">check_resource_limits</span><span class="p">()</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">check_storage_issues</span><span class="p">()</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">check_network_policies</span><span class="p">()</span>
        
        <span class="bp">self</span><span class="p">.</span><span class="n">generate_report</span><span class="p">()</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">"__main__"</span><span class="p">:</span>
    <span class="n">troubleshooter</span> <span class="o">=</span> <span class="n">K8sTroubleshooter</span><span class="p">()</span>
    <span class="n">troubleshooter</span><span class="p">.</span><span class="n">run_diagnostics</span><span class="p">()</span>
</code></pre></div></div>

<h2 id="总结">总结</h2>

<p>Kubernetes是现代云原生应用的核心平台，掌握其核心概念和最佳实践至关重要：</p>

<h3 id="关键要点">关键要点：</h3>
<ol>
  <li><strong>容器编排</strong>：理解Pod、Service、Deployment等基础概念</li>
  <li><strong>配置管理</strong>：合理使用ConfigMap和Secret管理配置</li>
  <li><strong>存储方案</strong>：正确配置持久化存储</li>
  <li><strong>安全策略</strong>：实施RBAC、网络策略等安全措施</li>
  <li><strong>监控运维</strong>：建立完整的监控和日志系统</li>
  <li><strong>CI/CD集成</strong>：自动化部署和发布流程</li>
</ol>

<h3 id="学习路径">学习路径：</h3>
<ol>
  <li><strong>基础阶段</strong>：理解容器和Kubernetes基本概念</li>
  <li><strong>实践阶段</strong>：搭建测试环境，部署简单应用</li>
  <li><strong>进阶阶段</strong>：学习高级功能，如HPA、网络策略等</li>
  <li><strong>生产阶段</strong>：掌握安全、监控、故障排查等技能</li>
</ol>

<p>Kubernetes生态系统庞大且不断发展，持续学习和实践是掌握这项技术的关键！</p>

<hr />

<p><em>你在Kubernetes实践中遇到过哪些挑战？欢迎分享你的解决方案和最佳实践！</em></p>]]></content><author><name>Chico Gong</name><email>chicogong@tencent.com</email></author><category term="云原生" /><category term="DevOps" /><category term="Kubernetes" /><category term="Docker" /><category term="容器编排" /><category term="微服务" /><category term="DevOps" /><summary type="html"><![CDATA[Kubernetes已经成为现代云原生应用部署的标准平台。本文将从基础概念开始，逐步深入到生产环境的最佳实践，帮助你全面掌握Kubernetes的核心技能。]]></summary></entry><entry><title type="html">WebRTC实时语音通信开发完整指南：构建高质量语音通话应用</title><link href="http://0.0.0.0:4000/webrtc/%E5%AE%9E%E6%97%B6%E9%80%9A%E4%BF%A1/ai-chatbot-development-guide/" rel="alternate" type="text/html" title="WebRTC实时语音通信开发完整指南：构建高质量语音通话应用" /><published>2024-01-12T00:00:00+08:00</published><updated>2024-01-12T00:00:00+08:00</updated><id>http://0.0.0.0:4000/webrtc/%E5%AE%9E%E6%97%B6%E9%80%9A%E4%BF%A1/ai-chatbot-development-guide</id><content type="html" xml:base="http://0.0.0.0:4000/webrtc/%E5%AE%9E%E6%97%B6%E9%80%9A%E4%BF%A1/ai-chatbot-development-guide/"><![CDATA[<h2 id="前言">前言</h2>

<p>WebRTC（Web Real-Time Communication）是一项革命性的技术，它使得浏览器之间可以直接进行实时音视频通信，无需安装任何插件。本文将带你从零开始构建一个完整的WebRTC语音通话应用。</p>

<h2 id="webrtc基础概念">WebRTC基础概念</h2>

<h3 id="什么是webrtc">什么是WebRTC</h3>

<p>WebRTC是一个开源项目，提供了浏览器和移动应用程序间实时通信的能力。它包含三个主要的API：</p>

<ul>
  <li><strong>MediaStream API</strong>：访问摄像头和麦克风</li>
  <li><strong>RTCPeerConnection API</strong>：建立P2P连接</li>
  <li><strong>RTCDataChannel API</strong>：传输任意数据</li>
</ul>

<h3 id="webrtc通信流程">WebRTC通信流程</h3>

<pre><code class="language-mermaid">sequenceDiagram
    participant A as 用户A
    participant S as 信令服务器
    participant B as 用户B
    
    A-&gt;&gt;S: 创建房间
    B-&gt;&gt;S: 加入房间
    A-&gt;&gt;S: 发送Offer
    S-&gt;&gt;B: 转发Offer
    B-&gt;&gt;S: 发送Answer
    S-&gt;&gt;A: 转发Answer
    A-&gt;&gt;B: ICE候选交换
    B-&gt;&gt;A: ICE候选交换
    A-&gt;&gt;B: 直接P2P通信
</code></pre>

<h2 id="技术架构设计">技术架构设计</h2>

<h3 id="整体架构">整体架构</h3>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 系统架构组件</span>
<span class="kd">const</span> <span class="nx">architecture</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">frontend</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">framework</span><span class="p">:</span> <span class="dl">"</span><span class="s2">React/Vue.js</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">webrtc</span><span class="p">:</span> <span class="dl">"</span><span class="s2">RTCPeerConnection</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">audio</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Web Audio API</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">ui</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Material-UI</span><span class="dl">"</span>
  <span class="p">},</span>
  <span class="na">backend</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">signaling</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Socket.io/WebSocket</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">server</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Node.js/Express</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">database</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Redis/MongoDB</span><span class="dl">"</span>
  <span class="p">},</span>
  <span class="na">infrastructure</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">stun</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Google STUN服务器</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">turn</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Coturn服务器</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">deployment</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Docker/AWS</span><span class="dl">"</span>
  <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div>

<h3 id="核心组件">核心组件</h3>

<ol>
  <li><strong>信令服务器</strong>：协调连接建立过程</li>
  <li><strong>STUN服务器</strong>：NAT类型检测</li>
  <li><strong>TURN服务器</strong>：NAT穿透中继</li>
  <li><strong>媒体处理</strong>：音频采集、编码、传输</li>
</ol>

<h2 id="前端webrtc实现">前端WebRTC实现</h2>

<h3 id="1-基础webrtc类">1. 基础WebRTC类</h3>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nx">WebRTCVoiceCall</span> <span class="p">{</span>
  <span class="kd">constructor</span><span class="p">(</span><span class="nx">signalingServerUrl</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">localStream</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">remoteStream</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">peerConnection</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">socket</span> <span class="o">=</span> <span class="nx">io</span><span class="p">(</span><span class="nx">signalingServerUrl</span><span class="p">);</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">roomId</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
    
    <span class="c1">// WebRTC配置</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">configuration</span> <span class="o">=</span> <span class="p">{</span>
      <span class="na">iceServers</span><span class="p">:</span> <span class="p">[</span>
        <span class="p">{</span> <span class="na">urls</span><span class="p">:</span> <span class="dl">'</span><span class="s1">stun:stun.l.google.com:19302</span><span class="dl">'</span> <span class="p">},</span>
        <span class="p">{</span> <span class="na">urls</span><span class="p">:</span> <span class="dl">'</span><span class="s1">stun:stun1.l.google.com:19302</span><span class="dl">'</span> <span class="p">},</span>
        <span class="p">{</span>
          <span class="na">urls</span><span class="p">:</span> <span class="dl">'</span><span class="s1">turn:your-turn-server.com:3478</span><span class="dl">'</span><span class="p">,</span>
          <span class="na">username</span><span class="p">:</span> <span class="dl">'</span><span class="s1">your-username</span><span class="dl">'</span><span class="p">,</span>
          <span class="na">credential</span><span class="p">:</span> <span class="dl">'</span><span class="s1">your-password</span><span class="dl">'</span>
        <span class="p">}</span>
      <span class="p">],</span>
      <span class="na">iceCandidatePoolSize</span><span class="p">:</span> <span class="mi">10</span>
    <span class="p">};</span>
    
    <span class="k">this</span><span class="p">.</span><span class="nx">setupSocketEvents</span><span class="p">();</span>
  <span class="p">}</span>
  
  <span class="nx">setupSocketEvents</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">socket</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="dl">'</span><span class="s1">room-joined</span><span class="dl">'</span><span class="p">,</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">房间已加入:</span><span class="dl">'</span><span class="p">,</span> <span class="nx">data</span><span class="p">);</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">roomId</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">roomId</span><span class="p">;</span>
    <span class="p">});</span>
    
    <span class="k">this</span><span class="p">.</span><span class="nx">socket</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="dl">'</span><span class="s1">user-joined</span><span class="dl">'</span><span class="p">,</span> <span class="k">async</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">用户加入:</span><span class="dl">'</span><span class="p">,</span> <span class="nx">data</span><span class="p">);</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">userId</span> <span class="o">!==</span> <span class="k">this</span><span class="p">.</span><span class="nx">socket</span><span class="p">.</span><span class="nx">id</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">await</span> <span class="k">this</span><span class="p">.</span><span class="nx">createOffer</span><span class="p">();</span>
      <span class="p">}</span>
    <span class="p">});</span>
    
    <span class="k">this</span><span class="p">.</span><span class="nx">socket</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="dl">'</span><span class="s1">offer</span><span class="dl">'</span><span class="p">,</span> <span class="k">async</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="k">await</span> <span class="k">this</span><span class="p">.</span><span class="nx">handleOffer</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
    <span class="p">});</span>
    
    <span class="k">this</span><span class="p">.</span><span class="nx">socket</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="dl">'</span><span class="s1">answer</span><span class="dl">'</span><span class="p">,</span> <span class="k">async</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="k">await</span> <span class="k">this</span><span class="p">.</span><span class="nx">handleAnswer</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
    <span class="p">});</span>
    
    <span class="k">this</span><span class="p">.</span><span class="nx">socket</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="dl">'</span><span class="s1">ice-candidate</span><span class="dl">'</span><span class="p">,</span> <span class="k">async</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="k">await</span> <span class="k">this</span><span class="p">.</span><span class="nx">handleIceCandidate</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
    <span class="p">});</span>
    
    <span class="k">this</span><span class="p">.</span><span class="nx">socket</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="dl">'</span><span class="s1">user-left</span><span class="dl">'</span><span class="p">,</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">handleUserLeft</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
    <span class="p">});</span>
  <span class="p">}</span>
  
  <span class="k">async</span> <span class="nx">initializeMedia</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">try</span> <span class="p">{</span>
      <span class="c1">// 获取用户媒体流</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">localStream</span> <span class="o">=</span> <span class="k">await</span> <span class="nb">navigator</span><span class="p">.</span><span class="nx">mediaDevices</span><span class="p">.</span><span class="nx">getUserMedia</span><span class="p">({</span>
        <span class="na">audio</span><span class="p">:</span> <span class="p">{</span>
          <span class="na">echoCancellation</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
          <span class="na">noiseSuppression</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
          <span class="na">autoGainControl</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
          <span class="na">sampleRate</span><span class="p">:</span> <span class="mi">48000</span><span class="p">,</span>
          <span class="na">channelCount</span><span class="p">:</span> <span class="mi">2</span>
        <span class="p">},</span>
        <span class="na">video</span><span class="p">:</span> <span class="kc">false</span>
      <span class="p">});</span>
      
      <span class="c1">// 播放本地音频（通常静音）</span>
      <span class="kd">const</span> <span class="nx">localAudio</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="dl">'</span><span class="s1">localAudio</span><span class="dl">'</span><span class="p">);</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">localAudio</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">localAudio</span><span class="p">.</span><span class="nx">srcObject</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">localStream</span><span class="p">;</span>
        <span class="nx">localAudio</span><span class="p">.</span><span class="nx">muted</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span> <span class="c1">// 避免回音</span>
      <span class="p">}</span>
      
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">媒体流初始化成功</span><span class="dl">'</span><span class="p">);</span>
      <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
      
    <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="dl">'</span><span class="s1">获取媒体流失败:</span><span class="dl">'</span><span class="p">,</span> <span class="nx">error</span><span class="p">);</span>
      <span class="k">throw</span> <span class="nx">error</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>
  
  <span class="k">async</span> <span class="nx">createPeerConnection</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">peerConnection</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">RTCPeerConnection</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">configuration</span><span class="p">);</span>
    
    <span class="c1">// 添加本地流</span>
    <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">localStream</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">localStream</span><span class="p">.</span><span class="nx">getTracks</span><span class="p">().</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">track</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">peerConnection</span><span class="p">.</span><span class="nx">addTrack</span><span class="p">(</span><span class="nx">track</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">localStream</span><span class="p">);</span>
      <span class="p">});</span>
    <span class="p">}</span>
    
    <span class="c1">// 处理远程流</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">peerConnection</span><span class="p">.</span><span class="nx">ontrack</span> <span class="o">=</span> <span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">接收到远程流</span><span class="dl">'</span><span class="p">);</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">remoteStream</span> <span class="o">=</span> <span class="nx">event</span><span class="p">.</span><span class="nx">streams</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
      
      <span class="kd">const</span> <span class="nx">remoteAudio</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="dl">'</span><span class="s1">remoteAudio</span><span class="dl">'</span><span class="p">);</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">remoteAudio</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">remoteAudio</span><span class="p">.</span><span class="nx">srcObject</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">remoteStream</span><span class="p">;</span>
      <span class="p">}</span>
    <span class="p">};</span>
    
    <span class="c1">// 处理ICE候选</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">peerConnection</span><span class="p">.</span><span class="nx">onicecandidate</span> <span class="o">=</span> <span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">candidate</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">socket</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="dl">'</span><span class="s1">ice-candidate</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span>
          <span class="na">roomId</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">roomId</span><span class="p">,</span>
          <span class="na">candidate</span><span class="p">:</span> <span class="nx">event</span><span class="p">.</span><span class="nx">candidate</span>
        <span class="p">});</span>
      <span class="p">}</span>
    <span class="p">};</span>
    
    <span class="c1">// 连接状态监听</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">peerConnection</span><span class="p">.</span><span class="nx">onconnectionstatechange</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">连接状态:</span><span class="dl">'</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">peerConnection</span><span class="p">.</span><span class="nx">connectionState</span><span class="p">);</span>
    <span class="p">};</span>
    
    <span class="k">this</span><span class="p">.</span><span class="nx">peerConnection</span><span class="p">.</span><span class="nx">oniceconnectionstatechange</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">ICE连接状态:</span><span class="dl">'</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">peerConnection</span><span class="p">.</span><span class="nx">iceConnectionState</span><span class="p">);</span>
    <span class="p">};</span>
  <span class="p">}</span>
  
  <span class="k">async</span> <span class="nx">joinRoom</span><span class="p">(</span><span class="nx">roomId</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">await</span> <span class="k">this</span><span class="p">.</span><span class="nx">initializeMedia</span><span class="p">();</span>
    <span class="k">await</span> <span class="k">this</span><span class="p">.</span><span class="nx">createPeerConnection</span><span class="p">();</span>
    
    <span class="k">this</span><span class="p">.</span><span class="nx">socket</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="dl">'</span><span class="s1">join-room</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span> <span class="nx">roomId</span> <span class="p">});</span>
  <span class="p">}</span>
  
  <span class="k">async</span> <span class="nx">createOffer</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">try</span> <span class="p">{</span>
      <span class="kd">const</span> <span class="nx">offer</span> <span class="o">=</span> <span class="k">await</span> <span class="k">this</span><span class="p">.</span><span class="nx">peerConnection</span><span class="p">.</span><span class="nx">createOffer</span><span class="p">({</span>
        <span class="na">offerToReceiveAudio</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
        <span class="na">offerToReceiveVideo</span><span class="p">:</span> <span class="kc">false</span>
      <span class="p">});</span>
      
      <span class="k">await</span> <span class="k">this</span><span class="p">.</span><span class="nx">peerConnection</span><span class="p">.</span><span class="nx">setLocalDescription</span><span class="p">(</span><span class="nx">offer</span><span class="p">);</span>
      
      <span class="k">this</span><span class="p">.</span><span class="nx">socket</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="dl">'</span><span class="s1">offer</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span>
        <span class="na">roomId</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">roomId</span><span class="p">,</span>
        <span class="na">offer</span><span class="p">:</span> <span class="nx">offer</span>
      <span class="p">});</span>
      
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Offer已创建并发送</span><span class="dl">'</span><span class="p">);</span>
      
    <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="dl">'</span><span class="s1">创建Offer失败:</span><span class="dl">'</span><span class="p">,</span> <span class="nx">error</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span>
  
  <span class="k">async</span> <span class="nx">handleOffer</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">try</span> <span class="p">{</span>
      <span class="k">await</span> <span class="k">this</span><span class="p">.</span><span class="nx">peerConnection</span><span class="p">.</span><span class="nx">setRemoteDescription</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">offer</span><span class="p">);</span>
      
      <span class="kd">const</span> <span class="nx">answer</span> <span class="o">=</span> <span class="k">await</span> <span class="k">this</span><span class="p">.</span><span class="nx">peerConnection</span><span class="p">.</span><span class="nx">createAnswer</span><span class="p">();</span>
      <span class="k">await</span> <span class="k">this</span><span class="p">.</span><span class="nx">peerConnection</span><span class="p">.</span><span class="nx">setLocalDescription</span><span class="p">(</span><span class="nx">answer</span><span class="p">);</span>
      
      <span class="k">this</span><span class="p">.</span><span class="nx">socket</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="dl">'</span><span class="s1">answer</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span>
        <span class="na">roomId</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">roomId</span><span class="p">,</span>
        <span class="na">answer</span><span class="p">:</span> <span class="nx">answer</span>
      <span class="p">});</span>
      
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Answer已创建并发送</span><span class="dl">'</span><span class="p">);</span>
      
    <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="dl">'</span><span class="s1">处理Offer失败:</span><span class="dl">'</span><span class="p">,</span> <span class="nx">error</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span>
  
  <span class="k">async</span> <span class="nx">handleAnswer</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">try</span> <span class="p">{</span>
      <span class="k">await</span> <span class="k">this</span><span class="p">.</span><span class="nx">peerConnection</span><span class="p">.</span><span class="nx">setRemoteDescription</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">answer</span><span class="p">);</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Answer已设置</span><span class="dl">'</span><span class="p">);</span>
      
    <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="dl">'</span><span class="s1">处理Answer失败:</span><span class="dl">'</span><span class="p">,</span> <span class="nx">error</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span>
  
  <span class="k">async</span> <span class="nx">handleIceCandidate</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">try</span> <span class="p">{</span>
      <span class="k">await</span> <span class="k">this</span><span class="p">.</span><span class="nx">peerConnection</span><span class="p">.</span><span class="nx">addIceCandidate</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">candidate</span><span class="p">);</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">ICE候选已添加</span><span class="dl">'</span><span class="p">);</span>
      
    <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="dl">'</span><span class="s1">添加ICE候选失败:</span><span class="dl">'</span><span class="p">,</span> <span class="nx">error</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span>
  
  <span class="nx">handleUserLeft</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">用户离开:</span><span class="dl">'</span><span class="p">,</span> <span class="nx">data</span><span class="p">);</span>
    
    <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">peerConnection</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">peerConnection</span><span class="p">.</span><span class="nx">close</span><span class="p">();</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">peerConnection</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
    <span class="p">}</span>
    
    <span class="c1">// 清理远程音频</span>
    <span class="kd">const</span> <span class="nx">remoteAudio</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="dl">'</span><span class="s1">remoteAudio</span><span class="dl">'</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">remoteAudio</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">remoteAudio</span><span class="p">.</span><span class="nx">srcObject</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>
  
  <span class="c1">// 音频控制方法</span>
  <span class="nx">muteAudio</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">localStream</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">localStream</span><span class="p">.</span><span class="nx">getAudioTracks</span><span class="p">().</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">track</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">track</span><span class="p">.</span><span class="nx">enabled</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
      <span class="p">});</span>
    <span class="p">}</span>
  <span class="p">}</span>
  
  <span class="nx">unmuteAudio</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">localStream</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">localStream</span><span class="p">.</span><span class="nx">getAudioTracks</span><span class="p">().</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">track</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">track</span><span class="p">.</span><span class="nx">enabled</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
      <span class="p">});</span>
    <span class="p">}</span>
  <span class="p">}</span>
  
  <span class="c1">// 获取音频统计信息</span>
  <span class="k">async</span> <span class="nx">getAudioStats</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">peerConnection</span><span class="p">)</span> <span class="p">{</span>
      <span class="kd">const</span> <span class="nx">stats</span> <span class="o">=</span> <span class="k">await</span> <span class="k">this</span><span class="p">.</span><span class="nx">peerConnection</span><span class="p">.</span><span class="nx">getStats</span><span class="p">();</span>
      <span class="kd">const</span> <span class="nx">audioStats</span> <span class="o">=</span> <span class="p">{};</span>
      
      <span class="nx">stats</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">report</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">report</span><span class="p">.</span><span class="nx">type</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">inbound-rtp</span><span class="dl">'</span> <span class="o">&amp;&amp;</span> <span class="nx">report</span><span class="p">.</span><span class="nx">mediaType</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">audio</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
          <span class="nx">audioStats</span><span class="p">.</span><span class="nx">inbound</span> <span class="o">=</span> <span class="nx">report</span><span class="p">;</span>
        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">report</span><span class="p">.</span><span class="nx">type</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">outbound-rtp</span><span class="dl">'</span> <span class="o">&amp;&amp;</span> <span class="nx">report</span><span class="p">.</span><span class="nx">mediaType</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">audio</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
          <span class="nx">audioStats</span><span class="p">.</span><span class="nx">outbound</span> <span class="o">=</span> <span class="nx">report</span><span class="p">;</span>
        <span class="p">}</span>
      <span class="p">});</span>
      
      <span class="k">return</span> <span class="nx">audioStats</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="kc">null</span><span class="p">;</span>
  <span class="p">}</span>
  
  <span class="c1">// 断开连接</span>
  <span class="nx">disconnect</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">localStream</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">localStream</span><span class="p">.</span><span class="nx">getTracks</span><span class="p">().</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">track</span> <span class="o">=&gt;</span> <span class="nx">track</span><span class="p">.</span><span class="nx">stop</span><span class="p">());</span>
    <span class="p">}</span>
    
    <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">peerConnection</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">peerConnection</span><span class="p">.</span><span class="nx">close</span><span class="p">();</span>
    <span class="p">}</span>
    
    <span class="k">this</span><span class="p">.</span><span class="nx">socket</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="dl">'</span><span class="s1">leave-room</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span> <span class="na">roomId</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">roomId</span> <span class="p">});</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">socket</span><span class="p">.</span><span class="nx">disconnect</span><span class="p">();</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="2-音频处理增强">2. 音频处理增强</h3>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nx">AudioProcessor</span> <span class="p">{</span>
  <span class="kd">constructor</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">audioContext</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">gainNode</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">analyserNode</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">noiseGate</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
  <span class="p">}</span>
  
  <span class="k">async</span> <span class="nx">initializeAudioProcessing</span><span class="p">(</span><span class="nx">stream</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">audioContext</span> <span class="o">=</span> <span class="k">new</span> <span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">AudioContext</span> <span class="o">||</span> <span class="nb">window</span><span class="p">.</span><span class="nx">webkitAudioContext</span><span class="p">)();</span>
    
    <span class="c1">// 创建音频源</span>
    <span class="kd">const</span> <span class="nx">source</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">audioContext</span><span class="p">.</span><span class="nx">createMediaStreamSource</span><span class="p">(</span><span class="nx">stream</span><span class="p">);</span>
    
    <span class="c1">// 创建增益节点（音量控制）</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">gainNode</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">audioContext</span><span class="p">.</span><span class="nx">createGain</span><span class="p">();</span>
    
    <span class="c1">// 创建分析器节点（音频可视化）</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">analyserNode</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">audioContext</span><span class="p">.</span><span class="nx">createAnalyser</span><span class="p">();</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">analyserNode</span><span class="p">.</span><span class="nx">fftSize</span> <span class="o">=</span> <span class="mi">256</span><span class="p">;</span>
    
    <span class="c1">// 创建噪声门</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">noiseGate</span> <span class="o">=</span> <span class="k">await</span> <span class="k">this</span><span class="p">.</span><span class="nx">createNoiseGate</span><span class="p">();</span>
    
    <span class="c1">// 连接音频节点</span>
    <span class="nx">source</span><span class="p">.</span><span class="nx">connect</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">gainNode</span><span class="p">);</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">gainNode</span><span class="p">.</span><span class="nx">connect</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">noiseGate</span><span class="p">);</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">noiseGate</span><span class="p">.</span><span class="nx">connect</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">analyserNode</span><span class="p">);</span>
    
    <span class="c1">// 创建输出流</span>
    <span class="kd">const</span> <span class="nx">destination</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">audioContext</span><span class="p">.</span><span class="nx">createMediaStreamDestination</span><span class="p">();</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">analyserNode</span><span class="p">.</span><span class="nx">connect</span><span class="p">(</span><span class="nx">destination</span><span class="p">);</span>
    
    <span class="k">return</span> <span class="nx">destination</span><span class="p">.</span><span class="nx">stream</span><span class="p">;</span>
  <span class="p">}</span>
  
  <span class="k">async</span> <span class="nx">createNoiseGate</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// 使用Web Audio API创建简单的噪声门</span>
    <span class="kd">const</span> <span class="nx">processor</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">audioContext</span><span class="p">.</span><span class="nx">createScriptProcessor</span><span class="p">(</span><span class="mi">4096</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
    <span class="kd">const</span> <span class="nx">threshold</span> <span class="o">=</span> <span class="o">-</span><span class="mi">50</span><span class="p">;</span> <span class="c1">// dB</span>
    
    <span class="nx">processor</span><span class="p">.</span><span class="nx">onaudioprocess</span> <span class="o">=</span> <span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="kd">const</span> <span class="nx">inputBuffer</span> <span class="o">=</span> <span class="nx">event</span><span class="p">.</span><span class="nx">inputBuffer</span><span class="p">;</span>
      <span class="kd">const</span> <span class="nx">outputBuffer</span> <span class="o">=</span> <span class="nx">event</span><span class="p">.</span><span class="nx">outputBuffer</span><span class="p">;</span>
      
      <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">channel</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">channel</span> <span class="o">&lt;</span> <span class="nx">inputBuffer</span><span class="p">.</span><span class="nx">numberOfChannels</span><span class="p">;</span> <span class="nx">channel</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">const</span> <span class="nx">inputData</span> <span class="o">=</span> <span class="nx">inputBuffer</span><span class="p">.</span><span class="nx">getChannelData</span><span class="p">(</span><span class="nx">channel</span><span class="p">);</span>
        <span class="kd">const</span> <span class="nx">outputData</span> <span class="o">=</span> <span class="nx">outputBuffer</span><span class="p">.</span><span class="nx">getChannelData</span><span class="p">(</span><span class="nx">channel</span><span class="p">);</span>
        
        <span class="c1">// 计算音频级别</span>
        <span class="kd">let</span> <span class="nx">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">inputData</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
          <span class="nx">sum</span> <span class="o">+=</span> <span class="nx">inputData</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">*</span> <span class="nx">inputData</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
        <span class="p">}</span>
        <span class="kd">const</span> <span class="nx">rms</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">sqrt</span><span class="p">(</span><span class="nx">sum</span> <span class="o">/</span> <span class="nx">inputData</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span>
        <span class="kd">const</span> <span class="nx">dbLevel</span> <span class="o">=</span> <span class="mi">20</span> <span class="o">*</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">log10</span><span class="p">(</span><span class="nx">rms</span><span class="p">);</span>
        
        <span class="c1">// 应用噪声门</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">dbLevel</span> <span class="o">&gt;</span> <span class="nx">threshold</span><span class="p">)</span> <span class="p">{</span>
          <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">inputData</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">outputData</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="nx">inputData</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
          <span class="p">}</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
          <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">inputData</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">outputData</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
          <span class="p">}</span>
        <span class="p">}</span>
      <span class="p">}</span>
    <span class="p">};</span>
    
    <span class="k">return</span> <span class="nx">processor</span><span class="p">;</span>
  <span class="p">}</span>
  
  <span class="nx">setVolume</span><span class="p">(</span><span class="nx">volume</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">gainNode</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">gainNode</span><span class="p">.</span><span class="nx">gain</span><span class="p">.</span><span class="nx">value</span> <span class="o">=</span> <span class="nx">volume</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>
  
  <span class="nx">getAudioLevel</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">analyserNode</span><span class="p">)</span> <span class="p">{</span>
      <span class="kd">const</span> <span class="nx">bufferLength</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">analyserNode</span><span class="p">.</span><span class="nx">frequencyBinCount</span><span class="p">;</span>
      <span class="kd">const</span> <span class="nx">dataArray</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Uint8Array</span><span class="p">(</span><span class="nx">bufferLength</span><span class="p">);</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">analyserNode</span><span class="p">.</span><span class="nx">getByteFrequencyData</span><span class="p">(</span><span class="nx">dataArray</span><span class="p">);</span>
      
      <span class="kd">let</span> <span class="nx">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
      <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">bufferLength</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">sum</span> <span class="o">+=</span> <span class="nx">dataArray</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
      <span class="p">}</span>
      
      <span class="k">return</span> <span class="nx">sum</span> <span class="o">/</span> <span class="nx">bufferLength</span> <span class="o">/</span> <span class="mi">255</span><span class="p">;</span> <span class="c1">// 归一化到0-1</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="后端信令服务器">后端信令服务器</h2>

<h3 id="nodejs--socketio实现">Node.js + Socket.io实现</h3>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">express</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">http</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">http</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">socketIo</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">socket.io</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">cors</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">cors</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">Redis</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">redis</span><span class="dl">'</span><span class="p">);</span>

<span class="kd">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">express</span><span class="p">();</span>
<span class="kd">const</span> <span class="nx">server</span> <span class="o">=</span> <span class="nx">http</span><span class="p">.</span><span class="nx">createServer</span><span class="p">(</span><span class="nx">app</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">io</span> <span class="o">=</span> <span class="nx">socketIo</span><span class="p">(</span><span class="nx">server</span><span class="p">,</span> <span class="p">{</span>
  <span class="na">cors</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">origin</span><span class="p">:</span> <span class="dl">"</span><span class="s2">*</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">methods</span><span class="p">:</span> <span class="p">[</span><span class="dl">"</span><span class="s2">GET</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">POST</span><span class="dl">"</span><span class="p">]</span>
  <span class="p">}</span>
<span class="p">});</span>

<span class="c1">// Redis客户端（可选，用于集群部署）</span>
<span class="kd">const</span> <span class="nx">redis</span> <span class="o">=</span> <span class="nx">Redis</span><span class="p">.</span><span class="nx">createClient</span><span class="p">();</span>

<span class="c1">// 中间件</span>
<span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">cors</span><span class="p">());</span>
<span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="nx">json</span><span class="p">());</span>

<span class="c1">// 房间管理</span>
<span class="kd">class</span> <span class="nx">RoomManager</span> <span class="p">{</span>
  <span class="kd">constructor</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">rooms</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Map</span><span class="p">();</span>
  <span class="p">}</span>
  
  <span class="nx">createRoom</span><span class="p">(</span><span class="nx">roomId</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">rooms</span><span class="p">.</span><span class="nx">has</span><span class="p">(</span><span class="nx">roomId</span><span class="p">))</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">rooms</span><span class="p">.</span><span class="kd">set</span><span class="p">(</span><span class="nx">roomId</span><span class="p">,</span> <span class="p">{</span>
        <span class="na">id</span><span class="p">:</span> <span class="nx">roomId</span><span class="p">,</span>
        <span class="na">users</span><span class="p">:</span> <span class="k">new</span> <span class="nb">Set</span><span class="p">(),</span>
        <span class="na">createdAt</span><span class="p">:</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">()</span>
      <span class="p">});</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">rooms</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="nx">roomId</span><span class="p">);</span>
  <span class="p">}</span>
  
  <span class="nx">joinRoom</span><span class="p">(</span><span class="nx">roomId</span><span class="p">,</span> <span class="nx">userId</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">room</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">createRoom</span><span class="p">(</span><span class="nx">roomId</span><span class="p">);</span>
    <span class="nx">room</span><span class="p">.</span><span class="nx">users</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">userId</span><span class="p">);</span>
    <span class="k">return</span> <span class="nx">room</span><span class="p">;</span>
  <span class="p">}</span>
  
  <span class="nx">leaveRoom</span><span class="p">(</span><span class="nx">roomId</span><span class="p">,</span> <span class="nx">userId</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">room</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">rooms</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="nx">roomId</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">room</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">room</span><span class="p">.</span><span class="nx">users</span><span class="p">.</span><span class="k">delete</span><span class="p">(</span><span class="nx">userId</span><span class="p">);</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">room</span><span class="p">.</span><span class="nx">users</span><span class="p">.</span><span class="nx">size</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">rooms</span><span class="p">.</span><span class="k">delete</span><span class="p">(</span><span class="nx">roomId</span><span class="p">);</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>
  
  <span class="nx">getRoomUsers</span><span class="p">(</span><span class="nx">roomId</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">room</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">rooms</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="nx">roomId</span><span class="p">);</span>
    <span class="k">return</span> <span class="nx">room</span> <span class="p">?</span> <span class="nb">Array</span><span class="p">.</span><span class="k">from</span><span class="p">(</span><span class="nx">room</span><span class="p">.</span><span class="nx">users</span><span class="p">)</span> <span class="p">:</span> <span class="p">[];</span>
  <span class="p">}</span>
  
  <span class="nx">getUserRooms</span><span class="p">(</span><span class="nx">userId</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">userRooms</span> <span class="o">=</span> <span class="p">[];</span>
    <span class="k">for</span> <span class="p">(</span><span class="kd">const</span> <span class="p">[</span><span class="nx">roomId</span><span class="p">,</span> <span class="nx">room</span><span class="p">]</span> <span class="k">of</span> <span class="k">this</span><span class="p">.</span><span class="nx">rooms</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">room</span><span class="p">.</span><span class="nx">users</span><span class="p">.</span><span class="nx">has</span><span class="p">(</span><span class="nx">userId</span><span class="p">))</span> <span class="p">{</span>
        <span class="nx">userRooms</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">roomId</span><span class="p">);</span>
      <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nx">userRooms</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">roomManager</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">RoomManager</span><span class="p">();</span>

<span class="c1">// Socket.io连接处理</span>
<span class="nx">io</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="dl">'</span><span class="s1">connection</span><span class="dl">'</span><span class="p">,</span> <span class="p">(</span><span class="nx">socket</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`用户连接: </span><span class="p">${</span><span class="nx">socket</span><span class="p">.</span><span class="nx">id</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
  
  <span class="c1">// 加入房间</span>
  <span class="nx">socket</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="dl">'</span><span class="s1">join-room</span><span class="dl">'</span><span class="p">,</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="p">{</span> <span class="nx">roomId</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">data</span><span class="p">;</span>
    
    <span class="k">try</span> <span class="p">{</span>
      <span class="c1">// 离开之前的房间</span>
      <span class="kd">const</span> <span class="nx">userRooms</span> <span class="o">=</span> <span class="nx">roomManager</span><span class="p">.</span><span class="nx">getUserRooms</span><span class="p">(</span><span class="nx">socket</span><span class="p">.</span><span class="nx">id</span><span class="p">);</span>
      <span class="nx">userRooms</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">oldRoomId</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">socket</span><span class="p">.</span><span class="nx">leave</span><span class="p">(</span><span class="nx">oldRoomId</span><span class="p">);</span>
        <span class="nx">roomManager</span><span class="p">.</span><span class="nx">leaveRoom</span><span class="p">(</span><span class="nx">oldRoomId</span><span class="p">,</span> <span class="nx">socket</span><span class="p">.</span><span class="nx">id</span><span class="p">);</span>
        <span class="nx">socket</span><span class="p">.</span><span class="nx">to</span><span class="p">(</span><span class="nx">oldRoomId</span><span class="p">).</span><span class="nx">emit</span><span class="p">(</span><span class="dl">'</span><span class="s1">user-left</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span> <span class="na">userId</span><span class="p">:</span> <span class="nx">socket</span><span class="p">.</span><span class="nx">id</span> <span class="p">});</span>
      <span class="p">});</span>
      
      <span class="c1">// 加入新房间</span>
      <span class="nx">socket</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="nx">roomId</span><span class="p">);</span>
      <span class="kd">const</span> <span class="nx">room</span> <span class="o">=</span> <span class="nx">roomManager</span><span class="p">.</span><span class="nx">joinRoom</span><span class="p">(</span><span class="nx">roomId</span><span class="p">,</span> <span class="nx">socket</span><span class="p">.</span><span class="nx">id</span><span class="p">);</span>
      
      <span class="c1">// 通知用户房间加入成功</span>
      <span class="nx">socket</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="dl">'</span><span class="s1">room-joined</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span>
        <span class="nx">roomId</span><span class="p">,</span>
        <span class="na">userId</span><span class="p">:</span> <span class="nx">socket</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span>
        <span class="na">users</span><span class="p">:</span> <span class="nx">roomManager</span><span class="p">.</span><span class="nx">getRoomUsers</span><span class="p">(</span><span class="nx">roomId</span><span class="p">)</span>
      <span class="p">});</span>
      
      <span class="c1">// 通知房间内其他用户</span>
      <span class="nx">socket</span><span class="p">.</span><span class="nx">to</span><span class="p">(</span><span class="nx">roomId</span><span class="p">).</span><span class="nx">emit</span><span class="p">(</span><span class="dl">'</span><span class="s1">user-joined</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span>
        <span class="na">userId</span><span class="p">:</span> <span class="nx">socket</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span>
        <span class="na">users</span><span class="p">:</span> <span class="nx">roomManager</span><span class="p">.</span><span class="nx">getRoomUsers</span><span class="p">(</span><span class="nx">roomId</span><span class="p">)</span>
      <span class="p">});</span>
      
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`用户 </span><span class="p">${</span><span class="nx">socket</span><span class="p">.</span><span class="nx">id</span><span class="p">}</span><span class="s2"> 加入房间 </span><span class="p">${</span><span class="nx">roomId</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
      
    <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="dl">'</span><span class="s1">加入房间失败:</span><span class="dl">'</span><span class="p">,</span> <span class="nx">error</span><span class="p">);</span>
      <span class="nx">socket</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="dl">'</span><span class="s1">error</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span> <span class="na">message</span><span class="p">:</span> <span class="dl">'</span><span class="s1">加入房间失败</span><span class="dl">'</span> <span class="p">});</span>
    <span class="p">}</span>
  <span class="p">});</span>
  
  <span class="c1">// 处理Offer</span>
  <span class="nx">socket</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="dl">'</span><span class="s1">offer</span><span class="dl">'</span><span class="p">,</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="p">{</span> <span class="nx">roomId</span><span class="p">,</span> <span class="nx">offer</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">data</span><span class="p">;</span>
    
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`转发Offer到房间 </span><span class="p">${</span><span class="nx">roomId</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
    <span class="nx">socket</span><span class="p">.</span><span class="nx">to</span><span class="p">(</span><span class="nx">roomId</span><span class="p">).</span><span class="nx">emit</span><span class="p">(</span><span class="dl">'</span><span class="s1">offer</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span>
      <span class="na">userId</span><span class="p">:</span> <span class="nx">socket</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span>
      <span class="nx">offer</span>
    <span class="p">});</span>
  <span class="p">});</span>
  
  <span class="c1">// 处理Answer</span>
  <span class="nx">socket</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="dl">'</span><span class="s1">answer</span><span class="dl">'</span><span class="p">,</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="p">{</span> <span class="nx">roomId</span><span class="p">,</span> <span class="nx">answer</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">data</span><span class="p">;</span>
    
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`转发Answer到房间 </span><span class="p">${</span><span class="nx">roomId</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
    <span class="nx">socket</span><span class="p">.</span><span class="nx">to</span><span class="p">(</span><span class="nx">roomId</span><span class="p">).</span><span class="nx">emit</span><span class="p">(</span><span class="dl">'</span><span class="s1">answer</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span>
      <span class="na">userId</span><span class="p">:</span> <span class="nx">socket</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span>
      <span class="nx">answer</span>
    <span class="p">});</span>
  <span class="p">});</span>
  
  <span class="c1">// 处理ICE候选</span>
  <span class="nx">socket</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="dl">'</span><span class="s1">ice-candidate</span><span class="dl">'</span><span class="p">,</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="p">{</span> <span class="nx">roomId</span><span class="p">,</span> <span class="nx">candidate</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">data</span><span class="p">;</span>
    
    <span class="nx">socket</span><span class="p">.</span><span class="nx">to</span><span class="p">(</span><span class="nx">roomId</span><span class="p">).</span><span class="nx">emit</span><span class="p">(</span><span class="dl">'</span><span class="s1">ice-candidate</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span>
      <span class="na">userId</span><span class="p">:</span> <span class="nx">socket</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span>
      <span class="nx">candidate</span>
    <span class="p">});</span>
  <span class="p">});</span>
  
  <span class="c1">// 离开房间</span>
  <span class="nx">socket</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="dl">'</span><span class="s1">leave-room</span><span class="dl">'</span><span class="p">,</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="p">{</span> <span class="nx">roomId</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">data</span><span class="p">;</span>
    
    <span class="nx">socket</span><span class="p">.</span><span class="nx">leave</span><span class="p">(</span><span class="nx">roomId</span><span class="p">);</span>
    <span class="nx">roomManager</span><span class="p">.</span><span class="nx">leaveRoom</span><span class="p">(</span><span class="nx">roomId</span><span class="p">,</span> <span class="nx">socket</span><span class="p">.</span><span class="nx">id</span><span class="p">);</span>
    
    <span class="nx">socket</span><span class="p">.</span><span class="nx">to</span><span class="p">(</span><span class="nx">roomId</span><span class="p">).</span><span class="nx">emit</span><span class="p">(</span><span class="dl">'</span><span class="s1">user-left</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span> <span class="na">userId</span><span class="p">:</span> <span class="nx">socket</span><span class="p">.</span><span class="nx">id</span> <span class="p">});</span>
    
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`用户 </span><span class="p">${</span><span class="nx">socket</span><span class="p">.</span><span class="nx">id</span><span class="p">}</span><span class="s2"> 离开房间 </span><span class="p">${</span><span class="nx">roomId</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
  <span class="p">});</span>
  
  <span class="c1">// 断开连接</span>
  <span class="nx">socket</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="dl">'</span><span class="s1">disconnect</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`用户断开连接: </span><span class="p">${</span><span class="nx">socket</span><span class="p">.</span><span class="nx">id</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
    
    <span class="c1">// 清理用户的所有房间</span>
    <span class="kd">const</span> <span class="nx">userRooms</span> <span class="o">=</span> <span class="nx">roomManager</span><span class="p">.</span><span class="nx">getUserRooms</span><span class="p">(</span><span class="nx">socket</span><span class="p">.</span><span class="nx">id</span><span class="p">);</span>
    <span class="nx">userRooms</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">roomId</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nx">roomManager</span><span class="p">.</span><span class="nx">leaveRoom</span><span class="p">(</span><span class="nx">roomId</span><span class="p">,</span> <span class="nx">socket</span><span class="p">.</span><span class="nx">id</span><span class="p">);</span>
      <span class="nx">socket</span><span class="p">.</span><span class="nx">to</span><span class="p">(</span><span class="nx">roomId</span><span class="p">).</span><span class="nx">emit</span><span class="p">(</span><span class="dl">'</span><span class="s1">user-left</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span> <span class="na">userId</span><span class="p">:</span> <span class="nx">socket</span><span class="p">.</span><span class="nx">id</span> <span class="p">});</span>
    <span class="p">});</span>
  <span class="p">});</span>
<span class="p">});</span>

<span class="c1">// REST API路由</span>
<span class="nx">app</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/api/rooms</span><span class="dl">'</span><span class="p">,</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">rooms</span> <span class="o">=</span> <span class="nb">Array</span><span class="p">.</span><span class="k">from</span><span class="p">(</span><span class="nx">roomManager</span><span class="p">.</span><span class="nx">rooms</span><span class="p">.</span><span class="nx">entries</span><span class="p">()).</span><span class="nx">map</span><span class="p">(([</span><span class="nx">id</span><span class="p">,</span> <span class="nx">room</span><span class="p">])</span> <span class="o">=&gt;</span> <span class="p">({</span>
    <span class="nx">id</span><span class="p">,</span>
    <span class="na">userCount</span><span class="p">:</span> <span class="nx">room</span><span class="p">.</span><span class="nx">users</span><span class="p">.</span><span class="nx">size</span><span class="p">,</span>
    <span class="na">createdAt</span><span class="p">:</span> <span class="nx">room</span><span class="p">.</span><span class="nx">createdAt</span>
  <span class="p">}));</span>
  
  <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">(</span><span class="nx">rooms</span><span class="p">);</span>
<span class="p">});</span>

<span class="nx">app</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/api/rooms/:roomId</span><span class="dl">'</span><span class="p">,</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="p">{</span> <span class="nx">roomId</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">;</span>
  <span class="kd">const</span> <span class="nx">users</span> <span class="o">=</span> <span class="nx">roomManager</span><span class="p">.</span><span class="nx">getRoomUsers</span><span class="p">(</span><span class="nx">roomId</span><span class="p">);</span>
  
  <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">({</span>
    <span class="nx">roomId</span><span class="p">,</span>
    <span class="nx">users</span><span class="p">,</span>
    <span class="na">userCount</span><span class="p">:</span> <span class="nx">users</span><span class="p">.</span><span class="nx">length</span>
  <span class="p">});</span>
<span class="p">});</span>

<span class="c1">// 健康检查</span>
<span class="nx">app</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/health</span><span class="dl">'</span><span class="p">,</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">({</span>
    <span class="na">status</span><span class="p">:</span> <span class="dl">'</span><span class="s1">ok</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">timestamp</span><span class="p">:</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">().</span><span class="nx">toISOString</span><span class="p">(),</span>
    <span class="na">uptime</span><span class="p">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">uptime</span><span class="p">()</span>
  <span class="p">});</span>
<span class="p">});</span>

<span class="kd">const</span> <span class="nx">PORT</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">PORT</span> <span class="o">||</span> <span class="mi">3000</span><span class="p">;</span>
<span class="nx">server</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="nx">PORT</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`信令服务器运行在端口 </span><span class="p">${</span><span class="nx">PORT</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
<span class="p">});</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">app</span><span class="p">,</span> <span class="nx">server</span><span class="p">,</span> <span class="nx">io</span> <span class="p">};</span>
</code></pre></div></div>

<h2 id="turn服务器配置">TURN服务器配置</h2>

<h3 id="coturn服务器安装">Coturn服务器安装</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Ubuntu/Debian安装</span>
<span class="nb">sudo </span>apt-get update
<span class="nb">sudo </span>apt-get <span class="nb">install </span>coturn

<span class="c"># 配置文件 /etc/turnserver.conf</span>
listening-port<span class="o">=</span>3478
tls-listening-port<span class="o">=</span>5349
listening-ip<span class="o">=</span>0.0.0.0
external-ip<span class="o">=</span>YOUR_PUBLIC_IP
relay-ip<span class="o">=</span>YOUR_PRIVATE_IP

<span class="c"># 认证</span>
lt-cred-mech
<span class="nv">user</span><span class="o">=</span>username:password

<span class="c"># 数据库（可选）</span>
<span class="nv">userdb</span><span class="o">=</span>/var/lib/turn/turndb

<span class="c"># 安全设置</span>
no-cli
no-loopback-peers
no-multicast-peers

<span class="c"># 日志</span>
log-file<span class="o">=</span>/var/log/turnserver.log
verbose

<span class="c"># 启动服务</span>
<span class="nb">sudo </span>systemctl <span class="nb">enable </span>coturn
<span class="nb">sudo </span>systemctl start coturn
</code></pre></div></div>

<h3 id="docker部署turn服务器">Docker部署TURN服务器</h3>

<div class="language-dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Dockerfile for TURN server</span>
<span class="k">FROM</span><span class="s"> ubuntu:20.04</span>

<span class="k">RUN </span>apt-get update <span class="o">&amp;&amp;</span> apt-get <span class="nb">install</span> <span class="nt">-y</span> coturn

<span class="k">COPY</span><span class="s"> turnserver.conf /etc/turnserver.conf</span>

<span class="k">EXPOSE</span><span class="s"> 3478 3478/udp 5349 5349/tcp</span>

<span class="k">CMD</span><span class="s"> ["turnserver", "-c", "/etc/turnserver.conf"]</span>
</code></pre></div></div>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># docker-compose.yml</span>
<span class="na">version</span><span class="pi">:</span> <span class="s1">'</span><span class="s">3.8'</span>
<span class="na">services</span><span class="pi">:</span>
  <span class="na">turn-server</span><span class="pi">:</span>
    <span class="na">build</span><span class="pi">:</span> <span class="s">.</span>
    <span class="na">ports</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">3478:3478/udp"</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">3478:3478/tcp"</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">5349:5349/tcp"</span>
    <span class="na">environment</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">TURN_USERNAME=your-username</span>
      <span class="pi">-</span> <span class="s">TURN_PASSWORD=your-password</span>
    <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">./logs:/var/log</span>
</code></pre></div></div>

<h2 id="性能优化与监控">性能优化与监控</h2>

<h3 id="1-连接质量监控">1. 连接质量监控</h3>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nx">ConnectionMonitor</span> <span class="p">{</span>
  <span class="kd">constructor</span><span class="p">(</span><span class="nx">peerConnection</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">peerConnection</span> <span class="o">=</span> <span class="nx">peerConnection</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">stats</span> <span class="o">=</span> <span class="p">{</span>
      <span class="na">audio</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">packetsLost</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
        <span class="na">packetsReceived</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
        <span class="na">bytesReceived</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
        <span class="na">jitter</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
        <span class="na">rtt</span><span class="p">:</span> <span class="mi">0</span>
      <span class="p">}</span>
    <span class="p">};</span>
    
    <span class="k">this</span><span class="p">.</span><span class="nx">startMonitoring</span><span class="p">();</span>
  <span class="p">}</span>
  
  <span class="nx">startMonitoring</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">setInterval</span><span class="p">(</span><span class="k">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="k">await</span> <span class="k">this</span><span class="p">.</span><span class="nx">updateStats</span><span class="p">();</span>
    <span class="p">},</span> <span class="mi">1000</span><span class="p">);</span>
  <span class="p">}</span>
  
  <span class="k">async</span> <span class="nx">updateStats</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">peerConnection</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>
    
    <span class="kd">const</span> <span class="nx">stats</span> <span class="o">=</span> <span class="k">await</span> <span class="k">this</span><span class="p">.</span><span class="nx">peerConnection</span><span class="p">.</span><span class="nx">getStats</span><span class="p">();</span>
    
    <span class="nx">stats</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">report</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">report</span><span class="p">.</span><span class="nx">type</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">inbound-rtp</span><span class="dl">'</span> <span class="o">&amp;&amp;</span> <span class="nx">report</span><span class="p">.</span><span class="nx">mediaType</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">audio</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">stats</span><span class="p">.</span><span class="nx">audio</span><span class="p">.</span><span class="nx">packetsLost</span> <span class="o">=</span> <span class="nx">report</span><span class="p">.</span><span class="nx">packetsLost</span> <span class="o">||</span> <span class="mi">0</span><span class="p">;</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">stats</span><span class="p">.</span><span class="nx">audio</span><span class="p">.</span><span class="nx">packetsReceived</span> <span class="o">=</span> <span class="nx">report</span><span class="p">.</span><span class="nx">packetsReceived</span> <span class="o">||</span> <span class="mi">0</span><span class="p">;</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">stats</span><span class="p">.</span><span class="nx">audio</span><span class="p">.</span><span class="nx">bytesReceived</span> <span class="o">=</span> <span class="nx">report</span><span class="p">.</span><span class="nx">bytesReceived</span> <span class="o">||</span> <span class="mi">0</span><span class="p">;</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">stats</span><span class="p">.</span><span class="nx">audio</span><span class="p">.</span><span class="nx">jitter</span> <span class="o">=</span> <span class="nx">report</span><span class="p">.</span><span class="nx">jitter</span> <span class="o">||</span> <span class="mi">0</span><span class="p">;</span>
      <span class="p">}</span>
      
      <span class="k">if</span> <span class="p">(</span><span class="nx">report</span><span class="p">.</span><span class="nx">type</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">candidate-pair</span><span class="dl">'</span> <span class="o">&amp;&amp;</span> <span class="nx">report</span><span class="p">.</span><span class="nx">state</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">succeeded</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">stats</span><span class="p">.</span><span class="nx">audio</span><span class="p">.</span><span class="nx">rtt</span> <span class="o">=</span> <span class="nx">report</span><span class="p">.</span><span class="nx">currentRoundTripTime</span> <span class="o">||</span> <span class="mi">0</span><span class="p">;</span>
      <span class="p">}</span>
    <span class="p">});</span>
    
    <span class="c1">// 触发统计更新事件</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">onStatsUpdate</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">stats</span><span class="p">);</span>
  <span class="p">}</span>
  
  <span class="nx">onStatsUpdate</span><span class="p">(</span><span class="nx">stats</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// 可以在这里更新UI或发送监控数据</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">连接统计:</span><span class="dl">'</span><span class="p">,</span> <span class="nx">stats</span><span class="p">);</span>
    
    <span class="c1">// 检查连接质量</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">checkConnectionQuality</span><span class="p">(</span><span class="nx">stats</span><span class="p">);</span>
  <span class="p">}</span>
  
  <span class="nx">checkConnectionQuality</span><span class="p">(</span><span class="nx">stats</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="p">{</span> <span class="nx">packetsLost</span><span class="p">,</span> <span class="nx">packetsReceived</span><span class="p">,</span> <span class="nx">rtt</span><span class="p">,</span> <span class="nx">jitter</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">stats</span><span class="p">.</span><span class="nx">audio</span><span class="p">;</span>
    
    <span class="c1">// 计算丢包率</span>
    <span class="kd">const</span> <span class="nx">lossRate</span> <span class="o">=</span> <span class="nx">packetsLost</span> <span class="o">/</span> <span class="p">(</span><span class="nx">packetsLost</span> <span class="o">+</span> <span class="nx">packetsReceived</span><span class="p">);</span>
    
    <span class="kd">let</span> <span class="nx">quality</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">excellent</span><span class="dl">'</span><span class="p">;</span>
    
    <span class="k">if</span> <span class="p">(</span><span class="nx">lossRate</span> <span class="o">&gt;</span> <span class="mf">0.05</span> <span class="o">||</span> <span class="nx">rtt</span> <span class="o">&gt;</span> <span class="mi">200</span> <span class="o">||</span> <span class="nx">jitter</span> <span class="o">&gt;</span> <span class="mi">50</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">quality</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">poor</span><span class="dl">'</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">lossRate</span> <span class="o">&gt;</span> <span class="mf">0.02</span> <span class="o">||</span> <span class="nx">rtt</span> <span class="o">&gt;</span> <span class="mi">100</span> <span class="o">||</span> <span class="nx">jitter</span> <span class="o">&gt;</span> <span class="mi">30</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">quality</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">fair</span><span class="dl">'</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">lossRate</span> <span class="o">&gt;</span> <span class="mf">0.01</span> <span class="o">||</span> <span class="nx">rtt</span> <span class="o">&gt;</span> <span class="mi">50</span> <span class="o">||</span> <span class="nx">jitter</span> <span class="o">&gt;</span> <span class="mi">20</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">quality</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">good</span><span class="dl">'</span><span class="p">;</span>
    <span class="p">}</span>
    
    <span class="c1">// 触发质量变化事件</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">onQualityChange</span><span class="p">(</span><span class="nx">quality</span><span class="p">,</span> <span class="nx">stats</span><span class="p">);</span>
  <span class="p">}</span>
  
  <span class="nx">onQualityChange</span><span class="p">(</span><span class="nx">quality</span><span class="p">,</span> <span class="nx">stats</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`连接质量: </span><span class="p">${</span><span class="nx">quality</span><span class="p">}</span><span class="s2">`</span><span class="p">,</span> <span class="nx">stats</span><span class="p">);</span>
    
    <span class="c1">// 根据质量调整音频参数</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">quality</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">poor</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">adjustAudioQuality</span><span class="p">(</span><span class="dl">'</span><span class="s1">low</span><span class="dl">'</span><span class="p">);</span>
    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">quality</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">excellent</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">adjustAudioQuality</span><span class="p">(</span><span class="dl">'</span><span class="s1">high</span><span class="dl">'</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span>
  
  <span class="nx">adjustAudioQuality</span><span class="p">(</span><span class="nx">level</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// 动态调整音频编码参数</span>
    <span class="kd">const</span> <span class="nx">sender</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">peerConnection</span><span class="p">.</span><span class="nx">getSenders</span><span class="p">().</span><span class="nx">find</span><span class="p">(</span><span class="nx">s</span> <span class="o">=&gt;</span> 
      <span class="nx">s</span><span class="p">.</span><span class="nx">track</span> <span class="o">&amp;&amp;</span> <span class="nx">s</span><span class="p">.</span><span class="nx">track</span><span class="p">.</span><span class="nx">kind</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">audio</span><span class="dl">'</span>
    <span class="p">);</span>
    
    <span class="k">if</span> <span class="p">(</span><span class="nx">sender</span><span class="p">)</span> <span class="p">{</span>
      <span class="kd">const</span> <span class="nx">params</span> <span class="o">=</span> <span class="nx">sender</span><span class="p">.</span><span class="nx">getParameters</span><span class="p">();</span>
      
      <span class="k">if</span> <span class="p">(</span><span class="nx">level</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">low</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// 降低比特率</span>
        <span class="nx">params</span><span class="p">.</span><span class="nx">encodings</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">encoding</span> <span class="o">=&gt;</span> <span class="p">{</span>
          <span class="nx">encoding</span><span class="p">.</span><span class="nx">maxBitrate</span> <span class="o">=</span> <span class="mi">32000</span><span class="p">;</span> <span class="c1">// 32kbps</span>
        <span class="p">});</span>
      <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">level</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">high</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// 提高比特率</span>
        <span class="nx">params</span><span class="p">.</span><span class="nx">encodings</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">encoding</span> <span class="o">=&gt;</span> <span class="p">{</span>
          <span class="nx">encoding</span><span class="p">.</span><span class="nx">maxBitrate</span> <span class="o">=</span> <span class="mi">128000</span><span class="p">;</span> <span class="c1">// 128kbps</span>
        <span class="p">});</span>
      <span class="p">}</span>
      
      <span class="nx">sender</span><span class="p">.</span><span class="nx">setParameters</span><span class="p">(</span><span class="nx">params</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="2-自适应音频处理">2. 自适应音频处理</h3>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nx">AdaptiveAudioProcessor</span> <span class="p">{</span>
  <span class="kd">constructor</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">currentProfile</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">balanced</span><span class="dl">'</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">profiles</span> <span class="o">=</span> <span class="p">{</span>
      <span class="dl">'</span><span class="s1">low-latency</span><span class="dl">'</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">bufferSize</span><span class="p">:</span> <span class="mi">256</span><span class="p">,</span>
        <span class="na">sampleRate</span><span class="p">:</span> <span class="mi">16000</span><span class="p">,</span>
        <span class="na">echoCancellation</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
        <span class="na">noiseSuppression</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
        <span class="na">autoGainControl</span><span class="p">:</span> <span class="kc">false</span>
      <span class="p">},</span>
      <span class="dl">'</span><span class="s1">balanced</span><span class="dl">'</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">bufferSize</span><span class="p">:</span> <span class="mi">1024</span><span class="p">,</span>
        <span class="na">sampleRate</span><span class="p">:</span> <span class="mi">48000</span><span class="p">,</span>
        <span class="na">echoCancellation</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
        <span class="na">noiseSuppression</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
        <span class="na">autoGainControl</span><span class="p">:</span> <span class="kc">true</span>
      <span class="p">},</span>
      <span class="dl">'</span><span class="s1">high-quality</span><span class="dl">'</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">bufferSize</span><span class="p">:</span> <span class="mi">4096</span><span class="p">,</span>
        <span class="na">sampleRate</span><span class="p">:</span> <span class="mi">48000</span><span class="p">,</span>
        <span class="na">echoCancellation</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
        <span class="na">noiseSuppression</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
        <span class="na">autoGainControl</span><span class="p">:</span> <span class="kc">true</span>
      <span class="p">}</span>
    <span class="p">};</span>
  <span class="p">}</span>
  
  <span class="k">async</span> <span class="nx">switchProfile</span><span class="p">(</span><span class="nx">profileName</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">profiles</span><span class="p">[</span><span class="nx">profileName</span><span class="p">])</span> <span class="p">{</span>
      <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">`未知的音频配置: </span><span class="p">${</span><span class="nx">profileName</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
    <span class="p">}</span>
    
    <span class="k">this</span><span class="p">.</span><span class="nx">currentProfile</span> <span class="o">=</span> <span class="nx">profileName</span><span class="p">;</span>
    <span class="kd">const</span> <span class="nx">profile</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">profiles</span><span class="p">[</span><span class="nx">profileName</span><span class="p">];</span>
    
    <span class="c1">// 重新获取媒体流</span>
    <span class="kd">const</span> <span class="nx">stream</span> <span class="o">=</span> <span class="k">await</span> <span class="nb">navigator</span><span class="p">.</span><span class="nx">mediaDevices</span><span class="p">.</span><span class="nx">getUserMedia</span><span class="p">({</span>
      <span class="na">audio</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">sampleRate</span><span class="p">:</span> <span class="nx">profile</span><span class="p">.</span><span class="nx">sampleRate</span><span class="p">,</span>
        <span class="na">echoCancellation</span><span class="p">:</span> <span class="nx">profile</span><span class="p">.</span><span class="nx">echoCancellation</span><span class="p">,</span>
        <span class="na">noiseSuppression</span><span class="p">:</span> <span class="nx">profile</span><span class="p">.</span><span class="nx">noiseSuppression</span><span class="p">,</span>
        <span class="na">autoGainControl</span><span class="p">:</span> <span class="nx">profile</span><span class="p">.</span><span class="nx">autoGainControl</span>
      <span class="p">}</span>
    <span class="p">});</span>
    
    <span class="k">return</span> <span class="nx">stream</span><span class="p">;</span>
  <span class="p">}</span>
  
  <span class="nx">getRecommendedProfile</span><span class="p">(</span><span class="nx">networkCondition</span><span class="p">,</span> <span class="nx">deviceCapability</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">networkCondition</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">poor</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span> <span class="dl">'</span><span class="s1">low-latency</span><span class="dl">'</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">deviceCapability</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">high</span><span class="dl">'</span> <span class="o">&amp;&amp;</span> <span class="nx">networkCondition</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">excellent</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span> <span class="dl">'</span><span class="s1">high-quality</span><span class="dl">'</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="k">return</span> <span class="dl">'</span><span class="s1">balanced</span><span class="dl">'</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="部署与devops">部署与DevOps</h2>

<h3 id="docker化部署">Docker化部署</h3>

<div class="language-dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 前端Dockerfile</span>
<span class="k">FROM</span><span class="s"> node:16-alpine</span>

<span class="k">WORKDIR</span><span class="s"> /app</span>

<span class="k">COPY</span><span class="s"> package*.json ./</span>
<span class="k">RUN </span>npm ci <span class="nt">--only</span><span class="o">=</span>production

<span class="k">COPY</span><span class="s"> . .</span>
<span class="k">RUN </span>npm run build

<span class="k">FROM</span><span class="s"> nginx:alpine</span>
<span class="k">COPY</span><span class="s"> --from=0 /app/build /usr/share/nginx/html</span>
<span class="k">COPY</span><span class="s"> nginx.conf /etc/nginx/nginx.conf</span>

<span class="k">EXPOSE</span><span class="s"> 80</span>
<span class="k">CMD</span><span class="s"> ["nginx", "-g", "daemon off;"]</span>
</code></pre></div></div>

<div class="language-dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 后端Dockerfile</span>
<span class="k">FROM</span><span class="s"> node:16-alpine</span>

<span class="k">WORKDIR</span><span class="s"> /app</span>

<span class="k">COPY</span><span class="s"> package*.json ./</span>
<span class="k">RUN </span>npm ci <span class="nt">--only</span><span class="o">=</span>production

<span class="k">COPY</span><span class="s"> . .</span>

<span class="k">EXPOSE</span><span class="s"> 3000</span>
<span class="k">CMD</span><span class="s"> ["node", "server.js"]</span>
</code></pre></div></div>

<h3 id="kubernetes部署">Kubernetes部署</h3>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># k8s-deployment.yaml</span>
<span class="na">apiVersion</span><span class="pi">:</span> <span class="s">apps/v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Deployment</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">webrtc-signaling</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">replicas</span><span class="pi">:</span> <span class="m">3</span>
  <span class="na">selector</span><span class="pi">:</span>
    <span class="na">matchLabels</span><span class="pi">:</span>
      <span class="na">app</span><span class="pi">:</span> <span class="s">webrtc-signaling</span>
  <span class="na">template</span><span class="pi">:</span>
    <span class="na">metadata</span><span class="pi">:</span>
      <span class="na">labels</span><span class="pi">:</span>
        <span class="na">app</span><span class="pi">:</span> <span class="s">webrtc-signaling</span>
    <span class="na">spec</span><span class="pi">:</span>
      <span class="na">containers</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">signaling-server</span>
        <span class="na">image</span><span class="pi">:</span> <span class="s">your-registry/webrtc-signaling:latest</span>
        <span class="na">ports</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="na">containerPort</span><span class="pi">:</span> <span class="m">3000</span>
        <span class="na">env</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">REDIS_URL</span>
          <span class="na">value</span><span class="pi">:</span> <span class="s2">"</span><span class="s">redis://redis-service:6379"</span>
        <span class="na">resources</span><span class="pi">:</span>
          <span class="na">requests</span><span class="pi">:</span>
            <span class="na">memory</span><span class="pi">:</span> <span class="s2">"</span><span class="s">256Mi"</span>
            <span class="na">cpu</span><span class="pi">:</span> <span class="s2">"</span><span class="s">250m"</span>
          <span class="na">limits</span><span class="pi">:</span>
            <span class="na">memory</span><span class="pi">:</span> <span class="s2">"</span><span class="s">512Mi"</span>
            <span class="na">cpu</span><span class="pi">:</span> <span class="s2">"</span><span class="s">500m"</span>
<span class="nn">---</span>
<span class="na">apiVersion</span><span class="pi">:</span> <span class="s">v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Service</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">webrtc-signaling-service</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">selector</span><span class="pi">:</span>
    <span class="na">app</span><span class="pi">:</span> <span class="s">webrtc-signaling</span>
  <span class="na">ports</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">protocol</span><span class="pi">:</span> <span class="s">TCP</span>
    <span class="na">port</span><span class="pi">:</span> <span class="m">80</span>
    <span class="na">targetPort</span><span class="pi">:</span> <span class="m">3000</span>
  <span class="na">type</span><span class="pi">:</span> <span class="s">LoadBalancer</span>
</code></pre></div></div>

<h2 id="故障排除指南">故障排除指南</h2>

<h3 id="常见问题与解决方案">常见问题与解决方案</h3>

<h4 id="q-无法建立p2p连接">Q: 无法建立P2P连接？</h4>

<p>A: 检查以下项目：</p>

<ol>
  <li><strong>STUN/TURN服务器配置</strong>
    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 确保TURN服务器配置正确</span>
<span class="kd">const</span> <span class="nx">configuration</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">iceServers</span><span class="p">:</span> <span class="p">[</span>
 <span class="p">{</span> <span class="na">urls</span><span class="p">:</span> <span class="dl">'</span><span class="s1">stun:stun.l.google.com:19302</span><span class="dl">'</span> <span class="p">},</span>
 <span class="p">{</span>
   <span class="na">urls</span><span class="p">:</span> <span class="dl">'</span><span class="s1">turn:your-turn-server.com:3478</span><span class="dl">'</span><span class="p">,</span>
   <span class="na">username</span><span class="p">:</span> <span class="dl">'</span><span class="s1">your-username</span><span class="dl">'</span><span class="p">,</span>
   <span class="na">credential</span><span class="p">:</span> <span class="dl">'</span><span class="s1">your-password</span><span class="dl">'</span>
 <span class="p">}</span>
  <span class="p">]</span>
<span class="p">};</span>
</code></pre></div>    </div>
  </li>
  <li><strong>防火墙设置</strong>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 开放必要端口</span>
<span class="nb">sudo </span>ufw allow 3478/udp
<span class="nb">sudo </span>ufw allow 5349/tcp
<span class="nb">sudo </span>ufw allow 49152:65535/udp  <span class="c"># RTP端口范围</span>
</code></pre></div>    </div>
  </li>
</ol>

<h4 id="q-音频质量差或有回音">Q: 音频质量差或有回音？</h4>

<p>A: 音频优化策略：</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 启用音频处理</span>
<span class="kd">const</span> <span class="nx">audioConstraints</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">echoCancellation</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
  <span class="na">noiseSuppression</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
  <span class="na">autoGainControl</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
  <span class="na">sampleRate</span><span class="p">:</span> <span class="mi">48000</span>
<span class="p">};</span>

<span class="c1">// 避免回音</span>
<span class="nx">localAudio</span><span class="p">.</span><span class="nx">muted</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</code></pre></div></div>

<h4 id="q-连接经常断开">Q: 连接经常断开？</h4>

<p>A: 实现重连机制：</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nx">ReconnectionManager</span> <span class="p">{</span>
  <span class="kd">constructor</span><span class="p">(</span><span class="nx">webrtcCall</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">webrtcCall</span> <span class="o">=</span> <span class="nx">webrtcCall</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">maxRetries</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">retryDelay</span> <span class="o">=</span> <span class="mi">1000</span><span class="p">;</span>
  <span class="p">}</span>
  
  <span class="k">async</span> <span class="nx">handleDisconnection</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nx">retries</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    
    <span class="k">while</span> <span class="p">(</span><span class="nx">retries</span> <span class="o">&lt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">maxRetries</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">try</span> <span class="p">{</span>
        <span class="k">await</span> <span class="k">this</span><span class="p">.</span><span class="nx">delay</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">retryDelay</span> <span class="o">*</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">pow</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="nx">retries</span><span class="p">));</span>
        <span class="k">await</span> <span class="k">this</span><span class="p">.</span><span class="nx">webrtcCall</span><span class="p">.</span><span class="nx">reconnect</span><span class="p">();</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">重连成功</span><span class="dl">'</span><span class="p">);</span>
        <span class="k">break</span><span class="p">;</span>
      <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">retries</span><span class="o">++</span><span class="p">;</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`重连失败，重试次数: </span><span class="p">${</span><span class="nx">retries</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>
  
  <span class="nx">delay</span><span class="p">(</span><span class="nx">ms</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nb">Promise</span><span class="p">(</span><span class="nx">resolve</span> <span class="o">=&gt;</span> <span class="nx">setTimeout</span><span class="p">(</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">ms</span><span class="p">));</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="总结">总结</h2>

<p>本文全面介绍了WebRTC实时语音通信的开发过程，包括：</p>

<ul>
  <li><strong>WebRTC基础</strong>：核心概念和通信流程</li>
  <li><strong>前端实现</strong>：完整的WebRTC客户端代码</li>
  <li><strong>后端服务</strong>：信令服务器和房间管理</li>
  <li><strong>音频处理</strong>：高级音频处理和优化</li>
  <li><strong>部署运维</strong>：Docker化和Kubernetes部署</li>
  <li><strong>监控调优</strong>：性能监控和自适应优化</li>
</ul>

<p>通过这套完整的解决方案，你可以构建出高质量、稳定可靠的WebRTC语音通话应用。随着5G和边缘计算的发展，WebRTC技术将在更多场景中发挥重要作用。</p>

<hr />

<p><em>如果你觉得这篇文章对你有帮助，欢迎分享给更多对WebRTC技术感兴趣的朋友！</em></p>]]></content><author><name>Chico Gong</name><email>chicogong@tencent.com</email></author><category term="WebRTC" /><category term="实时通信" /><category term="WebRTC" /><category term="语音通话" /><category term="P2P" /><category term="实时通信" /><category term="JavaScript" /><summary type="html"><![CDATA[深入学习WebRTC技术，从基础概念到实际应用，构建高质量的实时语音通话系统。涵盖信令服务器、NAT穿透、音频处理等核心技术。]]></summary></entry><entry><title type="html">React Hooks 最佳实践：从入门到精通</title><link href="http://0.0.0.0:4000/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/react/react-hooks-best-practices/" rel="alternate" type="text/html" title="React Hooks 最佳实践：从入门到精通" /><published>2024-01-10T09:00:00+08:00</published><updated>2024-01-10T09:00:00+08:00</updated><id>http://0.0.0.0:4000/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/react/react-hooks-best-practices</id><content type="html" xml:base="http://0.0.0.0:4000/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/react/react-hooks-best-practices/"><![CDATA[<p>React Hooks自2018年推出以来，已经彻底改变了我们编写React组件的方式。今天我将分享一些在实际项目中总结的Hooks最佳实践。</p>

<h2 id="为什么使用hooks">为什么使用Hooks？</h2>

<p>Hooks让我们能够在函数组件中使用状态和其他React特性，相比类组件有以下优势：</p>

<ul>
  <li><strong>更简洁的代码</strong>：避免了class的复杂语法</li>
  <li><strong>更好的逻辑复用</strong>：通过自定义Hooks</li>
  <li><strong>更容易测试</strong>：函数组件更容易进行单元测试</li>
  <li><strong>更好的性能优化</strong>：结合useMemo和useCallback</li>
</ul>

<h2 id="核心hooks使用技巧">核心Hooks使用技巧</h2>

<h3 id="1-usestate的优化使用">1. useState的优化使用</h3>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// ❌ 避免：频繁的状态更新</span>
<span class="kd">const</span> <span class="p">[</span><span class="nx">count</span><span class="p">,</span> <span class="nx">setCount</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
<span class="kd">const</span> <span class="p">[</span><span class="nx">loading</span><span class="p">,</span> <span class="nx">setLoading</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span>
<span class="kd">const</span> <span class="p">[</span><span class="nx">error</span><span class="p">,</span> <span class="nx">setError</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="kc">null</span><span class="p">);</span>

<span class="c1">// ✅ 推荐：使用useReducer管理复杂状态</span>
<span class="kd">const</span> <span class="nx">initialState</span> <span class="o">=</span> <span class="p">{</span> <span class="na">count</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="na">loading</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span> <span class="na">error</span><span class="p">:</span> <span class="kc">null</span> <span class="p">};</span>

<span class="kd">function</span> <span class="nx">reducer</span><span class="p">(</span><span class="nx">state</span><span class="p">,</span> <span class="nx">action</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">switch</span> <span class="p">(</span><span class="nx">action</span><span class="p">.</span><span class="nx">type</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">case</span> <span class="dl">'</span><span class="s1">increment</span><span class="dl">'</span><span class="p">:</span>
      <span class="k">return</span> <span class="p">{</span> <span class="p">...</span><span class="nx">state</span><span class="p">,</span> <span class="na">count</span><span class="p">:</span> <span class="nx">state</span><span class="p">.</span><span class="nx">count</span> <span class="o">+</span> <span class="mi">1</span> <span class="p">};</span>
    <span class="k">case</span> <span class="dl">'</span><span class="s1">set_loading</span><span class="dl">'</span><span class="p">:</span>
      <span class="k">return</span> <span class="p">{</span> <span class="p">...</span><span class="nx">state</span><span class="p">,</span> <span class="na">loading</span><span class="p">:</span> <span class="nx">action</span><span class="p">.</span><span class="nx">payload</span> <span class="p">};</span>
    <span class="nl">default</span><span class="p">:</span>
      <span class="k">return</span> <span class="nx">state</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="p">[</span><span class="nx">state</span><span class="p">,</span> <span class="nx">dispatch</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useReducer</span><span class="p">(</span><span class="nx">reducer</span><span class="p">,</span> <span class="nx">initialState</span><span class="p">);</span>
</code></pre></div></div>

<h3 id="2-useeffect的正确使用">2. useEffect的正确使用</h3>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// ✅ 正确的依赖数组</span>
<span class="nx">useEffect</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">fetchUserData</span><span class="p">(</span><span class="nx">userId</span><span class="p">);</span>
<span class="p">},</span> <span class="p">[</span><span class="nx">userId</span><span class="p">]);</span> <span class="c1">// 只有userId变化时才重新执行</span>

<span class="c1">// ✅ 清理副作用</span>
<span class="nx">useEffect</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">timer</span> <span class="o">=</span> <span class="nx">setInterval</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Timer tick</span><span class="dl">'</span><span class="p">);</span>
  <span class="p">},</span> <span class="mi">1000</span><span class="p">);</span>

  <span class="k">return</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">clearInterval</span><span class="p">(</span><span class="nx">timer</span><span class="p">);</span> <span class="c1">// 清理定时器</span>
<span class="p">},</span> <span class="p">[]);</span>
</code></pre></div></div>

<h2 id="自定义hooks实战">自定义Hooks实战</h2>

<h3 id="实用的数据获取hook">实用的数据获取Hook</h3>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">useApi</span><span class="p">(</span><span class="nx">url</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="p">[</span><span class="nx">data</span><span class="p">,</span> <span class="nx">setData</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="kc">null</span><span class="p">);</span>
  <span class="kd">const</span> <span class="p">[</span><span class="nx">loading</span><span class="p">,</span> <span class="nx">setLoading</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span>
  <span class="kd">const</span> <span class="p">[</span><span class="nx">error</span><span class="p">,</span> <span class="nx">setError</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="kc">null</span><span class="p">);</span>

  <span class="nx">useEffect</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">fetchData</span> <span class="o">=</span> <span class="k">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="k">try</span> <span class="p">{</span>
        <span class="nx">setLoading</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span>
        <span class="kd">const</span> <span class="nx">response</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">fetch</span><span class="p">(</span><span class="nx">url</span><span class="p">);</span>
        <span class="kd">const</span> <span class="nx">result</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">response</span><span class="p">.</span><span class="nx">json</span><span class="p">();</span>
        <span class="nx">setData</span><span class="p">(</span><span class="nx">result</span><span class="p">);</span>
      <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">setError</span><span class="p">(</span><span class="nx">err</span><span class="p">.</span><span class="nx">message</span><span class="p">);</span>
      <span class="p">}</span> <span class="k">finally</span> <span class="p">{</span>
        <span class="nx">setLoading</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span>
      <span class="p">}</span>
    <span class="p">};</span>

    <span class="nx">fetchData</span><span class="p">();</span>
  <span class="p">},</span> <span class="p">[</span><span class="nx">url</span><span class="p">]);</span>

  <span class="k">return</span> <span class="p">{</span> <span class="nx">data</span><span class="p">,</span> <span class="nx">loading</span><span class="p">,</span> <span class="nx">error</span> <span class="p">};</span>
<span class="p">}</span>

<span class="c1">// 使用方式</span>
<span class="kd">function</span> <span class="nx">UserProfile</span><span class="p">({</span> <span class="nx">userId</span> <span class="p">})</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="p">{</span> <span class="na">data</span><span class="p">:</span> <span class="nx">user</span><span class="p">,</span> <span class="nx">loading</span><span class="p">,</span> <span class="nx">error</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">useApi</span><span class="p">(</span><span class="s2">`/api/users/</span><span class="p">${</span><span class="nx">userId</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>

  <span class="k">if</span> <span class="p">(</span><span class="nx">loading</span><span class="p">)</span> <span class="k">return</span> <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span><span class="nx">Loading</span><span class="p">...</span><span class="o">&lt;</span><span class="sr">/div&gt;</span><span class="err">;
</span>  <span class="k">if</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="k">return</span> <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span><span class="nb">Error</span><span class="p">:</span> <span class="p">{</span><span class="nx">error</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/div&gt;</span><span class="err">;
</span>  
  <span class="k">return</span> <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span><span class="nx">Hello</span><span class="p">,</span> <span class="p">{</span><span class="nx">user</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="o">!&lt;</span><span class="sr">/div&gt;</span><span class="err">;
</span><span class="p">}</span>
</code></pre></div></div>

<h2 id="性能优化技巧">性能优化技巧</h2>

<h3 id="1-使用usememo避免重复计算">1. 使用useMemo避免重复计算</h3>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">ExpensiveComponent</span><span class="p">({</span> <span class="nx">items</span><span class="p">,</span> <span class="nx">filter</span> <span class="p">})</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">filteredItems</span> <span class="o">=</span> <span class="nx">useMemo</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">items</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="nx">item</span> <span class="o">=&gt;</span> <span class="nx">item</span><span class="p">.</span><span class="nx">category</span> <span class="o">===</span> <span class="nx">filter</span><span class="p">);</span>
  <span class="p">},</span> <span class="p">[</span><span class="nx">items</span><span class="p">,</span> <span class="nx">filter</span><span class="p">]);</span>

  <span class="k">return</span> <span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">ul</span><span class="o">&gt;</span>
      <span class="p">{</span><span class="nx">filteredItems</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">item</span> <span class="o">=&gt;</span> <span class="p">(</span>
        <span class="o">&lt;</span><span class="nx">li</span> <span class="nx">key</span><span class="o">=</span><span class="p">{</span><span class="nx">item</span><span class="p">.</span><span class="nx">id</span><span class="p">}</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">item</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/li</span><span class="err">&gt;
</span>      <span class="p">))}</span>
    <span class="o">&lt;</span><span class="sr">/ul</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="2-使用usecallback优化函数引用">2. 使用useCallback优化函数引用</h3>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">TodoList</span><span class="p">({</span> <span class="nx">todos</span><span class="p">,</span> <span class="nx">onToggle</span> <span class="p">})</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">handleToggle</span> <span class="o">=</span> <span class="nx">useCallback</span><span class="p">((</span><span class="nx">id</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">onToggle</span><span class="p">(</span><span class="nx">id</span><span class="p">);</span>
  <span class="p">},</span> <span class="p">[</span><span class="nx">onToggle</span><span class="p">]);</span>

  <span class="k">return</span> <span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
      <span class="p">{</span><span class="nx">todos</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">todo</span> <span class="o">=&gt;</span> <span class="p">(</span>
        <span class="o">&lt;</span><span class="nx">TodoItem</span> 
          <span class="nx">key</span><span class="o">=</span><span class="p">{</span><span class="nx">todo</span><span class="p">.</span><span class="nx">id</span><span class="p">}</span> 
          <span class="nx">todo</span><span class="o">=</span><span class="p">{</span><span class="nx">todo</span><span class="p">}</span> 
          <span class="nx">onToggle</span><span class="o">=</span><span class="p">{</span><span class="nx">handleToggle</span><span class="p">}</span> 
        <span class="sr">/</span><span class="err">&gt;
</span>      <span class="p">))}</span>
    <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="常见陷阱与解决方案">常见陷阱与解决方案</h2>

<h3 id="1-闭包陷阱">1. 闭包陷阱</h3>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// ❌ 问题：获取到的总是初始值</span>
<span class="kd">function</span> <span class="nx">Counter</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="p">[</span><span class="nx">count</span><span class="p">,</span> <span class="nx">setCount</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>

  <span class="nx">useEffect</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">timer</span> <span class="o">=</span> <span class="nx">setInterval</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nx">setCount</span><span class="p">(</span><span class="nx">count</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span> <span class="c1">// 总是 0 + 1</span>
    <span class="p">},</span> <span class="mi">1000</span><span class="p">);</span>

    <span class="k">return</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">clearInterval</span><span class="p">(</span><span class="nx">timer</span><span class="p">);</span>
  <span class="p">},</span> <span class="p">[]);</span>

  <span class="k">return</span> <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">count</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/div&gt;</span><span class="err">;
</span><span class="p">}</span>

<span class="c1">// ✅ 解决方案：使用函数式更新</span>
<span class="nx">useEffect</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">timer</span> <span class="o">=</span> <span class="nx">setInterval</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">setCount</span><span class="p">(</span><span class="nx">prevCount</span> <span class="o">=&gt;</span> <span class="nx">prevCount</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
  <span class="p">},</span> <span class="mi">1000</span><span class="p">);</span>

  <span class="k">return</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">clearInterval</span><span class="p">(</span><span class="nx">timer</span><span class="p">);</span>
<span class="p">},</span> <span class="p">[]);</span>
</code></pre></div></div>

<h3 id="2-无限循环问题">2. 无限循环问题</h3>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// ❌ 会导致无限循环</span>
<span class="nx">useEffect</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">setData</span><span class="p">(</span><span class="nx">processData</span><span class="p">(</span><span class="nx">data</span><span class="p">));</span>
<span class="p">},</span> <span class="p">[</span><span class="nx">data</span><span class="p">]);</span>

<span class="c1">// ✅ 正确的做法</span>
<span class="nx">useEffect</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">processedData</span> <span class="o">=</span> <span class="nx">processData</span><span class="p">(</span><span class="nx">initialData</span><span class="p">);</span>
  <span class="nx">setData</span><span class="p">(</span><span class="nx">processedData</span><span class="p">);</span>
<span class="p">},</span> <span class="p">[]);</span> <span class="c1">// 空依赖数组，只执行一次</span>
</code></pre></div></div>

<h2 id="测试hooks">测试Hooks</h2>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">renderHook</span><span class="p">,</span> <span class="nx">act</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@testing-library/react-hooks</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">useCounter</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./useCounter</span><span class="dl">'</span><span class="p">;</span>

<span class="nx">test</span><span class="p">(</span><span class="dl">'</span><span class="s1">should increment counter</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="p">{</span> <span class="nx">result</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">renderHook</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nx">useCounter</span><span class="p">());</span>

  <span class="nx">act</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">result</span><span class="p">.</span><span class="nx">current</span><span class="p">.</span><span class="nx">increment</span><span class="p">();</span>
  <span class="p">});</span>

  <span class="nx">expect</span><span class="p">(</span><span class="nx">result</span><span class="p">.</span><span class="nx">current</span><span class="p">.</span><span class="nx">count</span><span class="p">).</span><span class="nx">toBe</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></div></div>

<h2 id="总结">总结</h2>

<p>React Hooks为我们提供了强大的工具来构建现代化的React应用。关键是要：</p>

<ol>
  <li><strong>理解每个Hook的用途</strong>和最佳使用场景</li>
  <li><strong>正确管理依赖数组</strong>，避免不必要的重渲染</li>
  <li><strong>合理使用自定义Hooks</strong>来复用逻辑</li>
  <li><strong>注意性能优化</strong>，但不要过度优化</li>
  <li><strong>编写测试</strong>来确保Hooks的正确性</li>
</ol>

<p>掌握这些最佳实践，将帮助你编写更高质量、更可维护的React代码！</p>

<hr />

<p><em>你在使用React Hooks时遇到过哪些问题？欢迎在评论区分享你的经验！</em></p>]]></content><author><name>Chico Gong</name><email>chicogong@tencent.com</email></author><category term="前端开发" /><category term="React" /><category term="React" /><category term="Hooks" /><category term="JavaScript" /><category term="最佳实践" /><summary type="html"><![CDATA[React Hooks自2018年推出以来，已经彻底改变了我们编写React组件的方式。今天我将分享一些在实际项目中总结的Hooks最佳实践。]]></summary></entry><entry><title type="html">Node.js微服务架构实战：从单体到分布式的演进之路</title><link href="http://0.0.0.0:4000/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/nodejs-microservices-architecture/" rel="alternate" type="text/html" title="Node.js微服务架构实战：从单体到分布式的演进之路" /><published>2024-01-08T14:30:00+08:00</published><updated>2024-01-08T14:30:00+08:00</updated><id>http://0.0.0.0:4000/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/nodejs-microservices-architecture</id><content type="html" xml:base="http://0.0.0.0:4000/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/nodejs-microservices-architecture/"><![CDATA[<p>随着业务的快速增长，传统的单体应用架构逐渐暴露出扩展性和维护性的问题。今天我将分享如何使用Node.js构建高效的微服务架构，以及在实际项目中的最佳实践。</p>

<h2 id="什么是微服务架构">什么是微服务架构？</h2>

<p>微服务架构是一种将单个应用程序拆分为一组小型、独立服务的架构模式。每个服务：</p>

<ul>
  <li><strong>独立部署</strong>：可以独立发布和更新</li>
  <li><strong>单一职责</strong>：专注于特定的业务功能</li>
  <li><strong>轻量级通信</strong>：通过HTTP API或消息队列通信</li>
  <li><strong>技术多样性</strong>：可以使用不同的技术栈</li>
</ul>

<h2 id="架构设计图">架构设计图</h2>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>┌─────────────────┐    ┌─────────────────┐
│   Web Client    │    │  Mobile Client  │
└─────────┬───────┘    └─────────┬───────┘
          │                      │
          └──────┬─────────────────┘
                 │
         ┌───────▼────────┐
         │  API Gateway   │
         └───────┬────────┘
                 │
    ┌────────────┼────────────┐
    │            │            │
┌───▼────┐  ┌───▼────┐  ┌───▼────┐
│ User   │  │ Order  │  │Payment │
│Service │  │Service │  │Service │
└────────┘  └────────┘  └────────┘
    │            │            │
┌───▼────┐  ┌───▼────┐  ┌───▼────┐
│  User  │  │ Order  │  │Payment│
│   DB   │  │   DB   │  │   DB  │
└────────┘  └────────┘  └────────┘
</code></pre></div></div>

<h2 id="核心组件实现">核心组件实现</h2>

<h3 id="1-api-gateway-实现">1. API Gateway 实现</h3>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// api-gateway/server.js</span>
<span class="kd">const</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">express</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">httpProxy</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">http-proxy-middleware</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">rateLimit</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">express-rate-limit</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">jwt</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">jsonwebtoken</span><span class="dl">'</span><span class="p">);</span>

<span class="kd">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">express</span><span class="p">();</span>

<span class="c1">// 限流中间件</span>
<span class="kd">const</span> <span class="nx">limiter</span> <span class="o">=</span> <span class="nx">rateLimit</span><span class="p">({</span>
  <span class="na">windowMs</span><span class="p">:</span> <span class="mi">15</span> <span class="o">*</span> <span class="mi">60</span> <span class="o">*</span> <span class="mi">1000</span><span class="p">,</span> <span class="c1">// 15分钟</span>
  <span class="na">max</span><span class="p">:</span> <span class="mi">100</span> <span class="c1">// 限制每个IP 15分钟内最多100个请求</span>
<span class="p">});</span>

<span class="c1">// JWT认证中间件</span>
<span class="kd">const</span> <span class="nx">authenticateToken</span> <span class="o">=</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">authHeader</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">headers</span><span class="p">[</span><span class="dl">'</span><span class="s1">authorization</span><span class="dl">'</span><span class="p">];</span>
  <span class="kd">const</span> <span class="nx">token</span> <span class="o">=</span> <span class="nx">authHeader</span> <span class="o">&amp;&amp;</span> <span class="nx">authHeader</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="dl">'</span><span class="s1"> </span><span class="dl">'</span><span class="p">)[</span><span class="mi">1</span><span class="p">];</span>

  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">token</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">res</span><span class="p">.</span><span class="nx">sendStatus</span><span class="p">(</span><span class="mi">401</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="nx">jwt</span><span class="p">.</span><span class="nx">verify</span><span class="p">(</span><span class="nx">token</span><span class="p">,</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">JWT_SECRET</span><span class="p">,</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">user</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="k">return</span> <span class="nx">res</span><span class="p">.</span><span class="nx">sendStatus</span><span class="p">(</span><span class="mi">403</span><span class="p">);</span>
    <span class="nx">req</span><span class="p">.</span><span class="nx">user</span> <span class="o">=</span> <span class="nx">user</span><span class="p">;</span>
    <span class="nx">next</span><span class="p">();</span>
  <span class="p">});</span>
<span class="p">};</span>

<span class="c1">// 服务路由配置</span>
<span class="kd">const</span> <span class="nx">services</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">user</span><span class="p">:</span> <span class="dl">'</span><span class="s1">http://user-service:3001</span><span class="dl">'</span><span class="p">,</span>
  <span class="na">order</span><span class="p">:</span> <span class="dl">'</span><span class="s1">http://order-service:3002</span><span class="dl">'</span><span class="p">,</span>
  <span class="na">payment</span><span class="p">:</span> <span class="dl">'</span><span class="s1">http://payment-service:3003</span><span class="dl">'</span>
<span class="p">};</span>

<span class="c1">// 路由代理</span>
<span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">services</span><span class="p">).</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">path</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="s2">`/api/</span><span class="p">${</span><span class="nx">path</span><span class="p">}</span><span class="s2">`</span><span class="p">,</span> 
    <span class="nx">limiter</span><span class="p">,</span>
    <span class="nx">authenticateToken</span><span class="p">,</span>
    <span class="nx">httpProxy</span><span class="p">({</span>
      <span class="na">target</span><span class="p">:</span> <span class="nx">services</span><span class="p">[</span><span class="nx">path</span><span class="p">],</span>
      <span class="na">changeOrigin</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
      <span class="na">pathRewrite</span><span class="p">:</span> <span class="p">{</span>
        <span class="p">[</span><span class="s2">`^/api/</span><span class="p">${</span><span class="nx">path</span><span class="p">}</span><span class="s2">`</span><span class="p">]:</span> <span class="dl">''</span>
      <span class="p">}</span>
    <span class="p">})</span>
  <span class="p">);</span>
<span class="p">});</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="mi">3000</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">API Gateway running on port 3000</span><span class="dl">'</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></div></div>

<h3 id="2-用户服务实现">2. 用户服务实现</h3>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// user-service/server.js</span>
<span class="kd">const</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">express</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">mongoose</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">mongoose</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">bcrypt</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">bcrypt</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">jwt</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">jsonwebtoken</span><span class="dl">'</span><span class="p">);</span>

<span class="kd">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">express</span><span class="p">();</span>
<span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="nx">json</span><span class="p">());</span>

<span class="c1">// 用户模型</span>
<span class="kd">const</span> <span class="nx">userSchema</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">mongoose</span><span class="p">.</span><span class="nx">Schema</span><span class="p">({</span>
  <span class="na">username</span><span class="p">:</span> <span class="p">{</span> <span class="na">type</span><span class="p">:</span> <span class="nb">String</span><span class="p">,</span> <span class="na">required</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="na">unique</span><span class="p">:</span> <span class="kc">true</span> <span class="p">},</span>
  <span class="na">email</span><span class="p">:</span> <span class="p">{</span> <span class="na">type</span><span class="p">:</span> <span class="nb">String</span><span class="p">,</span> <span class="na">required</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="na">unique</span><span class="p">:</span> <span class="kc">true</span> <span class="p">},</span>
  <span class="na">password</span><span class="p">:</span> <span class="p">{</span> <span class="na">type</span><span class="p">:</span> <span class="nb">String</span><span class="p">,</span> <span class="na">required</span><span class="p">:</span> <span class="kc">true</span> <span class="p">},</span>
  <span class="na">createdAt</span><span class="p">:</span> <span class="p">{</span> <span class="na">type</span><span class="p">:</span> <span class="nb">Date</span><span class="p">,</span> <span class="na">default</span><span class="p">:</span> <span class="nb">Date</span><span class="p">.</span><span class="nx">now</span> <span class="p">}</span>
<span class="p">});</span>

<span class="kd">const</span> <span class="nx">User</span> <span class="o">=</span> <span class="nx">mongoose</span><span class="p">.</span><span class="nx">model</span><span class="p">(</span><span class="dl">'</span><span class="s1">User</span><span class="dl">'</span><span class="p">,</span> <span class="nx">userSchema</span><span class="p">);</span>

<span class="c1">// 注册用户</span>
<span class="nx">app</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="dl">'</span><span class="s1">/register</span><span class="dl">'</span><span class="p">,</span> <span class="k">async</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">try</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="p">{</span> <span class="nx">username</span><span class="p">,</span> <span class="nx">email</span><span class="p">,</span> <span class="nx">password</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">;</span>
    
    <span class="c1">// 检查用户是否已存在</span>
    <span class="kd">const</span> <span class="nx">existingUser</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">User</span><span class="p">.</span><span class="nx">findOne</span><span class="p">({</span> 
      <span class="na">$or</span><span class="p">:</span> <span class="p">[{</span> <span class="nx">email</span> <span class="p">},</span> <span class="p">{</span> <span class="nx">username</span> <span class="p">}]</span> 
    <span class="p">});</span>
    
    <span class="k">if</span> <span class="p">(</span><span class="nx">existingUser</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span> <span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">400</span><span class="p">).</span><span class="nx">json</span><span class="p">({</span> <span class="na">error</span><span class="p">:</span> <span class="dl">'</span><span class="s1">用户已存在</span><span class="dl">'</span> <span class="p">});</span>
    <span class="p">}</span>

    <span class="c1">// 加密密码</span>
    <span class="kd">const</span> <span class="nx">hashedPassword</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">bcrypt</span><span class="p">.</span><span class="nx">hash</span><span class="p">(</span><span class="nx">password</span><span class="p">,</span> <span class="mi">10</span><span class="p">);</span>
    
    <span class="kd">const</span> <span class="nx">user</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">User</span><span class="p">({</span>
      <span class="nx">username</span><span class="p">,</span>
      <span class="nx">email</span><span class="p">,</span>
      <span class="na">password</span><span class="p">:</span> <span class="nx">hashedPassword</span>
    <span class="p">});</span>
    
    <span class="k">await</span> <span class="nx">user</span><span class="p">.</span><span class="nx">save</span><span class="p">();</span>
    
    <span class="c1">// 生成JWT token</span>
    <span class="kd">const</span> <span class="nx">token</span> <span class="o">=</span> <span class="nx">jwt</span><span class="p">.</span><span class="nx">sign</span><span class="p">(</span>
      <span class="p">{</span> <span class="na">userId</span><span class="p">:</span> <span class="nx">user</span><span class="p">.</span><span class="nx">_id</span><span class="p">,</span> <span class="na">username</span><span class="p">:</span> <span class="nx">user</span><span class="p">.</span><span class="nx">username</span> <span class="p">},</span>
      <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">JWT_SECRET</span><span class="p">,</span>
      <span class="p">{</span> <span class="na">expiresIn</span><span class="p">:</span> <span class="dl">'</span><span class="s1">24h</span><span class="dl">'</span> <span class="p">}</span>
    <span class="p">);</span>
    
    <span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">201</span><span class="p">).</span><span class="nx">json</span><span class="p">({</span>
      <span class="na">message</span><span class="p">:</span> <span class="dl">'</span><span class="s1">用户注册成功</span><span class="dl">'</span><span class="p">,</span>
      <span class="nx">token</span><span class="p">,</span>
      <span class="na">user</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">id</span><span class="p">:</span> <span class="nx">user</span><span class="p">.</span><span class="nx">_id</span><span class="p">,</span>
        <span class="na">username</span><span class="p">:</span> <span class="nx">user</span><span class="p">.</span><span class="nx">username</span><span class="p">,</span>
        <span class="na">email</span><span class="p">:</span> <span class="nx">user</span><span class="p">.</span><span class="nx">email</span>
      <span class="p">}</span>
    <span class="p">});</span>
  <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">500</span><span class="p">).</span><span class="nx">json</span><span class="p">({</span> <span class="na">error</span><span class="p">:</span> <span class="nx">error</span><span class="p">.</span><span class="nx">message</span> <span class="p">});</span>
  <span class="p">}</span>
<span class="p">});</span>

<span class="c1">// 用户登录</span>
<span class="nx">app</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="dl">'</span><span class="s1">/login</span><span class="dl">'</span><span class="p">,</span> <span class="k">async</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">try</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="p">{</span> <span class="nx">email</span><span class="p">,</span> <span class="nx">password</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">;</span>
    
    <span class="kd">const</span> <span class="nx">user</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">User</span><span class="p">.</span><span class="nx">findOne</span><span class="p">({</span> <span class="nx">email</span> <span class="p">});</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">user</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span> <span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">401</span><span class="p">).</span><span class="nx">json</span><span class="p">({</span> <span class="na">error</span><span class="p">:</span> <span class="dl">'</span><span class="s1">邮箱或密码错误</span><span class="dl">'</span> <span class="p">});</span>
    <span class="p">}</span>
    
    <span class="kd">const</span> <span class="nx">isValid</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">bcrypt</span><span class="p">.</span><span class="nx">compare</span><span class="p">(</span><span class="nx">password</span><span class="p">,</span> <span class="nx">user</span><span class="p">.</span><span class="nx">password</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">isValid</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span> <span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">401</span><span class="p">).</span><span class="nx">json</span><span class="p">({</span> <span class="na">error</span><span class="p">:</span> <span class="dl">'</span><span class="s1">邮箱或密码错误</span><span class="dl">'</span> <span class="p">});</span>
    <span class="p">}</span>
    
    <span class="kd">const</span> <span class="nx">token</span> <span class="o">=</span> <span class="nx">jwt</span><span class="p">.</span><span class="nx">sign</span><span class="p">(</span>
      <span class="p">{</span> <span class="na">userId</span><span class="p">:</span> <span class="nx">user</span><span class="p">.</span><span class="nx">_id</span><span class="p">,</span> <span class="na">username</span><span class="p">:</span> <span class="nx">user</span><span class="p">.</span><span class="nx">username</span> <span class="p">},</span>
      <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">JWT_SECRET</span><span class="p">,</span>
      <span class="p">{</span> <span class="na">expiresIn</span><span class="p">:</span> <span class="dl">'</span><span class="s1">24h</span><span class="dl">'</span> <span class="p">}</span>
    <span class="p">);</span>
    
    <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">({</span>
      <span class="na">message</span><span class="p">:</span> <span class="dl">'</span><span class="s1">登录成功</span><span class="dl">'</span><span class="p">,</span>
      <span class="nx">token</span><span class="p">,</span>
      <span class="na">user</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">id</span><span class="p">:</span> <span class="nx">user</span><span class="p">.</span><span class="nx">_id</span><span class="p">,</span>
        <span class="na">username</span><span class="p">:</span> <span class="nx">user</span><span class="p">.</span><span class="nx">username</span><span class="p">,</span>
        <span class="na">email</span><span class="p">:</span> <span class="nx">user</span><span class="p">.</span><span class="nx">email</span>
      <span class="p">}</span>
    <span class="p">});</span>
  <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">500</span><span class="p">).</span><span class="nx">json</span><span class="p">({</span> <span class="na">error</span><span class="p">:</span> <span class="nx">error</span><span class="p">.</span><span class="nx">message</span> <span class="p">});</span>
  <span class="p">}</span>
<span class="p">});</span>

<span class="c1">// 获取用户信息</span>
<span class="nx">app</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/profile/:userId</span><span class="dl">'</span><span class="p">,</span> <span class="k">async</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">try</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">user</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">User</span><span class="p">.</span><span class="nx">findById</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">userId</span><span class="p">).</span><span class="nx">select</span><span class="p">(</span><span class="dl">'</span><span class="s1">-password</span><span class="dl">'</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">user</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span> <span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">404</span><span class="p">).</span><span class="nx">json</span><span class="p">({</span> <span class="na">error</span><span class="p">:</span> <span class="dl">'</span><span class="s1">用户不存在</span><span class="dl">'</span> <span class="p">});</span>
    <span class="p">}</span>
    <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">(</span><span class="nx">user</span><span class="p">);</span>
  <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">500</span><span class="p">).</span><span class="nx">json</span><span class="p">({</span> <span class="na">error</span><span class="p">:</span> <span class="nx">error</span><span class="p">.</span><span class="nx">message</span> <span class="p">});</span>
  <span class="p">}</span>
<span class="p">});</span>

<span class="nx">mongoose</span><span class="p">.</span><span class="nx">connect</span><span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">MONGODB_URI</span><span class="p">,</span> <span class="p">{</span>
  <span class="na">useNewUrlParser</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
  <span class="na">useUnifiedTopology</span><span class="p">:</span> <span class="kc">true</span>
<span class="p">});</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="mi">3001</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">User service running on port 3001</span><span class="dl">'</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></div></div>

<h3 id="3-订单服务实现">3. 订单服务实现</h3>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// order-service/server.js</span>
<span class="kd">const</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">express</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">mongoose</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">mongoose</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">axios</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">axios</span><span class="dl">'</span><span class="p">);</span>

<span class="kd">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">express</span><span class="p">();</span>
<span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="nx">json</span><span class="p">());</span>

<span class="c1">// 订单模型</span>
<span class="kd">const</span> <span class="nx">orderSchema</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">mongoose</span><span class="p">.</span><span class="nx">Schema</span><span class="p">({</span>
  <span class="na">userId</span><span class="p">:</span> <span class="p">{</span> <span class="na">type</span><span class="p">:</span> <span class="nb">String</span><span class="p">,</span> <span class="na">required</span><span class="p">:</span> <span class="kc">true</span> <span class="p">},</span>
  <span class="na">products</span><span class="p">:</span> <span class="p">[{</span>
    <span class="na">productId</span><span class="p">:</span> <span class="nb">String</span><span class="p">,</span>
    <span class="na">quantity</span><span class="p">:</span> <span class="nb">Number</span><span class="p">,</span>
    <span class="na">price</span><span class="p">:</span> <span class="nb">Number</span>
  <span class="p">}],</span>
  <span class="na">totalAmount</span><span class="p">:</span> <span class="p">{</span> <span class="na">type</span><span class="p">:</span> <span class="nb">Number</span><span class="p">,</span> <span class="na">required</span><span class="p">:</span> <span class="kc">true</span> <span class="p">},</span>
  <span class="na">status</span><span class="p">:</span> <span class="p">{</span> 
    <span class="na">type</span><span class="p">:</span> <span class="nb">String</span><span class="p">,</span> 
    <span class="na">enum</span><span class="p">:</span> <span class="p">[</span><span class="dl">'</span><span class="s1">pending</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">confirmed</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">shipped</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">delivered</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">cancelled</span><span class="dl">'</span><span class="p">],</span>
    <span class="na">default</span><span class="p">:</span> <span class="dl">'</span><span class="s1">pending</span><span class="dl">'</span>
  <span class="p">},</span>
  <span class="na">createdAt</span><span class="p">:</span> <span class="p">{</span> <span class="na">type</span><span class="p">:</span> <span class="nb">Date</span><span class="p">,</span> <span class="na">default</span><span class="p">:</span> <span class="nb">Date</span><span class="p">.</span><span class="nx">now</span> <span class="p">}</span>
<span class="p">});</span>

<span class="kd">const</span> <span class="nx">Order</span> <span class="o">=</span> <span class="nx">mongoose</span><span class="p">.</span><span class="nx">model</span><span class="p">(</span><span class="dl">'</span><span class="s1">Order</span><span class="dl">'</span><span class="p">,</span> <span class="nx">orderSchema</span><span class="p">);</span>

<span class="c1">// 创建订单</span>
<span class="nx">app</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="dl">'</span><span class="s1">/create</span><span class="dl">'</span><span class="p">,</span> <span class="k">async</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">try</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="p">{</span> <span class="nx">userId</span><span class="p">,</span> <span class="nx">products</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">;</span>
    
    <span class="c1">// 验证用户是否存在</span>
    <span class="kd">const</span> <span class="nx">userResponse</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">axios</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="s2">`http://user-service:3001/profile/</span><span class="p">${</span><span class="nx">userId</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">userResponse</span><span class="p">.</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span> <span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">400</span><span class="p">).</span><span class="nx">json</span><span class="p">({</span> <span class="na">error</span><span class="p">:</span> <span class="dl">'</span><span class="s1">用户不存在</span><span class="dl">'</span> <span class="p">});</span>
    <span class="p">}</span>
    
    <span class="c1">// 计算总金额</span>
    <span class="kd">const</span> <span class="nx">totalAmount</span> <span class="o">=</span> <span class="nx">products</span><span class="p">.</span><span class="nx">reduce</span><span class="p">((</span><span class="nx">sum</span><span class="p">,</span> <span class="nx">product</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="k">return</span> <span class="nx">sum</span> <span class="o">+</span> <span class="p">(</span><span class="nx">product</span><span class="p">.</span><span class="nx">price</span> <span class="o">*</span> <span class="nx">product</span><span class="p">.</span><span class="nx">quantity</span><span class="p">);</span>
    <span class="p">},</span> <span class="mi">0</span><span class="p">);</span>
    
    <span class="kd">const</span> <span class="nx">order</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Order</span><span class="p">({</span>
      <span class="nx">userId</span><span class="p">,</span>
      <span class="nx">products</span><span class="p">,</span>
      <span class="nx">totalAmount</span>
    <span class="p">});</span>
    
    <span class="k">await</span> <span class="nx">order</span><span class="p">.</span><span class="nx">save</span><span class="p">();</span>
    
    <span class="c1">// 发送订单创建事件（消息队列）</span>
    <span class="c1">// await publishEvent('order.created', { orderId: order._id, userId, totalAmount });</span>
    
    <span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">201</span><span class="p">).</span><span class="nx">json</span><span class="p">({</span>
      <span class="na">message</span><span class="p">:</span> <span class="dl">'</span><span class="s1">订单创建成功</span><span class="dl">'</span><span class="p">,</span>
      <span class="nx">order</span>
    <span class="p">});</span>
  <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">500</span><span class="p">).</span><span class="nx">json</span><span class="p">({</span> <span class="na">error</span><span class="p">:</span> <span class="nx">error</span><span class="p">.</span><span class="nx">message</span> <span class="p">});</span>
  <span class="p">}</span>
<span class="p">});</span>

<span class="c1">// 获取用户订单</span>
<span class="nx">app</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/user/:userId</span><span class="dl">'</span><span class="p">,</span> <span class="k">async</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">try</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">orders</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">Order</span><span class="p">.</span><span class="nx">find</span><span class="p">({</span> <span class="na">userId</span><span class="p">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">userId</span> <span class="p">})</span>
      <span class="p">.</span><span class="nx">sort</span><span class="p">({</span> <span class="na">createdAt</span><span class="p">:</span> <span class="o">-</span><span class="mi">1</span> <span class="p">});</span>
    <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">(</span><span class="nx">orders</span><span class="p">);</span>
  <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">500</span><span class="p">).</span><span class="nx">json</span><span class="p">({</span> <span class="na">error</span><span class="p">:</span> <span class="nx">error</span><span class="p">.</span><span class="nx">message</span> <span class="p">});</span>
  <span class="p">}</span>
<span class="p">});</span>

<span class="c1">// 更新订单状态</span>
<span class="nx">app</span><span class="p">.</span><span class="nx">put</span><span class="p">(</span><span class="dl">'</span><span class="s1">/:orderId/status</span><span class="dl">'</span><span class="p">,</span> <span class="k">async</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">try</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="p">{</span> <span class="nx">status</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">;</span>
    <span class="kd">const</span> <span class="nx">order</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">Order</span><span class="p">.</span><span class="nx">findByIdAndUpdate</span><span class="p">(</span>
      <span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">orderId</span><span class="p">,</span>
      <span class="p">{</span> <span class="nx">status</span> <span class="p">},</span>
      <span class="p">{</span> <span class="na">new</span><span class="p">:</span> <span class="kc">true</span> <span class="p">}</span>
    <span class="p">);</span>
    
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">order</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span> <span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">404</span><span class="p">).</span><span class="nx">json</span><span class="p">({</span> <span class="na">error</span><span class="p">:</span> <span class="dl">'</span><span class="s1">订单不存在</span><span class="dl">'</span> <span class="p">});</span>
    <span class="p">}</span>
    
    <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">({</span> <span class="na">message</span><span class="p">:</span> <span class="dl">'</span><span class="s1">订单状态更新成功</span><span class="dl">'</span><span class="p">,</span> <span class="nx">order</span> <span class="p">});</span>
  <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">500</span><span class="p">).</span><span class="nx">json</span><span class="p">({</span> <span class="na">error</span><span class="p">:</span> <span class="nx">error</span><span class="p">.</span><span class="nx">message</span> <span class="p">});</span>
  <span class="p">}</span>
<span class="p">});</span>

<span class="nx">mongoose</span><span class="p">.</span><span class="nx">connect</span><span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">MONGODB_URI</span><span class="p">);</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="mi">3002</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Order service running on port 3002</span><span class="dl">'</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></div></div>

<h2 id="docker容器化部署">Docker容器化部署</h2>

<h3 id="dockerfile示例">Dockerfile示例</h3>

<div class="language-dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># user-service/Dockerfile</span>
<span class="k">FROM</span><span class="s"> node:18-alpine</span>

<span class="k">WORKDIR</span><span class="s"> /app</span>

<span class="k">COPY</span><span class="s"> package*.json ./</span>
<span class="k">RUN </span>npm ci <span class="nt">--only</span><span class="o">=</span>production

<span class="k">COPY</span><span class="s"> . .</span>

<span class="k">EXPOSE</span><span class="s"> 3001</span>

<span class="k">CMD</span><span class="s"> ["node", "server.js"]</span>
</code></pre></div></div>

<h3 id="docker-compose配置">Docker Compose配置</h3>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># docker-compose.yml</span>
<span class="na">version</span><span class="pi">:</span> <span class="s1">'</span><span class="s">3.8'</span>

<span class="na">services</span><span class="pi">:</span>
  <span class="na">api-gateway</span><span class="pi">:</span>
    <span class="na">build</span><span class="pi">:</span> <span class="s">./api-gateway</span>
    <span class="na">ports</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">3000:3000"</span>
    <span class="na">environment</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">JWT_SECRET=your-secret-key</span>
    <span class="na">depends_on</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">user-service</span>
      <span class="pi">-</span> <span class="s">order-service</span>
      <span class="pi">-</span> <span class="s">payment-service</span>

  <span class="na">user-service</span><span class="pi">:</span>
    <span class="na">build</span><span class="pi">:</span> <span class="s">./user-service</span>
    <span class="na">environment</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">MONGODB_URI=mongodb://mongo:27017/userdb</span>
      <span class="pi">-</span> <span class="s">JWT_SECRET=your-secret-key</span>
    <span class="na">depends_on</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">mongo</span>

  <span class="na">order-service</span><span class="pi">:</span>
    <span class="na">build</span><span class="pi">:</span> <span class="s">./order-service</span>
    <span class="na">environment</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">MONGODB_URI=mongodb://mongo:27017/orderdb</span>
    <span class="na">depends_on</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">mongo</span>

  <span class="na">payment-service</span><span class="pi">:</span>
    <span class="na">build</span><span class="pi">:</span> <span class="s">./payment-service</span>
    <span class="na">environment</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">MONGODB_URI=mongodb://mongo:27017/paymentdb</span>
    <span class="na">depends_on</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">mongo</span>

  <span class="na">mongo</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">mongo:5.0</span>
    <span class="na">ports</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">27017:27017"</span>
    <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">mongo-data:/data/db</span>

<span class="na">volumes</span><span class="pi">:</span>
  <span class="na">mongo-data</span><span class="pi">:</span>
</code></pre></div></div>

<h2 id="服务间通信">服务间通信</h2>

<h3 id="1-同步通信http-api">1. 同步通信（HTTP API）</h3>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 在订单服务中调用用户服务</span>
<span class="kd">const</span> <span class="nx">getUserInfo</span> <span class="o">=</span> <span class="k">async</span> <span class="p">(</span><span class="nx">userId</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">try</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">response</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">axios</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="s2">`http://user-service:3001/profile/</span><span class="p">${</span><span class="nx">userId</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
    <span class="k">return</span> <span class="nx">response</span><span class="p">.</span><span class="nx">data</span><span class="p">;</span>
  <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="dl">'</span><span class="s1">获取用户信息失败</span><span class="dl">'</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div>

<h3 id="2-异步通信消息队列">2. 异步通信（消息队列）</h3>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// utils/eventBus.js</span>
<span class="kd">const</span> <span class="nx">amqp</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">amqplib</span><span class="dl">'</span><span class="p">);</span>

<span class="kd">class</span> <span class="nx">EventBus</span> <span class="p">{</span>
  <span class="kd">constructor</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">connection</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">channel</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">async</span> <span class="nx">connect</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">connection</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">amqp</span><span class="p">.</span><span class="nx">connect</span><span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">RABBITMQ_URL</span><span class="p">);</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">channel</span> <span class="o">=</span> <span class="k">await</span> <span class="k">this</span><span class="p">.</span><span class="nx">connection</span><span class="p">.</span><span class="nx">createChannel</span><span class="p">();</span>
  <span class="p">}</span>

  <span class="k">async</span> <span class="nx">publishEvent</span><span class="p">(</span><span class="nx">event</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">queue</span> <span class="o">=</span> <span class="s2">`event.</span><span class="p">${</span><span class="nx">event</span><span class="p">}</span><span class="s2">`</span><span class="p">;</span>
    <span class="k">await</span> <span class="k">this</span><span class="p">.</span><span class="nx">channel</span><span class="p">.</span><span class="nx">assertQueue</span><span class="p">(</span><span class="nx">queue</span><span class="p">,</span> <span class="p">{</span> <span class="na">durable</span><span class="p">:</span> <span class="kc">true</span> <span class="p">});</span>
    
    <span class="kd">const</span> <span class="nx">message</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">({</span>
      <span class="nx">event</span><span class="p">,</span>
      <span class="nx">data</span><span class="p">,</span>
      <span class="na">timestamp</span><span class="p">:</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">().</span><span class="nx">toISOString</span><span class="p">()</span>
    <span class="p">});</span>
    
    <span class="k">this</span><span class="p">.</span><span class="nx">channel</span><span class="p">.</span><span class="nx">sendToQueue</span><span class="p">(</span><span class="nx">queue</span><span class="p">,</span> <span class="nx">Buffer</span><span class="p">.</span><span class="k">from</span><span class="p">(</span><span class="nx">message</span><span class="p">),</span> <span class="p">{</span>
      <span class="na">persistent</span><span class="p">:</span> <span class="kc">true</span>
    <span class="p">});</span>
  <span class="p">}</span>

  <span class="k">async</span> <span class="nx">subscribeEvent</span><span class="p">(</span><span class="nx">event</span><span class="p">,</span> <span class="nx">handler</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">queue</span> <span class="o">=</span> <span class="s2">`event.</span><span class="p">${</span><span class="nx">event</span><span class="p">}</span><span class="s2">`</span><span class="p">;</span>
    <span class="k">await</span> <span class="k">this</span><span class="p">.</span><span class="nx">channel</span><span class="p">.</span><span class="nx">assertQueue</span><span class="p">(</span><span class="nx">queue</span><span class="p">,</span> <span class="p">{</span> <span class="na">durable</span><span class="p">:</span> <span class="kc">true</span> <span class="p">});</span>
    
    <span class="k">this</span><span class="p">.</span><span class="nx">channel</span><span class="p">.</span><span class="nx">consume</span><span class="p">(</span><span class="nx">queue</span><span class="p">,</span> <span class="k">async</span> <span class="p">(</span><span class="nx">msg</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">msg</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">const</span> <span class="nx">content</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">msg</span><span class="p">.</span><span class="nx">content</span><span class="p">.</span><span class="nx">toString</span><span class="p">());</span>
        <span class="k">await</span> <span class="nx">handler</span><span class="p">(</span><span class="nx">content</span><span class="p">);</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">channel</span><span class="p">.</span><span class="nx">ack</span><span class="p">(</span><span class="nx">msg</span><span class="p">);</span>
      <span class="p">}</span>
    <span class="p">});</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">EventBus</span><span class="p">();</span>
</code></pre></div></div>

<h2 id="监控和日志">监控和日志</h2>

<h3 id="健康检查端点">健康检查端点</h3>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 每个服务都应该有健康检查端点</span>
<span class="nx">app</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/health</span><span class="dl">'</span><span class="p">,</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">({</span>
    <span class="na">status</span><span class="p">:</span> <span class="dl">'</span><span class="s1">healthy</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">timestamp</span><span class="p">:</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">().</span><span class="nx">toISOString</span><span class="p">(),</span>
    <span class="na">service</span><span class="p">:</span> <span class="dl">'</span><span class="s1">user-service</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">version</span><span class="p">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">npm_package_version</span>
  <span class="p">});</span>
<span class="p">});</span>
</code></pre></div></div>

<h3 id="结构化日志">结构化日志</h3>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">winston</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">winston</span><span class="dl">'</span><span class="p">);</span>

<span class="kd">const</span> <span class="nx">logger</span> <span class="o">=</span> <span class="nx">winston</span><span class="p">.</span><span class="nx">createLogger</span><span class="p">({</span>
  <span class="na">level</span><span class="p">:</span> <span class="dl">'</span><span class="s1">info</span><span class="dl">'</span><span class="p">,</span>
  <span class="na">format</span><span class="p">:</span> <span class="nx">winston</span><span class="p">.</span><span class="nx">format</span><span class="p">.</span><span class="nx">combine</span><span class="p">(</span>
    <span class="nx">winston</span><span class="p">.</span><span class="nx">format</span><span class="p">.</span><span class="nx">timestamp</span><span class="p">(),</span>
    <span class="nx">winston</span><span class="p">.</span><span class="nx">format</span><span class="p">.</span><span class="nx">errors</span><span class="p">({</span> <span class="na">stack</span><span class="p">:</span> <span class="kc">true</span> <span class="p">}),</span>
    <span class="nx">winston</span><span class="p">.</span><span class="nx">format</span><span class="p">.</span><span class="nx">json</span><span class="p">()</span>
  <span class="p">),</span>
  <span class="na">transports</span><span class="p">:</span> <span class="p">[</span>
    <span class="k">new</span> <span class="nx">winston</span><span class="p">.</span><span class="nx">transports</span><span class="p">.</span><span class="nx">File</span><span class="p">({</span> <span class="na">filename</span><span class="p">:</span> <span class="dl">'</span><span class="s1">error.log</span><span class="dl">'</span><span class="p">,</span> <span class="na">level</span><span class="p">:</span> <span class="dl">'</span><span class="s1">error</span><span class="dl">'</span> <span class="p">}),</span>
    <span class="k">new</span> <span class="nx">winston</span><span class="p">.</span><span class="nx">transports</span><span class="p">.</span><span class="nx">File</span><span class="p">({</span> <span class="na">filename</span><span class="p">:</span> <span class="dl">'</span><span class="s1">combined.log</span><span class="dl">'</span> <span class="p">})</span>
  <span class="p">]</span>
<span class="p">});</span>

<span class="c1">// 使用示例</span>
<span class="nx">logger</span><span class="p">.</span><span class="nx">info</span><span class="p">(</span><span class="dl">'</span><span class="s1">User registered</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span> 
  <span class="na">userId</span><span class="p">:</span> <span class="nx">user</span><span class="p">.</span><span class="nx">_id</span><span class="p">,</span> 
  <span class="na">username</span><span class="p">:</span> <span class="nx">user</span><span class="p">.</span><span class="nx">username</span><span class="p">,</span>
  <span class="na">service</span><span class="p">:</span> <span class="dl">'</span><span class="s1">user-service</span><span class="dl">'</span>
<span class="p">});</span>
</code></pre></div></div>

<h2 id="部署和扩展">部署和扩展</h2>

<h3 id="kubernetes配置示例">Kubernetes配置示例</h3>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># user-service-deployment.yaml</span>
<span class="na">apiVersion</span><span class="pi">:</span> <span class="s">apps/v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Deployment</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">user-service</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">replicas</span><span class="pi">:</span> <span class="m">3</span>
  <span class="na">selector</span><span class="pi">:</span>
    <span class="na">matchLabels</span><span class="pi">:</span>
      <span class="na">app</span><span class="pi">:</span> <span class="s">user-service</span>
  <span class="na">template</span><span class="pi">:</span>
    <span class="na">metadata</span><span class="pi">:</span>
      <span class="na">labels</span><span class="pi">:</span>
        <span class="na">app</span><span class="pi">:</span> <span class="s">user-service</span>
    <span class="na">spec</span><span class="pi">:</span>
      <span class="na">containers</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">user-service</span>
        <span class="na">image</span><span class="pi">:</span> <span class="s">your-registry/user-service:latest</span>
        <span class="na">ports</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="na">containerPort</span><span class="pi">:</span> <span class="m">3001</span>
        <span class="na">env</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">MONGODB_URI</span>
          <span class="na">valueFrom</span><span class="pi">:</span>
            <span class="na">secretKeyRef</span><span class="pi">:</span>
              <span class="na">name</span><span class="pi">:</span> <span class="s">db-secret</span>
              <span class="na">key</span><span class="pi">:</span> <span class="s">mongodb-uri</span>
        <span class="na">resources</span><span class="pi">:</span>
          <span class="na">requests</span><span class="pi">:</span>
            <span class="na">memory</span><span class="pi">:</span> <span class="s2">"</span><span class="s">128Mi"</span>
            <span class="na">cpu</span><span class="pi">:</span> <span class="s2">"</span><span class="s">100m"</span>
          <span class="na">limits</span><span class="pi">:</span>
            <span class="na">memory</span><span class="pi">:</span> <span class="s2">"</span><span class="s">256Mi"</span>
            <span class="na">cpu</span><span class="pi">:</span> <span class="s2">"</span><span class="s">200m"</span>
<span class="nn">---</span>
<span class="na">apiVersion</span><span class="pi">:</span> <span class="s">v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Service</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">user-service</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">selector</span><span class="pi">:</span>
    <span class="na">app</span><span class="pi">:</span> <span class="s">user-service</span>
  <span class="na">ports</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">port</span><span class="pi">:</span> <span class="m">3001</span>
    <span class="na">targetPort</span><span class="pi">:</span> <span class="m">3001</span>
</code></pre></div></div>

<h2 id="最佳实践总结">最佳实践总结</h2>

<h3 id="1-设计原则">1. 设计原则</h3>
<ul>
  <li><strong>单一职责</strong>：每个服务专注于一个业务领域</li>
  <li><strong>数据独立</strong>：每个服务拥有自己的数据库</li>
  <li><strong>API优先</strong>：通过明确定义的API进行通信</li>
  <li><strong>无状态设计</strong>：服务实例应该是无状态的</li>
</ul>

<h3 id="2-开发实践">2. 开发实践</h3>
<ul>
  <li><strong>统一的错误处理</strong>和日志格式</li>
  <li><strong>版本控制</strong>：API版本管理策略</li>
  <li><strong>测试策略</strong>：单元测试、集成测试、契约测试</li>
  <li><strong>CI/CD流水线</strong>：自动化构建和部署</li>
</ul>

<h3 id="3-运维实践">3. 运维实践</h3>
<ul>
  <li><strong>监控告警</strong>：服务健康状态、性能指标</li>
  <li><strong>链路追踪</strong>：分布式请求追踪</li>
  <li><strong>服务发现</strong>：动态服务注册和发现</li>
  <li><strong>配置管理</strong>：集中化配置管理</li>
</ul>

<h2 id="总结">总结</h2>

<p>微服务架构虽然带来了更好的可扩展性和技术灵活性，但也增加了系统的复杂性。在实施微服务时，需要：</p>

<ol>
  <li><strong>循序渐进</strong>：从单体开始，逐步拆分</li>
  <li><strong>团队准备</strong>：确保团队具备相应的技术能力</li>
  <li><strong>工具链完善</strong>：建立完整的开发、部署、监控工具链</li>
  <li><strong>文化转变</strong>：建立DevOps文化和实践</li>
</ol>

<p>选择微服务架构需要权衡利弊，确保它真正解决你的业务问题，而不是为了技术而技术。</p>

<hr />

<p><em>你的团队在微服务实践中遇到了哪些挑战？欢迎分享你的经验和解决方案！</em></p>]]></content><author><name>Chico Gong</name><email>chicogong@tencent.com</email></author><category term="后端开发" /><category term="架构设计" /><category term="Node.js" /><category term="微服务" /><category term="Docker" /><category term="API Gateway" /><category term="分布式系统" /><summary type="html"><![CDATA[随着业务的快速增长，传统的单体应用架构逐渐暴露出扩展性和维护性的问题。今天我将分享如何使用Node.js构建高效的微服务架构，以及在实际项目中的最佳实践。]]></summary></entry><entry><title type="html">Python网页爬虫进阶教程：从基础到反爬虫对抗</title><link href="http://0.0.0.0:4000/python/%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/python-web-scraping-advanced/" rel="alternate" type="text/html" title="Python网页爬虫进阶教程：从基础到反爬虫对抗" /><published>2024-01-06T10:15:00+08:00</published><updated>2024-01-06T10:15:00+08:00</updated><id>http://0.0.0.0:4000/python/%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/python-web-scraping-advanced</id><content type="html" xml:base="http://0.0.0.0:4000/python/%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/python-web-scraping-advanced/"><![CDATA[<p>网页爬虫是数据科学和自动化领域的重要技能。本文将从基础概念开始，逐步深入到高级技巧和反爬虫对抗策略，帮助你构建稳定高效的爬虫系统。</p>

<h2 id="爬虫基础概念">爬虫基础概念</h2>

<p>网页爬虫（Web Crawler）是一种自动获取网页内容的程序，主要用于：</p>

<ul>
  <li><strong>数据收集</strong>：获取网站的公开信息</li>
  <li><strong>价格监控</strong>：跟踪商品价格变化</li>
  <li><strong>新闻聚合</strong>：收集多个新闻源的文章</li>
  <li><strong>SEO分析</strong>：分析网站结构和内容</li>
</ul>

<h2 id="基础爬虫实现">基础爬虫实现</h2>

<h3 id="1-使用requests和beautifulsoup">1. 使用requests和BeautifulSoup</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">requests</span>
<span class="kn">from</span> <span class="nn">bs4</span> <span class="kn">import</span> <span class="n">BeautifulSoup</span>
<span class="kn">import</span> <span class="nn">time</span>
<span class="kn">import</span> <span class="nn">csv</span>
<span class="kn">from</span> <span class="nn">urllib.parse</span> <span class="kn">import</span> <span class="n">urljoin</span><span class="p">,</span> <span class="n">urlparse</span>
<span class="kn">import</span> <span class="nn">logging</span>

<span class="c1"># 配置日志
</span><span class="n">logging</span><span class="p">.</span><span class="n">basicConfig</span><span class="p">(</span><span class="n">level</span><span class="o">=</span><span class="n">logging</span><span class="p">.</span><span class="n">INFO</span><span class="p">)</span>
<span class="n">logger</span> <span class="o">=</span> <span class="n">logging</span><span class="p">.</span><span class="n">getLogger</span><span class="p">(</span><span class="n">__name__</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">BasicCrawler</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">base_url</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">base_url</span> <span class="o">=</span> <span class="n">base_url</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">session</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="n">Session</span><span class="p">()</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">session</span><span class="p">.</span><span class="n">headers</span><span class="p">.</span><span class="n">update</span><span class="p">(</span><span class="n">headers</span> <span class="ow">or</span> <span class="p">{</span>
            <span class="s">'User-Agent'</span><span class="p">:</span> <span class="s">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'</span>
        <span class="p">})</span>
        
    <span class="k">def</span> <span class="nf">get_page</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">url</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
        <span class="s">"""获取网页内容"""</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">response</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">session</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
            <span class="n">response</span><span class="p">.</span><span class="n">raise_for_status</span><span class="p">()</span>
            <span class="k">return</span> <span class="n">response</span>
        <span class="k">except</span> <span class="n">requests</span><span class="p">.</span><span class="n">RequestException</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
            <span class="n">logger</span><span class="p">.</span><span class="n">error</span><span class="p">(</span><span class="sa">f</span><span class="s">"请求失败 </span><span class="si">{</span><span class="n">url</span><span class="si">}</span><span class="s">: </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
            <span class="k">return</span> <span class="bp">None</span>
    
    <span class="k">def</span> <span class="nf">parse_page</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">html_content</span><span class="p">,</span> <span class="n">url</span><span class="p">):</span>
        <span class="s">"""解析网页内容 - 子类重写此方法"""</span>
        <span class="n">soup</span> <span class="o">=</span> <span class="n">BeautifulSoup</span><span class="p">(</span><span class="n">html_content</span><span class="p">,</span> <span class="s">'html.parser'</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">soup</span>
    
    <span class="k">def</span> <span class="nf">crawl</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">urls</span><span class="p">,</span> <span class="n">delay</span><span class="o">=</span><span class="mi">1</span><span class="p">):</span>
        <span class="s">"""批量爬取网页"""</span>
        <span class="n">results</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">url</span> <span class="ow">in</span> <span class="n">urls</span><span class="p">:</span>
            <span class="n">logger</span><span class="p">.</span><span class="n">info</span><span class="p">(</span><span class="sa">f</span><span class="s">"正在爬取: </span><span class="si">{</span><span class="n">url</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
            
            <span class="n">response</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">get_page</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">response</span><span class="p">:</span>
                <span class="n">data</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">parse_page</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="n">text</span><span class="p">,</span> <span class="n">url</span><span class="p">)</span>
                <span class="k">if</span> <span class="n">data</span><span class="p">:</span>
                    <span class="n">results</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
            
            <span class="n">time</span><span class="p">.</span><span class="n">sleep</span><span class="p">(</span><span class="n">delay</span><span class="p">)</span>  <span class="c1"># 避免请求过于频繁
</span>        
        <span class="k">return</span> <span class="n">results</span>

<span class="c1"># 实际应用示例：爬取新闻网站
</span><span class="k">class</span> <span class="nc">NewsCrawler</span><span class="p">(</span><span class="n">BasicCrawler</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">parse_page</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">html_content</span><span class="p">,</span> <span class="n">url</span><span class="p">):</span>
        <span class="n">soup</span> <span class="o">=</span> <span class="n">BeautifulSoup</span><span class="p">(</span><span class="n">html_content</span><span class="p">,</span> <span class="s">'html.parser'</span><span class="p">)</span>
        
        <span class="c1"># 提取文章信息
</span>        <span class="n">article_data</span> <span class="o">=</span> <span class="p">{</span>
            <span class="s">'url'</span><span class="p">:</span> <span class="n">url</span><span class="p">,</span>
            <span class="s">'title'</span><span class="p">:</span> <span class="bp">self</span><span class="p">.</span><span class="n">extract_title</span><span class="p">(</span><span class="n">soup</span><span class="p">),</span>
            <span class="s">'content'</span><span class="p">:</span> <span class="bp">self</span><span class="p">.</span><span class="n">extract_content</span><span class="p">(</span><span class="n">soup</span><span class="p">),</span>
            <span class="s">'publish_time'</span><span class="p">:</span> <span class="bp">self</span><span class="p">.</span><span class="n">extract_publish_time</span><span class="p">(</span><span class="n">soup</span><span class="p">),</span>
            <span class="s">'author'</span><span class="p">:</span> <span class="bp">self</span><span class="p">.</span><span class="n">extract_author</span><span class="p">(</span><span class="n">soup</span><span class="p">)</span>
        <span class="p">}</span>
        
        <span class="k">return</span> <span class="n">article_data</span>
    
    <span class="k">def</span> <span class="nf">extract_title</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">soup</span><span class="p">):</span>
        <span class="s">"""提取标题"""</span>
        <span class="n">selectors</span> <span class="o">=</span> <span class="p">[</span><span class="s">'h1'</span><span class="p">,</span> <span class="s">'.title'</span><span class="p">,</span> <span class="s">'#title'</span><span class="p">,</span> <span class="s">'[class*="title"]'</span><span class="p">]</span>
        <span class="k">for</span> <span class="n">selector</span> <span class="ow">in</span> <span class="n">selectors</span><span class="p">:</span>
            <span class="n">element</span> <span class="o">=</span> <span class="n">soup</span><span class="p">.</span><span class="n">select_one</span><span class="p">(</span><span class="n">selector</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">element</span><span class="p">:</span>
                <span class="k">return</span> <span class="n">element</span><span class="p">.</span><span class="n">get_text</span><span class="p">().</span><span class="n">strip</span><span class="p">()</span>
        <span class="k">return</span> <span class="bp">None</span>
    
    <span class="k">def</span> <span class="nf">extract_content</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">soup</span><span class="p">):</span>
        <span class="s">"""提取正文内容"""</span>
        <span class="c1"># 移除无关元素
</span>        <span class="k">for</span> <span class="n">element</span> <span class="ow">in</span> <span class="n">soup</span><span class="p">.</span><span class="n">find_all</span><span class="p">([</span><span class="s">'script'</span><span class="p">,</span> <span class="s">'style'</span><span class="p">,</span> <span class="s">'nav'</span><span class="p">,</span> <span class="s">'footer'</span><span class="p">]):</span>
            <span class="n">element</span><span class="p">.</span><span class="n">decompose</span><span class="p">()</span>
        
        <span class="c1"># 尝试多种选择器
</span>        <span class="n">content_selectors</span> <span class="o">=</span> <span class="p">[</span>
            <span class="s">'.article-content'</span><span class="p">,</span> <span class="s">'.post-content'</span><span class="p">,</span> 
            <span class="s">'#content'</span><span class="p">,</span> <span class="s">'[class*="content"]'</span>
        <span class="p">]</span>
        
        <span class="k">for</span> <span class="n">selector</span> <span class="ow">in</span> <span class="n">content_selectors</span><span class="p">:</span>
            <span class="n">element</span> <span class="o">=</span> <span class="n">soup</span><span class="p">.</span><span class="n">select_one</span><span class="p">(</span><span class="n">selector</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">element</span><span class="p">:</span>
                <span class="k">return</span> <span class="n">element</span><span class="p">.</span><span class="n">get_text</span><span class="p">().</span><span class="n">strip</span><span class="p">()</span>
        
        <span class="c1"># 兜底方案：获取最长的段落集合
</span>        <span class="n">paragraphs</span> <span class="o">=</span> <span class="n">soup</span><span class="p">.</span><span class="n">find_all</span><span class="p">(</span><span class="s">'p'</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">paragraphs</span><span class="p">:</span>
            <span class="k">return</span> <span class="s">'</span><span class="se">\n</span><span class="s">'</span><span class="p">.</span><span class="n">join</span><span class="p">([</span><span class="n">p</span><span class="p">.</span><span class="n">get_text</span><span class="p">().</span><span class="n">strip</span><span class="p">()</span> <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">paragraphs</span><span class="p">])</span>
        
        <span class="k">return</span> <span class="bp">None</span>
    
    <span class="k">def</span> <span class="nf">extract_publish_time</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">soup</span><span class="p">):</span>
        <span class="s">"""提取发布时间"""</span>
        <span class="n">time_selectors</span> <span class="o">=</span> <span class="p">[</span>
            <span class="s">'time'</span><span class="p">,</span> <span class="s">'.publish-time'</span><span class="p">,</span> <span class="s">'.date'</span><span class="p">,</span> 
            <span class="s">'[datetime]'</span><span class="p">,</span> <span class="s">'[class*="time"]'</span>
        <span class="p">]</span>
        
        <span class="k">for</span> <span class="n">selector</span> <span class="ow">in</span> <span class="n">time_selectors</span><span class="p">:</span>
            <span class="n">element</span> <span class="o">=</span> <span class="n">soup</span><span class="p">.</span><span class="n">select_one</span><span class="p">(</span><span class="n">selector</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">element</span><span class="p">:</span>
                <span class="c1"># 尝试获取datetime属性
</span>                <span class="n">datetime_attr</span> <span class="o">=</span> <span class="n">element</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s">'datetime'</span><span class="p">)</span>
                <span class="k">if</span> <span class="n">datetime_attr</span><span class="p">:</span>
                    <span class="k">return</span> <span class="n">datetime_attr</span>
                <span class="k">return</span> <span class="n">element</span><span class="p">.</span><span class="n">get_text</span><span class="p">().</span><span class="n">strip</span><span class="p">()</span>
        
        <span class="k">return</span> <span class="bp">None</span>
    
    <span class="k">def</span> <span class="nf">extract_author</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">soup</span><span class="p">):</span>
        <span class="s">"""提取作者信息"""</span>
        <span class="n">author_selectors</span> <span class="o">=</span> <span class="p">[</span>
            <span class="s">'.author'</span><span class="p">,</span> <span class="s">'.writer'</span><span class="p">,</span> <span class="s">'[class*="author"]'</span><span class="p">,</span>
            <span class="s">'[rel="author"]'</span>
        <span class="p">]</span>
        
        <span class="k">for</span> <span class="n">selector</span> <span class="ow">in</span> <span class="n">author_selectors</span><span class="p">:</span>
            <span class="n">element</span> <span class="o">=</span> <span class="n">soup</span><span class="p">.</span><span class="n">select_one</span><span class="p">(</span><span class="n">selector</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">element</span><span class="p">:</span>
                <span class="k">return</span> <span class="n">element</span><span class="p">.</span><span class="n">get_text</span><span class="p">().</span><span class="n">strip</span><span class="p">()</span>
        
        <span class="k">return</span> <span class="bp">None</span>

<span class="c1"># 使用示例
</span><span class="n">crawler</span> <span class="o">=</span> <span class="n">NewsCrawler</span><span class="p">(</span><span class="s">'https://example-news.com'</span><span class="p">)</span>
<span class="n">news_urls</span> <span class="o">=</span> <span class="p">[</span>
    <span class="s">'https://example-news.com/article1'</span><span class="p">,</span>
    <span class="s">'https://example-news.com/article2'</span>
<span class="p">]</span>
<span class="n">articles</span> <span class="o">=</span> <span class="n">crawler</span><span class="p">.</span><span class="n">crawl</span><span class="p">(</span><span class="n">news_urls</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="2-处理javascript渲染的页面">2. 处理JavaScript渲染的页面</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">selenium</span> <span class="kn">import</span> <span class="n">webdriver</span>
<span class="kn">from</span> <span class="nn">selenium.webdriver.common.by</span> <span class="kn">import</span> <span class="n">By</span>
<span class="kn">from</span> <span class="nn">selenium.webdriver.support.ui</span> <span class="kn">import</span> <span class="n">WebDriverWait</span>
<span class="kn">from</span> <span class="nn">selenium.webdriver.support</span> <span class="kn">import</span> <span class="n">expected_conditions</span> <span class="k">as</span> <span class="n">EC</span>
<span class="kn">from</span> <span class="nn">selenium.webdriver.chrome.options</span> <span class="kn">import</span> <span class="n">Options</span>
<span class="kn">import</span> <span class="nn">json</span>

<span class="k">class</span> <span class="nc">JavaScriptCrawler</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">headless</span><span class="o">=</span><span class="bp">True</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">options</span> <span class="o">=</span> <span class="n">Options</span><span class="p">()</span>
        <span class="k">if</span> <span class="n">headless</span><span class="p">:</span>
            <span class="bp">self</span><span class="p">.</span><span class="n">options</span><span class="p">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s">'--headless'</span><span class="p">)</span>
        
        <span class="c1"># 优化参数
</span>        <span class="bp">self</span><span class="p">.</span><span class="n">options</span><span class="p">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s">'--no-sandbox'</span><span class="p">)</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">options</span><span class="p">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s">'--disable-dev-shm-usage'</span><span class="p">)</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">options</span><span class="p">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s">'--disable-gpu'</span><span class="p">)</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">options</span><span class="p">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s">'--window-size=1920,1080'</span><span class="p">)</span>
        
        <span class="bp">self</span><span class="p">.</span><span class="n">driver</span> <span class="o">=</span> <span class="bp">None</span>
    
    <span class="k">def</span> <span class="nf">__enter__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">driver</span> <span class="o">=</span> <span class="n">webdriver</span><span class="p">.</span><span class="n">Chrome</span><span class="p">(</span><span class="n">options</span><span class="o">=</span><span class="bp">self</span><span class="p">.</span><span class="n">options</span><span class="p">)</span>
        <span class="k">return</span> <span class="bp">self</span>
    
    <span class="k">def</span> <span class="nf">__exit__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">exc_type</span><span class="p">,</span> <span class="n">exc_val</span><span class="p">,</span> <span class="n">exc_tb</span><span class="p">):</span>
        <span class="k">if</span> <span class="bp">self</span><span class="p">.</span><span class="n">driver</span><span class="p">:</span>
            <span class="bp">self</span><span class="p">.</span><span class="n">driver</span><span class="p">.</span><span class="n">quit</span><span class="p">()</span>
    
    <span class="k">def</span> <span class="nf">get_page</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">url</span><span class="p">,</span> <span class="n">wait_element</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="mi">10</span><span class="p">):</span>
        <span class="s">"""获取JavaScript渲染后的页面"""</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">driver</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>
        
        <span class="k">if</span> <span class="n">wait_element</span><span class="p">:</span>
            <span class="c1"># 等待特定元素加载
</span>            <span class="n">wait</span> <span class="o">=</span> <span class="n">WebDriverWait</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">driver</span><span class="p">,</span> <span class="n">timeout</span><span class="p">)</span>
            <span class="n">wait</span><span class="p">.</span><span class="n">until</span><span class="p">(</span><span class="n">EC</span><span class="p">.</span><span class="n">presence_of_element_located</span><span class="p">((</span><span class="n">By</span><span class="p">.</span><span class="n">CSS_SELECTOR</span><span class="p">,</span> <span class="n">wait_element</span><span class="p">)))</span>
        
        <span class="k">return</span> <span class="bp">self</span><span class="p">.</span><span class="n">driver</span><span class="p">.</span><span class="n">page_source</span>
    
    <span class="k">def</span> <span class="nf">scroll_to_load_more</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">scroll_pause_time</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">max_scrolls</span><span class="o">=</span><span class="mi">10</span><span class="p">):</span>
        <span class="s">"""滚动加载更多内容"""</span>
        <span class="n">last_height</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">driver</span><span class="p">.</span><span class="n">execute_script</span><span class="p">(</span><span class="s">"return document.body.scrollHeight"</span><span class="p">)</span>
        <span class="n">scrolls</span> <span class="o">=</span> <span class="mi">0</span>
        
        <span class="k">while</span> <span class="n">scrolls</span> <span class="o">&lt;</span> <span class="n">max_scrolls</span><span class="p">:</span>
            <span class="c1"># 滚动到页面底部
</span>            <span class="bp">self</span><span class="p">.</span><span class="n">driver</span><span class="p">.</span><span class="n">execute_script</span><span class="p">(</span><span class="s">"window.scrollTo(0, document.body.scrollHeight);"</span><span class="p">)</span>
            
            <span class="c1"># 等待新内容加载
</span>            <span class="n">time</span><span class="p">.</span><span class="n">sleep</span><span class="p">(</span><span class="n">scroll_pause_time</span><span class="p">)</span>
            
            <span class="c1"># 检查是否有新内容
</span>            <span class="n">new_height</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">driver</span><span class="p">.</span><span class="n">execute_script</span><span class="p">(</span><span class="s">"return document.body.scrollHeight"</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">new_height</span> <span class="o">==</span> <span class="n">last_height</span><span class="p">:</span>
                <span class="k">break</span>
            
            <span class="n">last_height</span> <span class="o">=</span> <span class="n">new_height</span>
            <span class="n">scrolls</span> <span class="o">+=</span> <span class="mi">1</span>
    
    <span class="k">def</span> <span class="nf">extract_json_data</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">script_selector</span><span class="p">):</span>
        <span class="s">"""从页面中提取JSON数据"""</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">script_element</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">driver</span><span class="p">.</span><span class="n">find_element</span><span class="p">(</span><span class="n">By</span><span class="p">.</span><span class="n">CSS_SELECTOR</span><span class="p">,</span> <span class="n">script_selector</span><span class="p">)</span>
            <span class="n">script_content</span> <span class="o">=</span> <span class="n">script_element</span><span class="p">.</span><span class="n">get_attribute</span><span class="p">(</span><span class="s">'innerHTML'</span><span class="p">)</span>
            <span class="k">return</span> <span class="n">json</span><span class="p">.</span><span class="n">loads</span><span class="p">(</span><span class="n">script_content</span><span class="p">)</span>
        <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
            <span class="n">logger</span><span class="p">.</span><span class="n">error</span><span class="p">(</span><span class="sa">f</span><span class="s">"提取JSON数据失败: </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
            <span class="k">return</span> <span class="bp">None</span>

<span class="c1"># 使用示例：爬取动态加载的商品列表
</span><span class="k">def</span> <span class="nf">crawl_dynamic_products</span><span class="p">():</span>
    <span class="k">with</span> <span class="n">JavaScriptCrawler</span><span class="p">()</span> <span class="k">as</span> <span class="n">crawler</span><span class="p">:</span>
        <span class="n">url</span> <span class="o">=</span> <span class="s">'https://example-shop.com/products'</span>
        
        <span class="c1"># 获取初始页面
</span>        <span class="n">html</span> <span class="o">=</span> <span class="n">crawler</span><span class="p">.</span><span class="n">get_page</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">wait_element</span><span class="o">=</span><span class="s">'.product-item'</span><span class="p">)</span>
        
        <span class="c1"># 滚动加载更多商品
</span>        <span class="n">crawler</span><span class="p">.</span><span class="n">scroll_to_load_more</span><span class="p">()</span>
        
        <span class="c1"># 获取最终页面内容
</span>        <span class="n">soup</span> <span class="o">=</span> <span class="n">BeautifulSoup</span><span class="p">(</span><span class="n">crawler</span><span class="p">.</span><span class="n">driver</span><span class="p">.</span><span class="n">page_source</span><span class="p">,</span> <span class="s">'html.parser'</span><span class="p">)</span>
        
        <span class="c1"># 提取商品信息
</span>        <span class="n">products</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">soup</span><span class="p">.</span><span class="n">select</span><span class="p">(</span><span class="s">'.product-item'</span><span class="p">):</span>
            <span class="n">product</span> <span class="o">=</span> <span class="p">{</span>
                <span class="s">'name'</span><span class="p">:</span> <span class="n">item</span><span class="p">.</span><span class="n">select_one</span><span class="p">(</span><span class="s">'.product-name'</span><span class="p">).</span><span class="n">get_text</span><span class="p">().</span><span class="n">strip</span><span class="p">(),</span>
                <span class="s">'price'</span><span class="p">:</span> <span class="n">item</span><span class="p">.</span><span class="n">select_one</span><span class="p">(</span><span class="s">'.price'</span><span class="p">).</span><span class="n">get_text</span><span class="p">().</span><span class="n">strip</span><span class="p">(),</span>
                <span class="s">'image'</span><span class="p">:</span> <span class="n">item</span><span class="p">.</span><span class="n">select_one</span><span class="p">(</span><span class="s">'img'</span><span class="p">)[</span><span class="s">'src'</span><span class="p">],</span>
                <span class="s">'link'</span><span class="p">:</span> <span class="n">item</span><span class="p">.</span><span class="n">select_one</span><span class="p">(</span><span class="s">'a'</span><span class="p">)[</span><span class="s">'href'</span><span class="p">]</span>
            <span class="p">}</span>
            <span class="n">products</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">product</span><span class="p">)</span>
        
        <span class="k">return</span> <span class="n">products</span>
</code></pre></div></div>

<h2 id="高级爬虫框架scrapy">高级爬虫框架：Scrapy</h2>

<h3 id="1-scrapy项目结构">1. Scrapy项目结构</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 创建Scrapy项目
# scrapy startproject myspider
</span>
<span class="c1"># spiders/news_spider.py
</span><span class="kn">import</span> <span class="nn">scrapy</span>
<span class="kn">from</span> <span class="nn">scrapy</span> <span class="kn">import</span> <span class="n">Request</span>
<span class="kn">from</span> <span class="nn">urllib.parse</span> <span class="kn">import</span> <span class="n">urljoin</span>
<span class="kn">import</span> <span class="nn">json</span>

<span class="k">class</span> <span class="nc">NewsSpider</span><span class="p">(</span><span class="n">scrapy</span><span class="p">.</span><span class="n">Spider</span><span class="p">):</span>
    <span class="n">name</span> <span class="o">=</span> <span class="s">'news'</span>
    <span class="n">allowed_domains</span> <span class="o">=</span> <span class="p">[</span><span class="s">'example-news.com'</span><span class="p">]</span>
    <span class="n">start_urls</span> <span class="o">=</span> <span class="p">[</span><span class="s">'https://example-news.com'</span><span class="p">]</span>
    
    <span class="n">custom_settings</span> <span class="o">=</span> <span class="p">{</span>
        <span class="s">'ROBOTSTXT_OBEY'</span><span class="p">:</span> <span class="bp">True</span><span class="p">,</span>
        <span class="s">'DOWNLOAD_DELAY'</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
        <span class="s">'CONCURRENT_REQUESTS'</span><span class="p">:</span> <span class="mi">16</span><span class="p">,</span>
        <span class="s">'COOKIES_ENABLED'</span><span class="p">:</span> <span class="bp">True</span><span class="p">,</span>
        <span class="s">'TELNETCONSOLE_ENABLED'</span><span class="p">:</span> <span class="bp">False</span><span class="p">,</span>
    <span class="p">}</span>
    
    <span class="k">def</span> <span class="nf">parse</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">response</span><span class="p">):</span>
        <span class="s">"""解析首页，提取文章链接"""</span>
        <span class="c1"># 提取文章链接
</span>        <span class="n">article_links</span> <span class="o">=</span> <span class="n">response</span><span class="p">.</span><span class="n">css</span><span class="p">(</span><span class="s">'.article-list a::attr(href)'</span><span class="p">).</span><span class="n">getall</span><span class="p">()</span>
        
        <span class="k">for</span> <span class="n">link</span> <span class="ow">in</span> <span class="n">article_links</span><span class="p">:</span>
            <span class="n">absolute_url</span> <span class="o">=</span> <span class="n">urljoin</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="n">url</span><span class="p">,</span> <span class="n">link</span><span class="p">)</span>
            <span class="k">yield</span> <span class="n">Request</span><span class="p">(</span>
                <span class="n">url</span><span class="o">=</span><span class="n">absolute_url</span><span class="p">,</span>
                <span class="n">callback</span><span class="o">=</span><span class="bp">self</span><span class="p">.</span><span class="n">parse_article</span><span class="p">,</span>
                <span class="n">meta</span><span class="o">=</span><span class="p">{</span><span class="s">'dont_cache'</span><span class="p">:</span> <span class="bp">True</span><span class="p">}</span>
            <span class="p">)</span>
        
        <span class="c1"># 处理分页
</span>        <span class="n">next_page</span> <span class="o">=</span> <span class="n">response</span><span class="p">.</span><span class="n">css</span><span class="p">(</span><span class="s">'.pagination .next::attr(href)'</span><span class="p">).</span><span class="n">get</span><span class="p">()</span>
        <span class="k">if</span> <span class="n">next_page</span><span class="p">:</span>
            <span class="k">yield</span> <span class="n">Request</span><span class="p">(</span><span class="n">url</span><span class="o">=</span><span class="n">urljoin</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="n">url</span><span class="p">,</span> <span class="n">next_page</span><span class="p">),</span> <span class="n">callback</span><span class="o">=</span><span class="bp">self</span><span class="p">.</span><span class="n">parse</span><span class="p">)</span>
    
    <span class="k">def</span> <span class="nf">parse_article</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">response</span><span class="p">):</span>
        <span class="s">"""解析文章页面"""</span>
        <span class="c1"># 使用CSS选择器提取数据
</span>        <span class="n">title</span> <span class="o">=</span> <span class="n">response</span><span class="p">.</span><span class="n">css</span><span class="p">(</span><span class="s">'h1::text'</span><span class="p">).</span><span class="n">get</span><span class="p">()</span>
        <span class="n">content</span> <span class="o">=</span> <span class="s">' '</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="n">css</span><span class="p">(</span><span class="s">'.article-content p::text'</span><span class="p">).</span><span class="n">getall</span><span class="p">())</span>
        <span class="n">author</span> <span class="o">=</span> <span class="n">response</span><span class="p">.</span><span class="n">css</span><span class="p">(</span><span class="s">'.author::text'</span><span class="p">).</span><span class="n">get</span><span class="p">()</span>
        <span class="n">publish_time</span> <span class="o">=</span> <span class="n">response</span><span class="p">.</span><span class="n">css</span><span class="p">(</span><span class="s">'time::attr(datetime)'</span><span class="p">).</span><span class="n">get</span><span class="p">()</span>
        
        <span class="c1"># 使用XPath提取数据
</span>        <span class="n">tags</span> <span class="o">=</span> <span class="n">response</span><span class="p">.</span><span class="n">xpath</span><span class="p">(</span><span class="s">'//div[@class="tags"]/a/text()'</span><span class="p">).</span><span class="n">getall</span><span class="p">()</span>
        
        <span class="k">yield</span> <span class="p">{</span>
            <span class="s">'url'</span><span class="p">:</span> <span class="n">response</span><span class="p">.</span><span class="n">url</span><span class="p">,</span>
            <span class="s">'title'</span><span class="p">:</span> <span class="n">title</span><span class="p">.</span><span class="n">strip</span><span class="p">()</span> <span class="k">if</span> <span class="n">title</span> <span class="k">else</span> <span class="bp">None</span><span class="p">,</span>
            <span class="s">'content'</span><span class="p">:</span> <span class="n">content</span><span class="p">.</span><span class="n">strip</span><span class="p">()</span> <span class="k">if</span> <span class="n">content</span> <span class="k">else</span> <span class="bp">None</span><span class="p">,</span>
            <span class="s">'author'</span><span class="p">:</span> <span class="n">author</span><span class="p">.</span><span class="n">strip</span><span class="p">()</span> <span class="k">if</span> <span class="n">author</span> <span class="k">else</span> <span class="bp">None</span><span class="p">,</span>
            <span class="s">'publish_time'</span><span class="p">:</span> <span class="n">publish_time</span><span class="p">,</span>
            <span class="s">'tags'</span><span class="p">:</span> <span class="n">tags</span><span class="p">,</span>
        <span class="p">}</span>

<span class="c1"># items.py - 定义数据结构
</span><span class="kn">import</span> <span class="nn">scrapy</span>

<span class="k">class</span> <span class="nc">ArticleItem</span><span class="p">(</span><span class="n">scrapy</span><span class="p">.</span><span class="n">Item</span><span class="p">):</span>
    <span class="n">url</span> <span class="o">=</span> <span class="n">scrapy</span><span class="p">.</span><span class="n">Field</span><span class="p">()</span>
    <span class="n">title</span> <span class="o">=</span> <span class="n">scrapy</span><span class="p">.</span><span class="n">Field</span><span class="p">()</span>
    <span class="n">content</span> <span class="o">=</span> <span class="n">scrapy</span><span class="p">.</span><span class="n">Field</span><span class="p">()</span>
    <span class="n">author</span> <span class="o">=</span> <span class="n">scrapy</span><span class="p">.</span><span class="n">Field</span><span class="p">()</span>
    <span class="n">publish_time</span> <span class="o">=</span> <span class="n">scrapy</span><span class="p">.</span><span class="n">Field</span><span class="p">()</span>
    <span class="n">tags</span> <span class="o">=</span> <span class="n">scrapy</span><span class="p">.</span><span class="n">Field</span><span class="p">()</span>

<span class="c1"># pipelines.py - 数据处理管道
</span><span class="kn">import</span> <span class="nn">json</span>
<span class="kn">import</span> <span class="nn">mysql.connector</span>
<span class="kn">from</span> <span class="nn">itemadapter</span> <span class="kn">import</span> <span class="n">ItemAdapter</span>

<span class="k">class</span> <span class="nc">JsonWriterPipeline</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">open_spider</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">spider</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="nb">file</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="n">spider</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s">_items.json'</span><span class="p">,</span> <span class="s">'w'</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s">'utf-8'</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">close_spider</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">spider</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="nb">file</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">process_item</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">item</span><span class="p">,</span> <span class="n">spider</span><span class="p">):</span>
        <span class="n">line</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">ItemAdapter</span><span class="p">(</span><span class="n">item</span><span class="p">).</span><span class="n">asdict</span><span class="p">(),</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span> <span class="o">+</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span>
        <span class="bp">self</span><span class="p">.</span><span class="nb">file</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="n">line</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">item</span>

<span class="k">class</span> <span class="nc">DatabasePipeline</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">mysql_host</span><span class="p">,</span> <span class="n">mysql_db</span><span class="p">,</span> <span class="n">mysql_user</span><span class="p">,</span> <span class="n">mysql_password</span><span class="p">,</span> <span class="n">mysql_port</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">mysql_host</span> <span class="o">=</span> <span class="n">mysql_host</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">mysql_db</span> <span class="o">=</span> <span class="n">mysql_db</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">mysql_user</span> <span class="o">=</span> <span class="n">mysql_user</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">mysql_password</span> <span class="o">=</span> <span class="n">mysql_password</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">mysql_port</span> <span class="o">=</span> <span class="n">mysql_port</span>

    <span class="o">@</span><span class="nb">classmethod</span>
    <span class="k">def</span> <span class="nf">from_crawler</span><span class="p">(</span><span class="n">cls</span><span class="p">,</span> <span class="n">crawler</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">cls</span><span class="p">(</span>
            <span class="n">mysql_host</span><span class="o">=</span><span class="n">crawler</span><span class="p">.</span><span class="n">settings</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s">"MYSQL_HOST"</span><span class="p">),</span>
            <span class="n">mysql_db</span><span class="o">=</span><span class="n">crawler</span><span class="p">.</span><span class="n">settings</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s">"MYSQL_DATABASE"</span><span class="p">),</span>
            <span class="n">mysql_user</span><span class="o">=</span><span class="n">crawler</span><span class="p">.</span><span class="n">settings</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s">"MYSQL_USER"</span><span class="p">),</span>
            <span class="n">mysql_password</span><span class="o">=</span><span class="n">crawler</span><span class="p">.</span><span class="n">settings</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s">"MYSQL_PASSWORD"</span><span class="p">),</span>
            <span class="n">mysql_port</span><span class="o">=</span><span class="n">crawler</span><span class="p">.</span><span class="n">settings</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s">"MYSQL_PORT"</span><span class="p">),</span>
        <span class="p">)</span>

    <span class="k">def</span> <span class="nf">open_spider</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">spider</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">connection</span> <span class="o">=</span> <span class="n">mysql</span><span class="p">.</span><span class="n">connector</span><span class="p">.</span><span class="n">connect</span><span class="p">(</span>
            <span class="n">host</span><span class="o">=</span><span class="bp">self</span><span class="p">.</span><span class="n">mysql_host</span><span class="p">,</span>
            <span class="n">database</span><span class="o">=</span><span class="bp">self</span><span class="p">.</span><span class="n">mysql_db</span><span class="p">,</span>
            <span class="n">user</span><span class="o">=</span><span class="bp">self</span><span class="p">.</span><span class="n">mysql_user</span><span class="p">,</span>
            <span class="n">password</span><span class="o">=</span><span class="bp">self</span><span class="p">.</span><span class="n">mysql_password</span><span class="p">,</span>
            <span class="n">port</span><span class="o">=</span><span class="bp">self</span><span class="p">.</span><span class="n">mysql_port</span>
        <span class="p">)</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">cursor</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">connection</span><span class="p">.</span><span class="n">cursor</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">close_spider</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">spider</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">connection</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">process_item</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">item</span><span class="p">,</span> <span class="n">spider</span><span class="p">):</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">adapter</span> <span class="o">=</span> <span class="n">ItemAdapter</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>
            <span class="n">insert_sql</span> <span class="o">=</span> <span class="s">"""
                INSERT INTO articles (url, title, content, author, publish_time, tags) 
                VALUES (%s, %s, %s, %s, %s, %s)
            """</span>
            <span class="bp">self</span><span class="p">.</span><span class="n">cursor</span><span class="p">.</span><span class="n">execute</span><span class="p">(</span><span class="n">insert_sql</span><span class="p">,</span> <span class="p">(</span>
                <span class="n">adapter</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s">'url'</span><span class="p">),</span>
                <span class="n">adapter</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s">'title'</span><span class="p">),</span>
                <span class="n">adapter</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s">'content'</span><span class="p">),</span>
                <span class="n">adapter</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s">'author'</span><span class="p">),</span>
                <span class="n">adapter</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s">'publish_time'</span><span class="p">),</span>
                <span class="s">','</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">adapter</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s">'tags'</span><span class="p">,</span> <span class="p">[]))</span>
            <span class="p">))</span>
            <span class="bp">self</span><span class="p">.</span><span class="n">connection</span><span class="p">.</span><span class="n">commit</span><span class="p">()</span>
        <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
            <span class="bp">self</span><span class="p">.</span><span class="n">connection</span><span class="p">.</span><span class="n">rollback</span><span class="p">()</span>
            <span class="n">spider</span><span class="p">.</span><span class="n">logger</span><span class="p">.</span><span class="n">error</span><span class="p">(</span><span class="sa">f</span><span class="s">"数据库插入失败: </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
        
        <span class="k">return</span> <span class="n">item</span>
</code></pre></div></div>

<h3 id="2-中间件和自定义设置">2. 中间件和自定义设置</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># middlewares.py
</span><span class="kn">import</span> <span class="nn">random</span>
<span class="kn">import</span> <span class="nn">requests</span>
<span class="kn">from</span> <span class="nn">scrapy.http</span> <span class="kn">import</span> <span class="n">HtmlResponse</span>
<span class="kn">from</span> <span class="nn">scrapy.downloadermiddlewares.retry</span> <span class="kn">import</span> <span class="n">RetryMiddleware</span>

<span class="k">class</span> <span class="nc">ProxyMiddleware</span><span class="p">:</span>
    <span class="s">"""代理中间件"""</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">proxies</span> <span class="o">=</span> <span class="p">[</span>
            <span class="s">'http://proxy1:port'</span><span class="p">,</span>
            <span class="s">'http://proxy2:port'</span><span class="p">,</span>
            <span class="s">'http://proxy3:port'</span><span class="p">,</span>
        <span class="p">]</span>
    
    <span class="k">def</span> <span class="nf">process_request</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">request</span><span class="p">,</span> <span class="n">spider</span><span class="p">):</span>
        <span class="n">proxy</span> <span class="o">=</span> <span class="n">random</span><span class="p">.</span><span class="n">choice</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">proxies</span><span class="p">)</span>
        <span class="n">request</span><span class="p">.</span><span class="n">meta</span><span class="p">[</span><span class="s">'proxy'</span><span class="p">]</span> <span class="o">=</span> <span class="n">proxy</span>

<span class="k">class</span> <span class="nc">UserAgentMiddleware</span><span class="p">:</span>
    <span class="s">"""用户代理中间件"""</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">user_agents</span> <span class="o">=</span> <span class="p">[</span>
            <span class="s">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'</span><span class="p">,</span>
            <span class="s">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36'</span><span class="p">,</span>
            <span class="s">'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36'</span><span class="p">,</span>
        <span class="p">]</span>
    
    <span class="k">def</span> <span class="nf">process_request</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">request</span><span class="p">,</span> <span class="n">spider</span><span class="p">):</span>
        <span class="n">ua</span> <span class="o">=</span> <span class="n">random</span><span class="p">.</span><span class="n">choice</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">user_agents</span><span class="p">)</span>
        <span class="n">request</span><span class="p">.</span><span class="n">headers</span><span class="p">[</span><span class="s">'User-Agent'</span><span class="p">]</span> <span class="o">=</span> <span class="n">ua</span>

<span class="k">class</span> <span class="nc">CustomRetryMiddleware</span><span class="p">(</span><span class="n">RetryMiddleware</span><span class="p">):</span>
    <span class="s">"""自定义重试中间件"""</span>
    <span class="k">def</span> <span class="nf">process_response</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">request</span><span class="p">,</span> <span class="n">response</span><span class="p">,</span> <span class="n">spider</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">response</span><span class="p">.</span><span class="n">status</span> <span class="ow">in</span> <span class="p">[</span><span class="mi">403</span><span class="p">,</span> <span class="mi">429</span><span class="p">,</span> <span class="mi">503</span><span class="p">]:</span>
            <span class="n">spider</span><span class="p">.</span><span class="n">logger</span><span class="p">.</span><span class="n">warning</span><span class="p">(</span><span class="sa">f</span><span class="s">"遇到反爬虫 </span><span class="si">{</span><span class="n">response</span><span class="p">.</span><span class="n">status</span><span class="si">}</span><span class="s">，准备重试"</span><span class="p">)</span>
            <span class="k">return</span> <span class="bp">self</span><span class="p">.</span><span class="n">_retry</span><span class="p">(</span><span class="n">request</span><span class="p">,</span> <span class="sa">f</span><span class="s">"HTTP </span><span class="si">{</span><span class="n">response</span><span class="p">.</span><span class="n">status</span><span class="si">}</span><span class="s">"</span><span class="p">,</span> <span class="n">spider</span><span class="p">)</span>
        
        <span class="k">return</span> <span class="n">response</span>

<span class="c1"># settings.py
</span><span class="n">BOT_NAME</span> <span class="o">=</span> <span class="s">'myspider'</span>

<span class="n">SPIDER_MODULES</span> <span class="o">=</span> <span class="p">[</span><span class="s">'myspider.spiders'</span><span class="p">]</span>
<span class="n">NEWSPIDER_MODULE</span> <span class="o">=</span> <span class="s">'myspider.spiders'</span>

<span class="c1"># 遵守robots.txt
</span><span class="n">ROBOTSTXT_OBEY</span> <span class="o">=</span> <span class="bp">True</span>

<span class="c1"># 并发设置
</span><span class="n">CONCURRENT_REQUESTS</span> <span class="o">=</span> <span class="mi">32</span>
<span class="n">CONCURRENT_REQUESTS_PER_DOMAIN</span> <span class="o">=</span> <span class="mi">16</span>

<span class="c1"># 下载延迟
</span><span class="n">DOWNLOAD_DELAY</span> <span class="o">=</span> <span class="mi">3</span>
<span class="n">RANDOMIZE_DOWNLOAD_DELAY</span> <span class="o">=</span> <span class="mf">0.5</span>

<span class="c1"># 中间件配置
</span><span class="n">DOWNLOADER_MIDDLEWARES</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s">'myspider.middlewares.ProxyMiddleware'</span><span class="p">:</span> <span class="mi">350</span><span class="p">,</span>
    <span class="s">'myspider.middlewares.UserAgentMiddleware'</span><span class="p">:</span> <span class="mi">400</span><span class="p">,</span>
    <span class="s">'myspider.middlewares.CustomRetryMiddleware'</span><span class="p">:</span> <span class="mi">550</span><span class="p">,</span>
<span class="p">}</span>

<span class="c1"># 管道配置
</span><span class="n">ITEM_PIPELINES</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s">'myspider.pipelines.JsonWriterPipeline'</span><span class="p">:</span> <span class="mi">300</span><span class="p">,</span>
    <span class="s">'myspider.pipelines.DatabasePipeline'</span><span class="p">:</span> <span class="mi">400</span><span class="p">,</span>
<span class="p">}</span>

<span class="c1"># 数据库配置
</span><span class="n">MYSQL_HOST</span> <span class="o">=</span> <span class="s">'localhost'</span>
<span class="n">MYSQL_DATABASE</span> <span class="o">=</span> <span class="s">'crawler_db'</span>
<span class="n">MYSQL_USER</span> <span class="o">=</span> <span class="s">'user'</span>
<span class="n">MYSQL_PASSWORD</span> <span class="o">=</span> <span class="s">'password'</span>
<span class="n">MYSQL_PORT</span> <span class="o">=</span> <span class="mi">3306</span>

<span class="c1"># 缓存配置
</span><span class="n">HTTPCACHE_ENABLED</span> <span class="o">=</span> <span class="bp">True</span>
<span class="n">HTTPCACHE_EXPIRATION_SECS</span> <span class="o">=</span> <span class="mi">3600</span>
</code></pre></div></div>

<h2 id="反爬虫对抗策略">反爬虫对抗策略</h2>

<h3 id="1-请求头伪装">1. 请求头伪装</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">random</span>
<span class="kn">import</span> <span class="nn">time</span>
<span class="kn">from</span> <span class="nn">fake_useragent</span> <span class="kn">import</span> <span class="n">UserAgent</span>

<span class="k">class</span> <span class="nc">AntiDetectionCrawler</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">ua</span> <span class="o">=</span> <span class="n">UserAgent</span><span class="p">()</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">session</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="n">Session</span><span class="p">()</span>
        
    <span class="k">def</span> <span class="nf">get_random_headers</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="s">"""生成随机请求头"""</span>
        <span class="n">headers</span> <span class="o">=</span> <span class="p">{</span>
            <span class="s">'User-Agent'</span><span class="p">:</span> <span class="bp">self</span><span class="p">.</span><span class="n">ua</span><span class="p">.</span><span class="n">random</span><span class="p">,</span>
            <span class="s">'Accept'</span><span class="p">:</span> <span class="s">'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'</span><span class="p">,</span>
            <span class="s">'Accept-Language'</span><span class="p">:</span> <span class="n">random</span><span class="p">.</span><span class="n">choice</span><span class="p">([</span><span class="s">'en-US,en;q=0.5'</span><span class="p">,</span> <span class="s">'zh-CN,zh;q=0.9'</span><span class="p">]),</span>
            <span class="s">'Accept-Encoding'</span><span class="p">:</span> <span class="s">'gzip, deflate'</span><span class="p">,</span>
            <span class="s">'DNT'</span><span class="p">:</span> <span class="s">'1'</span><span class="p">,</span>
            <span class="s">'Connection'</span><span class="p">:</span> <span class="s">'keep-alive'</span><span class="p">,</span>
            <span class="s">'Upgrade-Insecure-Requests'</span><span class="p">:</span> <span class="s">'1'</span><span class="p">,</span>
            <span class="s">'Cache-Control'</span><span class="p">:</span> <span class="n">random</span><span class="p">.</span><span class="n">choice</span><span class="p">([</span><span class="s">'no-cache'</span><span class="p">,</span> <span class="s">'max-age=0'</span><span class="p">]),</span>
        <span class="p">}</span>
        
        <span class="c1"># 随机添加一些可选头部
</span>        <span class="n">optional_headers</span> <span class="o">=</span> <span class="p">{</span>
            <span class="s">'Referer'</span><span class="p">:</span> <span class="s">'https://www.google.com/'</span><span class="p">,</span>
            <span class="s">'X-Requested-With'</span><span class="p">:</span> <span class="s">'XMLHttpRequest'</span><span class="p">,</span>
            <span class="s">'Pragma'</span><span class="p">:</span> <span class="s">'no-cache'</span><span class="p">,</span>
        <span class="p">}</span>
        
        <span class="k">for</span> <span class="n">key</span><span class="p">,</span> <span class="n">value</span> <span class="ow">in</span> <span class="n">optional_headers</span><span class="p">.</span><span class="n">items</span><span class="p">():</span>
            <span class="k">if</span> <span class="n">random</span><span class="p">.</span><span class="n">random</span><span class="p">()</span> <span class="o">&gt;</span> <span class="mf">0.5</span><span class="p">:</span>
                <span class="n">headers</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="o">=</span> <span class="n">value</span>
        
        <span class="k">return</span> <span class="n">headers</span>
    
    <span class="k">def</span> <span class="nf">smart_delay</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">base_delay</span><span class="o">=</span><span class="mi">2</span><span class="p">):</span>
        <span class="s">"""智能延迟"""</span>
        <span class="c1"># 使用正态分布生成延迟时间
</span>        <span class="n">delay</span> <span class="o">=</span> <span class="n">random</span><span class="p">.</span><span class="n">normalvariate</span><span class="p">(</span><span class="n">base_delay</span><span class="p">,</span> <span class="n">base_delay</span> <span class="o">*</span> <span class="mf">0.3</span><span class="p">)</span>
        <span class="n">delay</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">delay</span><span class="p">)</span>  <span class="c1"># 确保延迟至少1秒
</span>        <span class="n">time</span><span class="p">.</span><span class="n">sleep</span><span class="p">(</span><span class="n">delay</span><span class="p">)</span>
    
    <span class="k">def</span> <span class="nf">get_page_with_retry</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">url</span><span class="p">,</span> <span class="n">max_retries</span><span class="o">=</span><span class="mi">3</span><span class="p">):</span>
        <span class="s">"""带重试的页面获取"""</span>
        <span class="k">for</span> <span class="n">attempt</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">max_retries</span><span class="p">):</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="n">headers</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">get_random_headers</span><span class="p">()</span>
                <span class="n">response</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">session</span><span class="p">.</span><span class="n">get</span><span class="p">(</span>
                    <span class="n">url</span><span class="p">,</span> 
                    <span class="n">headers</span><span class="o">=</span><span class="n">headers</span><span class="p">,</span>
                    <span class="n">timeout</span><span class="o">=</span><span class="mi">30</span><span class="p">,</span>
                    <span class="n">allow_redirects</span><span class="o">=</span><span class="bp">True</span>
                <span class="p">)</span>
                
                <span class="k">if</span> <span class="n">response</span><span class="p">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">200</span><span class="p">:</span>
                    <span class="k">return</span> <span class="n">response</span>
                <span class="k">elif</span> <span class="n">response</span><span class="p">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">429</span><span class="p">:</span>
                    <span class="c1"># 请求过快，增加延迟
</span>                    <span class="n">time</span><span class="p">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">60</span> <span class="o">*</span> <span class="p">(</span><span class="n">attempt</span> <span class="o">+</span> <span class="mi">1</span><span class="p">))</span>
                <span class="k">elif</span> <span class="n">response</span><span class="p">.</span><span class="n">status_code</span> <span class="ow">in</span> <span class="p">[</span><span class="mi">403</span><span class="p">,</span> <span class="mi">503</span><span class="p">]:</span>
                    <span class="c1"># 可能被封，更换策略
</span>                    <span class="bp">self</span><span class="p">.</span><span class="n">session</span><span class="p">.</span><span class="n">cookies</span><span class="p">.</span><span class="n">clear</span><span class="p">()</span>
                    <span class="n">time</span><span class="p">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">30</span> <span class="o">*</span> <span class="p">(</span><span class="n">attempt</span> <span class="o">+</span> <span class="mi">1</span><span class="p">))</span>
                
            <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
                <span class="n">logger</span><span class="p">.</span><span class="n">warning</span><span class="p">(</span><span class="sa">f</span><span class="s">"请求失败 </span><span class="si">{</span><span class="n">attempt</span> <span class="o">+</span> <span class="mi">1</span><span class="si">}</span><span class="s">/</span><span class="si">{</span><span class="n">max_retries</span><span class="si">}</span><span class="s">: </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
                <span class="n">time</span><span class="p">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">10</span> <span class="o">*</span> <span class="p">(</span><span class="n">attempt</span> <span class="o">+</span> <span class="mi">1</span><span class="p">))</span>
        
        <span class="k">return</span> <span class="bp">None</span>
</code></pre></div></div>

<h3 id="2-验证码处理">2. 验证码处理</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">cv2</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">from</span> <span class="nn">PIL</span> <span class="kn">import</span> <span class="n">Image</span>
<span class="kn">import</span> <span class="nn">pytesseract</span>
<span class="kn">import</span> <span class="nn">requests</span>

<span class="k">class</span> <span class="nc">CaptchaHandler</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="c1"># 配置tesseract路径（Windows需要）
</span>        <span class="c1"># pytesseract.pytesseract.tesseract_cmd = r'C:\Program Files\Tesseract-OCR\tesseract.exe'
</span>        <span class="k">pass</span>
    
    <span class="k">def</span> <span class="nf">download_captcha</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">captcha_url</span><span class="p">,</span> <span class="n">session</span><span class="p">):</span>
        <span class="s">"""下载验证码图片"""</span>
        <span class="n">response</span> <span class="o">=</span> <span class="n">session</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="n">captcha_url</span><span class="p">)</span>
        <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">'captcha.png'</span><span class="p">,</span> <span class="s">'wb'</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
            <span class="n">f</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="n">content</span><span class="p">)</span>
        <span class="k">return</span> <span class="s">'captcha.png'</span>
    
    <span class="k">def</span> <span class="nf">preprocess_image</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">image_path</span><span class="p">):</span>
        <span class="s">"""预处理验证码图片"""</span>
        <span class="c1"># 读取图片
</span>        <span class="n">image</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="n">imread</span><span class="p">(</span><span class="n">image_path</span><span class="p">)</span>
        
        <span class="c1"># 转为灰度图
</span>        <span class="n">gray</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="n">cvtColor</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="n">cv2</span><span class="p">.</span><span class="n">COLOR_BGR2GRAY</span><span class="p">)</span>
        
        <span class="c1"># 降噪
</span>        <span class="n">denoised</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="n">medianBlur</span><span class="p">(</span><span class="n">gray</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
        
        <span class="c1"># 二值化
</span>        <span class="n">_</span><span class="p">,</span> <span class="n">binary</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="n">threshold</span><span class="p">(</span><span class="n">denoised</span><span class="p">,</span> <span class="mi">127</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> <span class="n">cv2</span><span class="p">.</span><span class="n">THRESH_BINARY</span><span class="p">)</span>
        
        <span class="c1"># 形态学操作去除噪点
</span>        <span class="n">kernel</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">ones</span><span class="p">((</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span> <span class="n">np</span><span class="p">.</span><span class="n">uint8</span><span class="p">)</span>
        <span class="n">cleaned</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="n">morphologyEx</span><span class="p">(</span><span class="n">binary</span><span class="p">,</span> <span class="n">cv2</span><span class="p">.</span><span class="n">MORPH_OPEN</span><span class="p">,</span> <span class="n">kernel</span><span class="p">)</span>
        
        <span class="c1"># 保存预处理后的图片
</span>        <span class="n">processed_path</span> <span class="o">=</span> <span class="s">'captcha_processed.png'</span>
        <span class="n">cv2</span><span class="p">.</span><span class="n">imwrite</span><span class="p">(</span><span class="n">processed_path</span><span class="p">,</span> <span class="n">cleaned</span><span class="p">)</span>
        
        <span class="k">return</span> <span class="n">processed_path</span>
    
    <span class="k">def</span> <span class="nf">recognize_captcha</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">image_path</span><span class="p">):</span>
        <span class="s">"""识别验证码"""</span>
        <span class="c1"># 预处理图片
</span>        <span class="n">processed_path</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">preprocess_image</span><span class="p">(</span><span class="n">image_path</span><span class="p">)</span>
        
        <span class="c1"># 使用tesseract识别
</span>        <span class="k">try</span><span class="p">:</span>
            <span class="c1"># 配置OCR参数
</span>            <span class="n">config</span> <span class="o">=</span> <span class="s">'--psm 8 -c tessedit_char_whitelist=0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'</span>
            <span class="n">text</span> <span class="o">=</span> <span class="n">pytesseract</span><span class="p">.</span><span class="n">image_to_string</span><span class="p">(</span>
                <span class="n">Image</span><span class="p">.</span><span class="nb">open</span><span class="p">(</span><span class="n">processed_path</span><span class="p">),</span> 
                <span class="n">config</span><span class="o">=</span><span class="n">config</span>
            <span class="p">).</span><span class="n">strip</span><span class="p">()</span>
            <span class="k">return</span> <span class="n">text</span>
        <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
            <span class="n">logger</span><span class="p">.</span><span class="n">error</span><span class="p">(</span><span class="sa">f</span><span class="s">"验证码识别失败: </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
            <span class="k">return</span> <span class="bp">None</span>
    
    <span class="k">def</span> <span class="nf">solve_captcha_with_api</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">image_path</span><span class="p">,</span> <span class="n">api_key</span><span class="p">):</span>
        <span class="s">"""使用第三方API识别验证码"""</span>
        <span class="c1"># 这里以2captcha为例
</span>        <span class="k">try</span><span class="p">:</span>
            <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">image_path</span><span class="p">,</span> <span class="s">'rb'</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
                <span class="n">files</span> <span class="o">=</span> <span class="p">{</span><span class="s">'file'</span><span class="p">:</span> <span class="n">f</span><span class="p">}</span>
                <span class="n">data</span> <span class="o">=</span> <span class="p">{</span>
                    <span class="s">'key'</span><span class="p">:</span> <span class="n">api_key</span><span class="p">,</span>
                    <span class="s">'method'</span><span class="p">:</span> <span class="s">'post'</span>
                <span class="p">}</span>
                
                <span class="c1"># 提交验证码
</span>                <span class="n">response</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="n">post</span><span class="p">(</span>
                    <span class="s">'http://2captcha.com/in.php'</span><span class="p">,</span>
                    <span class="n">files</span><span class="o">=</span><span class="n">files</span><span class="p">,</span>
                    <span class="n">data</span><span class="o">=</span><span class="n">data</span>
                <span class="p">)</span>
                
                <span class="k">if</span> <span class="n">response</span><span class="p">.</span><span class="n">text</span><span class="p">.</span><span class="n">startswith</span><span class="p">(</span><span class="s">'OK|'</span><span class="p">):</span>
                    <span class="n">captcha_id</span> <span class="o">=</span> <span class="n">response</span><span class="p">.</span><span class="n">text</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="s">'|'</span><span class="p">)[</span><span class="mi">1</span><span class="p">]</span>
                    
                    <span class="c1"># 等待识别结果
</span>                    <span class="n">time</span><span class="p">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
                    
                    <span class="n">result_response</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="n">get</span><span class="p">(</span>
                        <span class="sa">f</span><span class="s">'http://2captcha.com/res.php?key=</span><span class="si">{</span><span class="n">api_key</span><span class="si">}</span><span class="s">&amp;action=get&amp;id=</span><span class="si">{</span><span class="n">captcha_id</span><span class="si">}</span><span class="s">'</span>
                    <span class="p">)</span>
                    
                    <span class="k">if</span> <span class="n">result_response</span><span class="p">.</span><span class="n">text</span><span class="p">.</span><span class="n">startswith</span><span class="p">(</span><span class="s">'OK|'</span><span class="p">):</span>
                        <span class="k">return</span> <span class="n">result_response</span><span class="p">.</span><span class="n">text</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="s">'|'</span><span class="p">)[</span><span class="mi">1</span><span class="p">]</span>
                    
        <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
            <span class="n">logger</span><span class="p">.</span><span class="n">error</span><span class="p">(</span><span class="sa">f</span><span class="s">"API识别验证码失败: </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
        
        <span class="k">return</span> <span class="bp">None</span>

<span class="c1"># 使用示例
</span><span class="k">def</span> <span class="nf">handle_login_with_captcha</span><span class="p">():</span>
    <span class="n">crawler</span> <span class="o">=</span> <span class="n">AntiDetectionCrawler</span><span class="p">()</span>
    <span class="n">captcha_handler</span> <span class="o">=</span> <span class="n">CaptchaHandler</span><span class="p">()</span>
    
    <span class="c1"># 获取登录页面
</span>    <span class="n">login_url</span> <span class="o">=</span> <span class="s">'https://example.com/login'</span>
    <span class="n">response</span> <span class="o">=</span> <span class="n">crawler</span><span class="p">.</span><span class="n">get_page_with_retry</span><span class="p">(</span><span class="n">login_url</span><span class="p">)</span>
    
    <span class="k">if</span> <span class="n">response</span><span class="p">:</span>
        <span class="n">soup</span> <span class="o">=</span> <span class="n">BeautifulSoup</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="n">text</span><span class="p">,</span> <span class="s">'html.parser'</span><span class="p">)</span>
        
        <span class="c1"># 查找验证码图片
</span>        <span class="n">captcha_img</span> <span class="o">=</span> <span class="n">soup</span><span class="p">.</span><span class="n">find</span><span class="p">(</span><span class="s">'img'</span><span class="p">,</span> <span class="p">{</span><span class="s">'id'</span><span class="p">:</span> <span class="s">'captcha'</span><span class="p">})</span>
        <span class="k">if</span> <span class="n">captcha_img</span><span class="p">:</span>
            <span class="n">captcha_url</span> <span class="o">=</span> <span class="n">urljoin</span><span class="p">(</span><span class="n">login_url</span><span class="p">,</span> <span class="n">captcha_img</span><span class="p">[</span><span class="s">'src'</span><span class="p">])</span>
            
            <span class="c1"># 下载验证码
</span>            <span class="n">captcha_path</span> <span class="o">=</span> <span class="n">captcha_handler</span><span class="p">.</span><span class="n">download_captcha</span><span class="p">(</span><span class="n">captcha_url</span><span class="p">,</span> <span class="n">crawler</span><span class="p">.</span><span class="n">session</span><span class="p">)</span>
            
            <span class="c1"># 识别验证码
</span>            <span class="n">captcha_text</span> <span class="o">=</span> <span class="n">captcha_handler</span><span class="p">.</span><span class="n">recognize_captcha</span><span class="p">(</span><span class="n">captcha_path</span><span class="p">)</span>
            
            <span class="k">if</span> <span class="n">captcha_text</span><span class="p">:</span>
                <span class="c1"># 提交登录表单
</span>                <span class="n">login_data</span> <span class="o">=</span> <span class="p">{</span>
                    <span class="s">'username'</span><span class="p">:</span> <span class="s">'your_username'</span><span class="p">,</span>
                    <span class="s">'password'</span><span class="p">:</span> <span class="s">'your_password'</span><span class="p">,</span>
                    <span class="s">'captcha'</span><span class="p">:</span> <span class="n">captcha_text</span>
                <span class="p">}</span>
                
                <span class="n">response</span> <span class="o">=</span> <span class="n">crawler</span><span class="p">.</span><span class="n">session</span><span class="p">.</span><span class="n">post</span><span class="p">(</span><span class="n">login_url</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">login_data</span><span class="p">)</span>
                <span class="k">if</span> <span class="s">'登录成功'</span> <span class="ow">in</span> <span class="n">response</span><span class="p">.</span><span class="n">text</span><span class="p">:</span>
                    <span class="n">logger</span><span class="p">.</span><span class="n">info</span><span class="p">(</span><span class="s">"登录成功！"</span><span class="p">)</span>
                    <span class="k">return</span> <span class="bp">True</span>
    
    <span class="k">return</span> <span class="bp">False</span>
</code></pre></div></div>

<h3 id="3-分布式爬虫">3. 分布式爬虫</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 使用Scrapy-Redis实现分布式爬虫
# distributed_spider.py
</span>
<span class="kn">from</span> <span class="nn">scrapy_redis.spiders</span> <span class="kn">import</span> <span class="n">RedisSpider</span>
<span class="kn">import</span> <span class="nn">scrapy</span>

<span class="k">class</span> <span class="nc">DistributedNewsSpider</span><span class="p">(</span><span class="n">RedisSpider</span><span class="p">):</span>
    <span class="n">name</span> <span class="o">=</span> <span class="s">'distributed_news'</span>
    <span class="n">redis_key</span> <span class="o">=</span> <span class="s">'news:start_urls'</span>
    
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
        <span class="nb">super</span><span class="p">(</span><span class="n">DistributedNewsSpider</span><span class="p">,</span> <span class="bp">self</span><span class="p">).</span><span class="n">__init__</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
    
    <span class="k">def</span> <span class="nf">parse</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">response</span><span class="p">):</span>
        <span class="c1"># 提取文章链接
</span>        <span class="k">for</span> <span class="n">link</span> <span class="ow">in</span> <span class="n">response</span><span class="p">.</span><span class="n">css</span><span class="p">(</span><span class="s">'.article-list a::attr(href)'</span><span class="p">).</span><span class="n">getall</span><span class="p">():</span>
            <span class="k">yield</span> <span class="n">scrapy</span><span class="p">.</span><span class="n">Request</span><span class="p">(</span>
                <span class="n">url</span><span class="o">=</span><span class="n">response</span><span class="p">.</span><span class="n">urljoin</span><span class="p">(</span><span class="n">link</span><span class="p">),</span>
                <span class="n">callback</span><span class="o">=</span><span class="bp">self</span><span class="p">.</span><span class="n">parse_article</span>
            <span class="p">)</span>
        
        <span class="c1"># 提取下一页链接并加入队列
</span>        <span class="n">next_page</span> <span class="o">=</span> <span class="n">response</span><span class="p">.</span><span class="n">css</span><span class="p">(</span><span class="s">'.next-page::attr(href)'</span><span class="p">).</span><span class="n">get</span><span class="p">()</span>
        <span class="k">if</span> <span class="n">next_page</span><span class="p">:</span>
            <span class="k">yield</span> <span class="n">scrapy</span><span class="p">.</span><span class="n">Request</span><span class="p">(</span><span class="n">url</span><span class="o">=</span><span class="n">response</span><span class="p">.</span><span class="n">urljoin</span><span class="p">(</span><span class="n">next_page</span><span class="p">))</span>
    
    <span class="k">def</span> <span class="nf">parse_article</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">response</span><span class="p">):</span>
        <span class="k">yield</span> <span class="p">{</span>
            <span class="s">'title'</span><span class="p">:</span> <span class="n">response</span><span class="p">.</span><span class="n">css</span><span class="p">(</span><span class="s">'h1::text'</span><span class="p">).</span><span class="n">get</span><span class="p">(),</span>
            <span class="s">'content'</span><span class="p">:</span> <span class="n">response</span><span class="p">.</span><span class="n">css</span><span class="p">(</span><span class="s">'.content::text'</span><span class="p">).</span><span class="n">getall</span><span class="p">(),</span>
            <span class="s">'url'</span><span class="p">:</span> <span class="n">response</span><span class="p">.</span><span class="n">url</span><span class="p">,</span>
        <span class="p">}</span>

<span class="c1"># settings.py for distributed crawling
</span><span class="n">SCHEDULER</span> <span class="o">=</span> <span class="s">"scrapy_redis.scheduler.Scheduler"</span>
<span class="n">DUPEFILTER_CLASS</span> <span class="o">=</span> <span class="s">"scrapy_redis.dupefilter.RFPDupeFilter"</span>
<span class="n">SCHEDULER_PERSIST</span> <span class="o">=</span> <span class="bp">True</span>

<span class="n">REDIS_HOST</span> <span class="o">=</span> <span class="s">'localhost'</span>
<span class="n">REDIS_PORT</span> <span class="o">=</span> <span class="mi">6379</span>
<span class="n">REDIS_DB</span> <span class="o">=</span> <span class="mi">0</span>

<span class="c1"># 启动多个爬虫实例的脚本
</span><span class="kn">import</span> <span class="nn">redis</span>
<span class="kn">import</span> <span class="nn">subprocess</span>
<span class="kn">import</span> <span class="nn">time</span>

<span class="k">def</span> <span class="nf">start_distributed_crawling</span><span class="p">():</span>
    <span class="n">r</span> <span class="o">=</span> <span class="n">redis</span><span class="p">.</span><span class="n">Redis</span><span class="p">(</span><span class="n">host</span><span class="o">=</span><span class="s">'localhost'</span><span class="p">,</span> <span class="n">port</span><span class="o">=</span><span class="mi">6379</span><span class="p">,</span> <span class="n">db</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
    
    <span class="c1"># 添加起始URL到Redis队列
</span>    <span class="n">start_urls</span> <span class="o">=</span> <span class="p">[</span>
        <span class="s">'https://news1.com'</span><span class="p">,</span>
        <span class="s">'https://news2.com'</span><span class="p">,</span>
        <span class="s">'https://news3.com'</span><span class="p">,</span>
    <span class="p">]</span>
    
    <span class="k">for</span> <span class="n">url</span> <span class="ow">in</span> <span class="n">start_urls</span><span class="p">:</span>
        <span class="n">r</span><span class="p">.</span><span class="n">lpush</span><span class="p">(</span><span class="s">'news:start_urls'</span><span class="p">,</span> <span class="n">url</span><span class="p">)</span>
    
    <span class="c1"># 启动多个爬虫进程
</span>    <span class="n">processes</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">4</span><span class="p">):</span>  <span class="c1"># 启动4个爬虫实例
</span>        <span class="n">cmd</span> <span class="o">=</span> <span class="p">[</span><span class="s">'scrapy'</span><span class="p">,</span> <span class="s">'crawl'</span><span class="p">,</span> <span class="s">'distributed_news'</span><span class="p">]</span>
        <span class="n">process</span> <span class="o">=</span> <span class="n">subprocess</span><span class="p">.</span><span class="n">Popen</span><span class="p">(</span><span class="n">cmd</span><span class="p">)</span>
        <span class="n">processes</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">process</span><span class="p">)</span>
        <span class="n">time</span><span class="p">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>  <span class="c1"># 间隔启动
</span>    
    <span class="c1"># 等待所有进程完成
</span>    <span class="k">for</span> <span class="n">process</span> <span class="ow">in</span> <span class="n">processes</span><span class="p">:</span>
        <span class="n">process</span><span class="p">.</span><span class="n">wait</span><span class="p">()</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">'__main__'</span><span class="p">:</span>
    <span class="n">start_distributed_crawling</span><span class="p">()</span>
</code></pre></div></div>

<h2 id="数据存储和处理">数据存储和处理</h2>

<h3 id="1-多种存储方案">1. 多种存储方案</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">sqlite3</span>
<span class="kn">import</span> <span class="nn">pymongo</span>
<span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">from</span> <span class="nn">sqlalchemy</span> <span class="kn">import</span> <span class="n">create_engine</span>

<span class="k">class</span> <span class="nc">DataStorage</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">connections</span> <span class="o">=</span> <span class="p">{}</span>
    
    <span class="k">def</span> <span class="nf">save_to_sqlite</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">data</span><span class="p">,</span> <span class="n">db_path</span><span class="p">,</span> <span class="n">table_name</span><span class="p">):</span>
        <span class="s">"""保存到SQLite数据库"""</span>
        <span class="n">conn</span> <span class="o">=</span> <span class="n">sqlite3</span><span class="p">.</span><span class="n">connect</span><span class="p">(</span><span class="n">db_path</span><span class="p">)</span>
        <span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
        <span class="n">df</span><span class="p">.</span><span class="n">to_sql</span><span class="p">(</span><span class="n">table_name</span><span class="p">,</span> <span class="n">conn</span><span class="p">,</span> <span class="n">if_exists</span><span class="o">=</span><span class="s">'append'</span><span class="p">,</span> <span class="n">index</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
        <span class="n">conn</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>
    
    <span class="k">def</span> <span class="nf">save_to_mysql</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">data</span><span class="p">,</span> <span class="n">connection_string</span><span class="p">,</span> <span class="n">table_name</span><span class="p">):</span>
        <span class="s">"""保存到MySQL数据库"""</span>
        <span class="n">engine</span> <span class="o">=</span> <span class="n">create_engine</span><span class="p">(</span><span class="n">connection_string</span><span class="p">)</span>
        <span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
        <span class="n">df</span><span class="p">.</span><span class="n">to_sql</span><span class="p">(</span><span class="n">table_name</span><span class="p">,</span> <span class="n">engine</span><span class="p">,</span> <span class="n">if_exists</span><span class="o">=</span><span class="s">'append'</span><span class="p">,</span> <span class="n">index</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
    
    <span class="k">def</span> <span class="nf">save_to_mongodb</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">data</span><span class="p">,</span> <span class="n">host</span><span class="p">,</span> <span class="n">port</span><span class="p">,</span> <span class="n">db_name</span><span class="p">,</span> <span class="n">collection_name</span><span class="p">):</span>
        <span class="s">"""保存到MongoDB"""</span>
        <span class="n">client</span> <span class="o">=</span> <span class="n">pymongo</span><span class="p">.</span><span class="n">MongoClient</span><span class="p">(</span><span class="n">host</span><span class="p">,</span> <span class="n">port</span><span class="p">)</span>
        <span class="n">db</span> <span class="o">=</span> <span class="n">client</span><span class="p">[</span><span class="n">db_name</span><span class="p">]</span>
        <span class="n">collection</span> <span class="o">=</span> <span class="n">db</span><span class="p">[</span><span class="n">collection_name</span><span class="p">]</span>
        
        <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="nb">list</span><span class="p">):</span>
            <span class="n">collection</span><span class="p">.</span><span class="n">insert_many</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">collection</span><span class="p">.</span><span class="n">insert_one</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
    
    <span class="k">def</span> <span class="nf">save_to_csv</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">data</span><span class="p">,</span> <span class="n">filename</span><span class="p">):</span>
        <span class="s">"""保存到CSV文件"""</span>
        <span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
        <span class="n">df</span><span class="p">.</span><span class="n">to_csv</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="n">index</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s">'utf-8'</span><span class="p">)</span>
    
    <span class="k">def</span> <span class="nf">save_to_excel</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">data</span><span class="p">,</span> <span class="n">filename</span><span class="p">,</span> <span class="n">sheet_name</span><span class="o">=</span><span class="s">'Sheet1'</span><span class="p">):</span>
        <span class="s">"""保存到Excel文件"""</span>
        <span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
        <span class="n">df</span><span class="p">.</span><span class="n">to_excel</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="n">sheet_name</span><span class="o">=</span><span class="n">sheet_name</span><span class="p">,</span> <span class="n">index</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>

<span class="c1"># 数据清洗和处理
</span><span class="k">class</span> <span class="nc">DataProcessor</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">clean_text</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">text</span><span class="p">):</span>
        <span class="s">"""清洗文本数据"""</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">text</span><span class="p">:</span>
            <span class="k">return</span> <span class="s">''</span>
        
        <span class="c1"># 移除多余空白字符
</span>        <span class="n">text</span> <span class="o">=</span> <span class="s">' '</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">text</span><span class="p">.</span><span class="n">split</span><span class="p">())</span>
        
        <span class="c1"># 移除特殊字符
</span>        <span class="kn">import</span> <span class="nn">re</span>
        <span class="n">text</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="n">sub</span><span class="p">(</span><span class="sa">r</span><span class="s">'[^\w\s\u4e00-\u9fff]'</span><span class="p">,</span> <span class="s">''</span><span class="p">,</span> <span class="n">text</span><span class="p">)</span>
        
        <span class="k">return</span> <span class="n">text</span><span class="p">.</span><span class="n">strip</span><span class="p">()</span>
    
    <span class="k">def</span> <span class="nf">extract_numbers</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">text</span><span class="p">):</span>
        <span class="s">"""从文本中提取数字"""</span>
        <span class="kn">import</span> <span class="nn">re</span>
        <span class="n">numbers</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="n">findall</span><span class="p">(</span><span class="sa">r</span><span class="s">'\d+\.?\d*'</span><span class="p">,</span> <span class="n">text</span><span class="p">)</span>
        <span class="k">return</span> <span class="p">[</span><span class="nb">float</span><span class="p">(</span><span class="n">num</span><span class="p">)</span> <span class="k">for</span> <span class="n">num</span> <span class="ow">in</span> <span class="n">numbers</span><span class="p">]</span>
    
    <span class="k">def</span> <span class="nf">standardize_date</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">date_str</span><span class="p">):</span>
        <span class="s">"""标准化日期格式"""</span>
        <span class="kn">import</span> <span class="nn">dateparser</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">dateparser</span><span class="p">.</span><span class="n">parse</span><span class="p">(</span><span class="n">date_str</span><span class="p">)</span>
        <span class="k">except</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">None</span>
    
    <span class="k">def</span> <span class="nf">deduplicate_data</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">data</span><span class="p">,</span> <span class="n">key_field</span><span class="p">):</span>
        <span class="s">"""去重"""</span>
        <span class="n">seen</span> <span class="o">=</span> <span class="nb">set</span><span class="p">()</span>
        <span class="n">unique_data</span> <span class="o">=</span> <span class="p">[]</span>
        
        <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">data</span><span class="p">:</span>
            <span class="n">key</span> <span class="o">=</span> <span class="n">item</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="n">key_field</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">key</span> <span class="ow">and</span> <span class="n">key</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">seen</span><span class="p">:</span>
                <span class="n">seen</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
                <span class="n">unique_data</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>
        
        <span class="k">return</span> <span class="n">unique_data</span>
</code></pre></div></div>

<h2 id="监控和维护">监控和维护</h2>

<h3 id="1-爬虫监控系统">1. 爬虫监控系统</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">smtplib</span>
<span class="kn">from</span> <span class="nn">email.mime.text</span> <span class="kn">import</span> <span class="n">MimeText</span>
<span class="kn">from</span> <span class="nn">datetime</span> <span class="kn">import</span> <span class="n">datetime</span><span class="p">,</span> <span class="n">timedelta</span>
<span class="kn">import</span> <span class="nn">psutil</span>
<span class="kn">import</span> <span class="nn">logging</span>

<span class="k">class</span> <span class="nc">CrawlerMonitor</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">email_config</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">email_config</span> <span class="o">=</span> <span class="n">email_config</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">logger</span> <span class="o">=</span> <span class="n">logging</span><span class="p">.</span><span class="n">getLogger</span><span class="p">(</span><span class="n">__name__</span><span class="p">)</span>
        
    <span class="k">def</span> <span class="nf">check_crawler_health</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">process_name</span><span class="p">):</span>
        <span class="s">"""检查爬虫进程健康状态"""</span>
        <span class="k">for</span> <span class="n">process</span> <span class="ow">in</span> <span class="n">psutil</span><span class="p">.</span><span class="n">process_iter</span><span class="p">([</span><span class="s">'pid'</span><span class="p">,</span> <span class="s">'name'</span><span class="p">,</span> <span class="s">'cmdline'</span><span class="p">]):</span>
            <span class="k">if</span> <span class="n">process_name</span> <span class="ow">in</span> <span class="s">' '</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">process</span><span class="p">.</span><span class="n">info</span><span class="p">[</span><span class="s">'cmdline'</span><span class="p">]</span> <span class="ow">or</span> <span class="p">[]):</span>
                <span class="k">return</span> <span class="p">{</span>
                    <span class="s">'status'</span><span class="p">:</span> <span class="s">'running'</span><span class="p">,</span>
                    <span class="s">'pid'</span><span class="p">:</span> <span class="n">process</span><span class="p">.</span><span class="n">info</span><span class="p">[</span><span class="s">'pid'</span><span class="p">],</span>
                    <span class="s">'memory_usage'</span><span class="p">:</span> <span class="n">process</span><span class="p">.</span><span class="n">memory_info</span><span class="p">().</span><span class="n">rss</span> <span class="o">/</span> <span class="mi">1024</span> <span class="o">/</span> <span class="mi">1024</span><span class="p">,</span>  <span class="c1"># MB
</span>                    <span class="s">'cpu_percent'</span><span class="p">:</span> <span class="n">process</span><span class="p">.</span><span class="n">cpu_percent</span><span class="p">()</span>
                <span class="p">}</span>
        
        <span class="k">return</span> <span class="p">{</span><span class="s">'status'</span><span class="p">:</span> <span class="s">'stopped'</span><span class="p">}</span>
    
    <span class="k">def</span> <span class="nf">check_data_freshness</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">db_connection</span><span class="p">,</span> <span class="n">table_name</span><span class="p">,</span> <span class="n">time_field</span><span class="p">):</span>
        <span class="s">"""检查数据新鲜度"""</span>
        <span class="n">cursor</span> <span class="o">=</span> <span class="n">db_connection</span><span class="p">.</span><span class="n">cursor</span><span class="p">()</span>
        <span class="n">cursor</span><span class="p">.</span><span class="n">execute</span><span class="p">(</span><span class="sa">f</span><span class="s">"""
            SELECT MAX(</span><span class="si">{</span><span class="n">time_field</span><span class="si">}</span><span class="s">) as latest_time 
            FROM </span><span class="si">{</span><span class="n">table_name</span><span class="si">}</span><span class="s">
        """</span><span class="p">)</span>
        <span class="n">result</span> <span class="o">=</span> <span class="n">cursor</span><span class="p">.</span><span class="n">fetchone</span><span class="p">()</span>
        
        <span class="k">if</span> <span class="n">result</span> <span class="ow">and</span> <span class="n">result</span><span class="p">[</span><span class="mi">0</span><span class="p">]:</span>
            <span class="n">latest_time</span> <span class="o">=</span> <span class="n">result</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
            <span class="n">now</span> <span class="o">=</span> <span class="n">datetime</span><span class="p">.</span><span class="n">now</span><span class="p">()</span>
            
            <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">latest_time</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>
                <span class="n">latest_time</span> <span class="o">=</span> <span class="n">datetime</span><span class="p">.</span><span class="n">fromisoformat</span><span class="p">(</span><span class="n">latest_time</span><span class="p">)</span>
            
            <span class="n">time_diff</span> <span class="o">=</span> <span class="n">now</span> <span class="o">-</span> <span class="n">latest_time</span>
            
            <span class="k">return</span> <span class="p">{</span>
                <span class="s">'latest_data_time'</span><span class="p">:</span> <span class="n">latest_time</span><span class="p">,</span>
                <span class="s">'hours_since_update'</span><span class="p">:</span> <span class="n">time_diff</span><span class="p">.</span><span class="n">total_seconds</span><span class="p">()</span> <span class="o">/</span> <span class="mi">3600</span><span class="p">,</span>
                <span class="s">'is_fresh'</span><span class="p">:</span> <span class="n">time_diff</span> <span class="o">&lt;</span> <span class="n">timedelta</span><span class="p">(</span><span class="n">hours</span><span class="o">=</span><span class="mi">24</span><span class="p">)</span>
            <span class="p">}</span>
        
        <span class="k">return</span> <span class="p">{</span><span class="s">'is_fresh'</span><span class="p">:</span> <span class="bp">False</span><span class="p">,</span> <span class="s">'latest_data_time'</span><span class="p">:</span> <span class="bp">None</span><span class="p">}</span>
    
    <span class="k">def</span> <span class="nf">send_alert</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">subject</span><span class="p">,</span> <span class="n">message</span><span class="p">):</span>
        <span class="s">"""发送告警邮件"""</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="bp">self</span><span class="p">.</span><span class="n">email_config</span><span class="p">:</span>
            <span class="bp">self</span><span class="p">.</span><span class="n">logger</span><span class="p">.</span><span class="n">warning</span><span class="p">(</span><span class="s">"邮件配置未设置，无法发送告警"</span><span class="p">)</span>
            <span class="k">return</span>
        
        <span class="k">try</span><span class="p">:</span>
            <span class="n">msg</span> <span class="o">=</span> <span class="n">MimeText</span><span class="p">(</span><span class="n">message</span><span class="p">,</span> <span class="s">'plain'</span><span class="p">,</span> <span class="s">'utf-8'</span><span class="p">)</span>
            <span class="n">msg</span><span class="p">[</span><span class="s">'Subject'</span><span class="p">]</span> <span class="o">=</span> <span class="n">subject</span>
            <span class="n">msg</span><span class="p">[</span><span class="s">'From'</span><span class="p">]</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">email_config</span><span class="p">[</span><span class="s">'from'</span><span class="p">]</span>
            <span class="n">msg</span><span class="p">[</span><span class="s">'To'</span><span class="p">]</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">email_config</span><span class="p">[</span><span class="s">'to'</span><span class="p">]</span>
            
            <span class="n">server</span> <span class="o">=</span> <span class="n">smtplib</span><span class="p">.</span><span class="n">SMTP</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">email_config</span><span class="p">[</span><span class="s">'smtp_host'</span><span class="p">],</span> <span class="bp">self</span><span class="p">.</span><span class="n">email_config</span><span class="p">[</span><span class="s">'smtp_port'</span><span class="p">])</span>
            <span class="n">server</span><span class="p">.</span><span class="n">starttls</span><span class="p">()</span>
            <span class="n">server</span><span class="p">.</span><span class="n">login</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">email_config</span><span class="p">[</span><span class="s">'username'</span><span class="p">],</span> <span class="bp">self</span><span class="p">.</span><span class="n">email_config</span><span class="p">[</span><span class="s">'password'</span><span class="p">])</span>
            <span class="n">server</span><span class="p">.</span><span class="n">send_message</span><span class="p">(</span><span class="n">msg</span><span class="p">)</span>
            <span class="n">server</span><span class="p">.</span><span class="n">quit</span><span class="p">()</span>
            
            <span class="bp">self</span><span class="p">.</span><span class="n">logger</span><span class="p">.</span><span class="n">info</span><span class="p">(</span><span class="sa">f</span><span class="s">"告警邮件已发送: </span><span class="si">{</span><span class="n">subject</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
        <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
            <span class="bp">self</span><span class="p">.</span><span class="n">logger</span><span class="p">.</span><span class="n">error</span><span class="p">(</span><span class="sa">f</span><span class="s">"发送告警邮件失败: </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
    
    <span class="k">def</span> <span class="nf">generate_report</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">crawler_stats</span><span class="p">):</span>
        <span class="s">"""生成监控报告"""</span>
        <span class="n">report</span> <span class="o">=</span> <span class="sa">f</span><span class="s">"""
        爬虫监控报告 - </span><span class="si">{</span><span class="n">datetime</span><span class="p">.</span><span class="n">now</span><span class="p">().</span><span class="n">strftime</span><span class="p">(</span><span class="s">'%Y-%m-%d %H</span><span class="si">:</span><span class="o">%</span><span class="n">M</span><span class="si">:</span><span class="o">%</span><span class="n">S</span><span class="s">')</span><span class="si">}</span><span class="s">
        
        爬虫状态: </span><span class="si">{</span><span class="n">crawler_stats</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s">'status'</span><span class="p">,</span> <span class="s">'unknown'</span><span class="p">)</span><span class="si">}</span><span class="s">
        进程ID: </span><span class="si">{</span><span class="n">crawler_stats</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s">'pid'</span><span class="p">,</span> <span class="s">'N/A'</span><span class="p">)</span><span class="si">}</span><span class="s">
        内存使用: </span><span class="si">{</span><span class="n">crawler_stats</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s">'memory_usage'</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span><span class="si">:</span><span class="p">.</span><span class="mi">2</span><span class="n">f</span><span class="si">}</span><span class="s"> MB
        CPU使用率: </span><span class="si">{</span><span class="n">crawler_stats</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s">'cpu_percent'</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span><span class="si">:</span><span class="p">.</span><span class="mi">2</span><span class="n">f</span><span class="si">}</span><span class="s">%
        
        数据状态:
        最新数据时间: </span><span class="si">{</span><span class="n">crawler_stats</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s">'latest_data_time'</span><span class="p">,</span> <span class="s">'N/A'</span><span class="p">)</span><span class="si">}</span><span class="s">
        数据新鲜度: </span><span class="si">{</span><span class="s">'正常'</span> <span class="k">if</span> <span class="n">crawler_stats</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s">'is_fresh'</span><span class="p">,</span> <span class="bp">False</span><span class="p">)</span> <span class="k">else</span> <span class="s">'异常'</span><span class="si">}</span><span class="s">
        """</span>
        
        <span class="k">return</span> <span class="n">report</span>

<span class="c1"># 使用示例
</span><span class="k">def</span> <span class="nf">monitor_crawler</span><span class="p">():</span>
    <span class="n">email_config</span> <span class="o">=</span> <span class="p">{</span>
        <span class="s">'smtp_host'</span><span class="p">:</span> <span class="s">'smtp.gmail.com'</span><span class="p">,</span>
        <span class="s">'smtp_port'</span><span class="p">:</span> <span class="mi">587</span><span class="p">,</span>
        <span class="s">'username'</span><span class="p">:</span> <span class="s">'your_email@gmail.com'</span><span class="p">,</span>
        <span class="s">'password'</span><span class="p">:</span> <span class="s">'your_password'</span><span class="p">,</span>
        <span class="s">'from'</span><span class="p">:</span> <span class="s">'your_email@gmail.com'</span><span class="p">,</span>
        <span class="s">'to'</span><span class="p">:</span> <span class="s">'admin@company.com'</span>
    <span class="p">}</span>
    
    <span class="n">monitor</span> <span class="o">=</span> <span class="n">CrawlerMonitor</span><span class="p">(</span><span class="n">email_config</span><span class="p">)</span>
    
    <span class="c1"># 检查爬虫状态
</span>    <span class="n">health_status</span> <span class="o">=</span> <span class="n">monitor</span><span class="p">.</span><span class="n">check_crawler_health</span><span class="p">(</span><span class="s">'scrapy'</span><span class="p">)</span>
    
    <span class="k">if</span> <span class="n">health_status</span><span class="p">[</span><span class="s">'status'</span><span class="p">]</span> <span class="o">!=</span> <span class="s">'running'</span><span class="p">:</span>
        <span class="n">monitor</span><span class="p">.</span><span class="n">send_alert</span><span class="p">(</span>
            <span class="s">'爬虫告警：进程已停止'</span><span class="p">,</span>
            <span class="s">'爬虫进程未运行，请检查并重启。'</span>
        <span class="p">)</span>
    
    <span class="c1"># 检查数据新鲜度
</span>    <span class="kn">import</span> <span class="nn">sqlite3</span>
    <span class="n">conn</span> <span class="o">=</span> <span class="n">sqlite3</span><span class="p">.</span><span class="n">connect</span><span class="p">(</span><span class="s">'crawler_data.db'</span><span class="p">)</span>
    <span class="n">data_status</span> <span class="o">=</span> <span class="n">monitor</span><span class="p">.</span><span class="n">check_data_freshness</span><span class="p">(</span><span class="n">conn</span><span class="p">,</span> <span class="s">'articles'</span><span class="p">,</span> <span class="s">'created_at'</span><span class="p">)</span>
    
    <span class="k">if</span> <span class="ow">not</span> <span class="n">data_status</span><span class="p">[</span><span class="s">'is_fresh'</span><span class="p">]:</span>
        <span class="n">monitor</span><span class="p">.</span><span class="n">send_alert</span><span class="p">(</span>
            <span class="s">'爬虫告警：数据更新异常'</span><span class="p">,</span>
            <span class="sa">f</span><span class="s">'数据已超过24小时未更新，最新数据时间：</span><span class="si">{</span><span class="n">data_status</span><span class="p">[</span><span class="s">"latest_data_time"</span><span class="p">]</span><span class="si">}</span><span class="s">'</span>
        <span class="p">)</span>
    
    <span class="c1"># 生成报告
</span>    <span class="n">all_stats</span> <span class="o">=</span> <span class="p">{</span><span class="o">**</span><span class="n">health_status</span><span class="p">,</span> <span class="o">**</span><span class="n">data_status</span><span class="p">}</span>
    <span class="n">report</span> <span class="o">=</span> <span class="n">monitor</span><span class="p">.</span><span class="n">generate_report</span><span class="p">(</span><span class="n">all_stats</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="n">report</span><span class="p">)</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">'__main__'</span><span class="p">:</span>
    <span class="n">monitor_crawler</span><span class="p">()</span>
</code></pre></div></div>

<h2 id="最佳实践总结">最佳实践总结</h2>

<h3 id="1-代码规范">1. 代码规范</h3>
<ul>
  <li><strong>模块化设计</strong>：将爬虫功能拆分为独立模块</li>
  <li><strong>异常处理</strong>：完善的错误处理和重试机制</li>
  <li><strong>日志记录</strong>：详细的日志记录便于调试</li>
  <li><strong>配置管理</strong>：使用配置文件管理参数</li>
</ul>

<h3 id="2-性能优化">2. 性能优化</h3>
<ul>
  <li><strong>并发控制</strong>：合理设置并发请求数</li>
  <li><strong>缓存机制</strong>：避免重复请求相同内容</li>
  <li><strong>数据库优化</strong>：使用索引和批量插入</li>
  <li><strong>内存管理</strong>：及时释放不需要的对象</li>
</ul>

<h3 id="3-法律合规">3. 法律合规</h3>
<ul>
  <li><strong>遵守robots.txt</strong>：尊重网站的爬虫协议</li>
  <li><strong>合理频率</strong>：避免对目标网站造成压力</li>
  <li><strong>数据使用</strong>：确保数据使用符合法律法规</li>
  <li><strong>隐私保护</strong>：不抓取个人隐私信息</li>
</ul>

<h2 id="总结">总结</h2>

<p>网页爬虫技术涉及多个方面：</p>

<ol>
  <li><strong>基础技能</strong>：HTTP协议、HTML解析、正则表达式</li>
  <li><strong>高级技术</strong>：JavaScript渲染、反爬虫对抗、分布式爬虫</li>
  <li><strong>工程实践</strong>：代码架构、数据存储、监控维护</li>
  <li><strong>法律意识</strong>：遵守相关法律法规和网站协议</li>
</ol>

<p>掌握这些技能将帮助你构建高效、稳定、合规的爬虫系统，为数据驱动的决策提供有力支持！</p>

<hr />

<p><em>你在爬虫开发中遇到过哪些有趣的挑战？欢迎分享你的解决方案和心得体会！</em></p>]]></content><author><name>Chico Gong</name><email>chicogong@tencent.com</email></author><category term="Python" /><category term="数据采集" /><category term="Python" /><category term="爬虫" /><category term="Scrapy" /><category term="反爬虫" /><category term="数据挖掘" /><summary type="html"><![CDATA[网页爬虫是数据科学和自动化领域的重要技能。本文将从基础概念开始，逐步深入到高级技巧和反爬虫对抗策略，帮助你构建稳定高效的爬虫系统。]]></summary></entry><entry><title type="html">AI语音通话系统开发实战：从零构建智能语音交互平台</title><link href="http://0.0.0.0:4000/ai%E6%8A%80%E6%9C%AF/%E8%AF%AD%E9%9F%B3%E9%80%9A%E8%AF%9D/github-pages-setup-guide/" rel="alternate" type="text/html" title="AI语音通话系统开发实战：从零构建智能语音交互平台" /><published>2024-01-05T00:00:00+08:00</published><updated>2024-01-05T00:00:00+08:00</updated><id>http://0.0.0.0:4000/ai%E6%8A%80%E6%9C%AF/%E8%AF%AD%E9%9F%B3%E9%80%9A%E8%AF%9D/github-pages-setup-guide</id><content type="html" xml:base="http://0.0.0.0:4000/ai%E6%8A%80%E6%9C%AF/%E8%AF%AD%E9%9F%B3%E9%80%9A%E8%AF%9D/github-pages-setup-guide/"><![CDATA[<h2 id="前言">前言</h2>

<p>随着ChatGPT、Claude等大语言模型的兴起，AI语音交互已成为下一代人机交互的重要方向。本文将从零开始，带你构建一个完整的AI语音通话系统，实现人与AI的自然语音对话。</p>

<h2 id="什么是ai语音通话系统">什么是AI语音通话系统</h2>

<p>AI语音通话系统是一个集成了多种先进技术的智能交互平台，主要包括：</p>

<ul>
  <li><strong>实时语音通信</strong>：基于WebRTC的低延迟音频传输</li>
  <li><strong>语音识别(ASR)</strong>：将语音转换为文本</li>
  <li><strong>自然语言理解(NLU)</strong>：理解用户意图和语义</li>
  <li><strong>对话管理</strong>：维护对话上下文和状态</li>
  <li><strong>语音合成(TTS)</strong>：将AI回复转换为自然语音</li>
</ul>

<h2 id="系统架构设计">系统架构设计</h2>

<h3 id="整体架构">整体架构</h3>

<pre><code class="language-mermaid">graph TB
    A[用户] --&gt; B[WebRTC客户端]
    B --&gt; C[信令服务器]
    C --&gt; D[媒体服务器]
    D --&gt; E[语音识别服务]
    E --&gt; F[AI对话引擎]
    F --&gt; G[语音合成服务]
    G --&gt; D
    D --&gt; B
    B --&gt; A
</code></pre>

<h3 id="核心组件">核心组件</h3>

<ol>
  <li><strong>前端WebRTC客户端</strong>
    <ul>
      <li>音频采集和播放</li>
      <li>实时音频传输</li>
      <li>用户界面交互</li>
    </ul>
  </li>
  <li><strong>后端服务集群</strong>
    <ul>
      <li>信令服务器（WebSocket/Socket.io）</li>
      <li>媒体处理服务器</li>
      <li>AI对话引擎</li>
      <li>语音处理服务</li>
    </ul>
  </li>
  <li><strong>AI服务层</strong>
    <ul>
      <li>语音识别（Whisper/Google Speech API）</li>
      <li>大语言模型（GPT-4/Claude）</li>
      <li>语音合成（Azure TTS/ElevenLabs）</li>
    </ul>
  </li>
</ol>

<h2 id="技术栈选择">技术栈选择</h2>

<h3 id="前端技术">前端技术</h3>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 主要技术栈</span>
<span class="kd">const</span> <span class="nx">frontendStack</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">framework</span><span class="p">:</span> <span class="dl">"</span><span class="s2">React/Vue.js</span><span class="dl">"</span><span class="p">,</span>
  <span class="na">webrtc</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Simple-peer/PeerJS</span><span class="dl">"</span><span class="p">,</span>
  <span class="na">audio</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Web Audio API</span><span class="dl">"</span><span class="p">,</span>
  <span class="na">ui</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Material-UI/Ant Design</span><span class="dl">"</span><span class="p">,</span>
  <span class="na">state</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Redux/Vuex</span><span class="dl">"</span><span class="p">,</span>
  <span class="na">realtime</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Socket.io-client</span><span class="dl">"</span>
<span class="p">};</span>
</code></pre></div></div>

<h3 id="后端技术">后端技术</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Python后端技术栈
</span><span class="n">backend_stack</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s">"framework"</span><span class="p">:</span> <span class="s">"FastAPI/Flask"</span><span class="p">,</span>
    <span class="s">"webrtc"</span><span class="p">:</span> <span class="s">"aiortc/mediasoup"</span><span class="p">,</span>
    <span class="s">"websocket"</span><span class="p">:</span> <span class="s">"Socket.io/WebSockets"</span><span class="p">,</span>
    <span class="s">"ai_models"</span><span class="p">:</span> <span class="s">"OpenAI API/Anthropic"</span><span class="p">,</span>
    <span class="s">"speech"</span><span class="p">:</span> <span class="s">"Whisper/Google Speech"</span><span class="p">,</span>
    <span class="s">"tts"</span><span class="p">:</span> <span class="s">"Azure Cognitive Services"</span><span class="p">,</span>
    <span class="s">"database"</span><span class="p">:</span> <span class="s">"Redis/PostgreSQL"</span><span class="p">,</span>
    <span class="s">"deployment"</span><span class="p">:</span> <span class="s">"Docker/Kubernetes"</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="核心功能实现">核心功能实现</h2>

<h3 id="1-webrtc音频通信">1. WebRTC音频通信</h3>

<h4 id="前端音频采集">前端音频采集</h4>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nx">VoiceCallClient</span> <span class="p">{</span>
  <span class="kd">constructor</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">localStream</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">peerConnection</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">socket</span> <span class="o">=</span> <span class="nx">io</span><span class="p">(</span><span class="dl">'</span><span class="s1">ws://localhost:3000</span><span class="dl">'</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="k">async</span> <span class="nx">startCall</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">try</span> <span class="p">{</span>
      <span class="c1">// 获取用户媒体流</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">localStream</span> <span class="o">=</span> <span class="k">await</span> <span class="nb">navigator</span><span class="p">.</span><span class="nx">mediaDevices</span><span class="p">.</span><span class="nx">getUserMedia</span><span class="p">({</span>
        <span class="na">audio</span><span class="p">:</span> <span class="p">{</span>
          <span class="na">echoCancellation</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
          <span class="na">noiseSuppression</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
          <span class="na">sampleRate</span><span class="p">:</span> <span class="mi">16000</span>
        <span class="p">},</span>
        <span class="na">video</span><span class="p">:</span> <span class="kc">false</span>
      <span class="p">});</span>

      <span class="c1">// 创建RTCPeerConnection</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">peerConnection</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">RTCPeerConnection</span><span class="p">({</span>
        <span class="na">iceServers</span><span class="p">:</span> <span class="p">[</span>
          <span class="p">{</span> <span class="na">urls</span><span class="p">:</span> <span class="dl">'</span><span class="s1">stun:stun.l.google.com:19302</span><span class="dl">'</span> <span class="p">}</span>
        <span class="p">]</span>
      <span class="p">});</span>

      <span class="c1">// 添加本地流</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">localStream</span><span class="p">.</span><span class="nx">getTracks</span><span class="p">().</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">track</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">peerConnection</span><span class="p">.</span><span class="nx">addTrack</span><span class="p">(</span><span class="nx">track</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">localStream</span><span class="p">);</span>
      <span class="p">});</span>

      <span class="c1">// 处理远程流</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">peerConnection</span><span class="p">.</span><span class="nx">ontrack</span> <span class="o">=</span> <span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="kd">const</span> <span class="nx">remoteAudio</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="dl">'</span><span class="s1">remoteAudio</span><span class="dl">'</span><span class="p">);</span>
        <span class="nx">remoteAudio</span><span class="p">.</span><span class="nx">srcObject</span> <span class="o">=</span> <span class="nx">event</span><span class="p">.</span><span class="nx">streams</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
      <span class="p">};</span>

      <span class="c1">// 处理ICE候选</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">peerConnection</span><span class="p">.</span><span class="nx">onicecandidate</span> <span class="o">=</span> <span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">candidate</span><span class="p">)</span> <span class="p">{</span>
          <span class="k">this</span><span class="p">.</span><span class="nx">socket</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="dl">'</span><span class="s1">ice-candidate</span><span class="dl">'</span><span class="p">,</span> <span class="nx">event</span><span class="p">.</span><span class="nx">candidate</span><span class="p">);</span>
        <span class="p">}</span>
      <span class="p">};</span>

    <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="dl">'</span><span class="s1">启动通话失败:</span><span class="dl">'</span><span class="p">,</span> <span class="nx">error</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="k">async</span> <span class="nx">createOffer</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">offer</span> <span class="o">=</span> <span class="k">await</span> <span class="k">this</span><span class="p">.</span><span class="nx">peerConnection</span><span class="p">.</span><span class="nx">createOffer</span><span class="p">();</span>
    <span class="k">await</span> <span class="k">this</span><span class="p">.</span><span class="nx">peerConnection</span><span class="p">.</span><span class="nx">setLocalDescription</span><span class="p">(</span><span class="nx">offer</span><span class="p">);</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">socket</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="dl">'</span><span class="s1">offer</span><span class="dl">'</span><span class="p">,</span> <span class="nx">offer</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="2-语音识别集成">2. 语音识别集成</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">whisper</span>
<span class="kn">import</span> <span class="nn">asyncio</span>
<span class="kn">from</span> <span class="nn">typing</span> <span class="kn">import</span> <span class="n">AsyncGenerator</span>

<span class="k">class</span> <span class="nc">SpeechRecognitionService</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">model</span> <span class="o">=</span> <span class="n">whisper</span><span class="p">.</span><span class="n">load_model</span><span class="p">(</span><span class="s">"base"</span><span class="p">)</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">sample_rate</span> <span class="o">=</span> <span class="mi">16000</span>
    
    <span class="k">async</span> <span class="k">def</span> <span class="nf">transcribe_stream</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">audio_stream</span><span class="p">:</span> <span class="n">AsyncGenerator</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">AsyncGenerator</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="bp">None</span><span class="p">]:</span>
        <span class="s">"""实时语音识别"""</span>
        <span class="nb">buffer</span> <span class="o">=</span> <span class="p">[]</span>
        
        <span class="k">async</span> <span class="k">for</span> <span class="n">audio_chunk</span> <span class="ow">in</span> <span class="n">audio_stream</span><span class="p">:</span>
            <span class="nb">buffer</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">audio_chunk</span><span class="p">)</span>
            
            <span class="c1"># 当缓冲区达到一定大小时进行识别
</span>            <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nb">buffer</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="bp">self</span><span class="p">.</span><span class="n">sample_rate</span> <span class="o">*</span> <span class="mi">2</span><span class="p">:</span>  <span class="c1"># 2秒音频
</span>                <span class="n">audio_data</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">concatenate</span><span class="p">(</span><span class="nb">buffer</span><span class="p">)</span>
                
                <span class="c1"># 使用Whisper进行识别
</span>                <span class="n">result</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="n">to_thread</span><span class="p">(</span>
                    <span class="bp">self</span><span class="p">.</span><span class="n">model</span><span class="p">.</span><span class="n">transcribe</span><span class="p">,</span> 
                    <span class="n">audio_data</span><span class="p">,</span>
                    <span class="n">language</span><span class="o">=</span><span class="s">"zh"</span>
                <span class="p">)</span>
                
                <span class="k">if</span> <span class="n">result</span><span class="p">[</span><span class="s">"text"</span><span class="p">].</span><span class="n">strip</span><span class="p">():</span>
                    <span class="k">yield</span> <span class="n">result</span><span class="p">[</span><span class="s">"text"</span><span class="p">]</span>
                
                <span class="nb">buffer</span> <span class="o">=</span> <span class="p">[]</span>
</code></pre></div></div>

<h3 id="3-ai对话引擎">3. AI对话引擎</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">openai</span> <span class="kn">import</span> <span class="n">AsyncOpenAI</span>
<span class="kn">import</span> <span class="nn">asyncio</span>
<span class="kn">from</span> <span class="nn">typing</span> <span class="kn">import</span> <span class="n">List</span><span class="p">,</span> <span class="n">Dict</span>

<span class="k">class</span> <span class="nc">AIConversationEngine</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">api_key</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">client</span> <span class="o">=</span> <span class="n">AsyncOpenAI</span><span class="p">(</span><span class="n">api_key</span><span class="o">=</span><span class="n">api_key</span><span class="p">)</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">conversation_history</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">system_prompt</span> <span class="o">=</span> <span class="s">"""
        你是一个智能语音助手，专门通过语音与用户进行自然对话。
        请遵循以下原则：
        1. 回复要简洁明了，适合语音播报
        2. 语气要自然友好，像真人对话
        3. 避免过长的回复，保持对话流畅
        4. 可以主动提问来维持对话
        """</span>
    
    <span class="k">async</span> <span class="k">def</span> <span class="nf">get_response</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">user_input</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="s">"""获取AI回复"""</span>
        <span class="c1"># 添加用户输入到对话历史
</span>        <span class="bp">self</span><span class="p">.</span><span class="n">conversation_history</span><span class="p">.</span><span class="n">append</span><span class="p">({</span>
            <span class="s">"role"</span><span class="p">:</span> <span class="s">"user"</span><span class="p">,</span>
            <span class="s">"content"</span><span class="p">:</span> <span class="n">user_input</span>
        <span class="p">})</span>
        
        <span class="c1"># 构建消息列表
</span>        <span class="n">messages</span> <span class="o">=</span> <span class="p">[</span>
            <span class="p">{</span><span class="s">"role"</span><span class="p">:</span> <span class="s">"system"</span><span class="p">,</span> <span class="s">"content"</span><span class="p">:</span> <span class="bp">self</span><span class="p">.</span><span class="n">system_prompt</span><span class="p">}</span>
        <span class="p">]</span> <span class="o">+</span> <span class="bp">self</span><span class="p">.</span><span class="n">conversation_history</span><span class="p">[</span><span class="o">-</span><span class="mi">10</span><span class="p">:]</span>  <span class="c1"># 保留最近10轮对话
</span>        
        <span class="k">try</span><span class="p">:</span>
            <span class="n">response</span> <span class="o">=</span> <span class="k">await</span> <span class="bp">self</span><span class="p">.</span><span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="n">create</span><span class="p">(</span>
                <span class="n">model</span><span class="o">=</span><span class="s">"gpt-4"</span><span class="p">,</span>
                <span class="n">messages</span><span class="o">=</span><span class="n">messages</span><span class="p">,</span>
                <span class="n">max_tokens</span><span class="o">=</span><span class="mi">150</span><span class="p">,</span>  <span class="c1"># 限制回复长度
</span>                <span class="n">temperature</span><span class="o">=</span><span class="mf">0.7</span><span class="p">,</span>
                <span class="n">stream</span><span class="o">=</span><span class="bp">False</span>
            <span class="p">)</span>
            
            <span class="n">ai_response</span> <span class="o">=</span> <span class="n">response</span><span class="p">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">message</span><span class="p">.</span><span class="n">content</span>
            
            <span class="c1"># 添加AI回复到对话历史
</span>            <span class="bp">self</span><span class="p">.</span><span class="n">conversation_history</span><span class="p">.</span><span class="n">append</span><span class="p">({</span>
                <span class="s">"role"</span><span class="p">:</span> <span class="s">"assistant"</span><span class="p">,</span> 
                <span class="s">"content"</span><span class="p">:</span> <span class="n">ai_response</span>
            <span class="p">})</span>
            
            <span class="k">return</span> <span class="n">ai_response</span>
            
        <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
            <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"AI对话错误: </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
            <span class="k">return</span> <span class="s">"抱歉，我现在无法回复，请稍后再试。"</span>
</code></pre></div></div>

<h2 id="性能优化策略">性能优化策略</h2>

<h3 id="延迟优化">延迟优化</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">LatencyOptimizer</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">vad_model</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">load_vad_model</span><span class="p">()</span>  <span class="c1"># 语音活动检测
</span>        <span class="bp">self</span><span class="p">.</span><span class="n">chunk_size</span> <span class="o">=</span> <span class="mi">1024</span>  <span class="c1"># 音频块大小
</span>        
    <span class="k">async</span> <span class="k">def</span> <span class="nf">optimize_pipeline</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">audio_stream</span><span class="p">):</span>
        <span class="s">"""优化处理管道以减少延迟"""</span>
        
        <span class="c1"># 使用VAD检测语音端点
</span>        <span class="n">speech_segments</span> <span class="o">=</span> <span class="p">[]</span>
        
        <span class="k">async</span> <span class="k">for</span> <span class="n">audio_chunk</span> <span class="ow">in</span> <span class="n">audio_stream</span><span class="p">:</span>
            <span class="k">if</span> <span class="bp">self</span><span class="p">.</span><span class="n">vad_model</span><span class="p">.</span><span class="n">is_speech</span><span class="p">(</span><span class="n">audio_chunk</span><span class="p">):</span>
                <span class="n">speech_segments</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">audio_chunk</span><span class="p">)</span>
            <span class="k">elif</span> <span class="n">speech_segments</span><span class="p">:</span>
                <span class="c1"># 检测到语音结束，立即处理
</span>                <span class="n">full_audio</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">concatenate</span><span class="p">(</span><span class="n">speech_segments</span><span class="p">)</span>
                
                <span class="c1"># 并行处理：语音识别 + AI推理预处理
</span>                <span class="n">tasks</span> <span class="o">=</span> <span class="p">[</span>
                    <span class="bp">self</span><span class="p">.</span><span class="n">speech_recognition</span><span class="p">.</span><span class="n">transcribe</span><span class="p">(</span><span class="n">full_audio</span><span class="p">),</span>
                    <span class="bp">self</span><span class="p">.</span><span class="n">preprocess_for_ai</span><span class="p">(</span><span class="n">speech_segments</span><span class="p">)</span>
                <span class="p">]</span>
                
                <span class="n">results</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="n">gather</span><span class="p">(</span><span class="o">*</span><span class="n">tasks</span><span class="p">)</span>
                <span class="n">speech_segments</span> <span class="o">=</span> <span class="p">[]</span>  <span class="c1"># 重置缓冲区
</span>                
                <span class="k">yield</span> <span class="n">results</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>  <span class="c1"># 返回识别结果
</span></code></pre></div></div>

<h2 id="部署与监控">部署与监控</h2>

<h3 id="docker部署">Docker部署</h3>

<div class="language-dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">FROM</span><span class="s"> python:3.9-slim</span>

<span class="c"># 安装系统依赖</span>
<span class="k">RUN </span>apt-get update <span class="o">&amp;&amp;</span> apt-get <span class="nb">install</span> <span class="nt">-y</span> <span class="se">\
</span>    ffmpeg <span class="se">\
</span>    portaudio19-dev <span class="se">\
</span>    <span class="o">&amp;&amp;</span> <span class="nb">rm</span> <span class="nt">-rf</span> /var/lib/apt/lists/<span class="k">*</span>

<span class="c"># 设置工作目录</span>
<span class="k">WORKDIR</span><span class="s"> /app</span>

<span class="c"># 复制依赖文件</span>
<span class="k">COPY</span><span class="s"> requirements.txt .</span>

<span class="c"># 安装Python依赖</span>
<span class="k">RUN </span>pip <span class="nb">install</span> <span class="nt">--no-cache-dir</span> <span class="nt">-r</span> requirements.txt

<span class="c"># 复制应用代码</span>
<span class="k">COPY</span><span class="s"> . .</span>

<span class="c"># 暴露端口</span>
<span class="k">EXPOSE</span><span class="s"> 8000</span>

<span class="c"># 启动命令</span>
<span class="k">CMD</span><span class="s"> ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000"]</span>
</code></pre></div></div>

<h2 id="常见问题与解决方案">常见问题与解决方案</h2>

<h3 id="q-如何减少语音识别延迟">Q: 如何减少语音识别延迟？</h3>

<p>A: 优化策略包括：</p>

<ol>
  <li><strong>使用流式识别</strong>：不等待完整语音，边说边识别</li>
  <li><strong>VAD优化</strong>：准确检测语音开始和结束</li>
  <li><strong>模型选择</strong>：使用更快的识别模型（如Whisper tiny）</li>
  <li><strong>并行处理</strong>：识别和AI推理并行进行</li>
</ol>

<h3 id="q-如何处理网络不稳定的情况">Q: 如何处理网络不稳定的情况？</h3>

<p>A: 网络优化方案：</p>

<ul>
  <li>自适应码率调整</li>
  <li>抖动缓冲区优化</li>
  <li>重连机制实现</li>
  <li>音频质量动态调整</li>
</ul>

<h3 id="q-如何优化ai响应速度">Q: 如何优化AI响应速度？</h3>

<p>A: AI优化策略：</p>

<ul>
  <li>响应缓存机制</li>
  <li>并行模型调用</li>
  <li>上下文窗口限制</li>
  <li>预测性预加载</li>
</ul>

<h2 id="总结">总结</h2>

<p>本文详细介绍了AI语音通话系统的完整开发流程，涵盖了：</p>

<ul>
  <li><strong>系统架构设计</strong>：从前端到后端的完整技术栈</li>
  <li><strong>核心功能实现</strong>：WebRTC、语音识别、AI对话、语音合成</li>
  <li><strong>性能优化</strong>：延迟优化、缓存策略、网络优化</li>
  <li><strong>部署方案</strong>：Docker容器化、Kubernetes集群部署</li>
  <li><strong>监控运维</strong>：日志记录、性能指标、故障处理</li>
</ul>

<p>通过这套完整的解决方案，你可以构建一个功能强大、性能优越的AI语音通话系统。随着技术的不断发展，这类系统将在客服、教育、娱乐等领域发挥越来越重要的作用。</p>

<hr />

<p><em>如果你觉得这篇文章对你有帮助，欢迎分享给更多对AI语音技术感兴趣的朋友！</em></p>]]></content><author><name>Chico Gong</name><email>chicogong@tencent.com</email></author><category term="AI技术" /><category term="语音通话" /><category term="WebRTC" /><category term="语音识别" /><category term="AI" /><category term="实时通信" /><summary type="html"><![CDATA[深入探讨如何构建一个完整的AI语音通话系统，涵盖WebRTC实时通信、语音识别、自然语言处理和语音合成等核心技术。]]></summary></entry><entry><title type="html">欢迎来到我的博客</title><link href="http://0.0.0.0:4000/%E5%8D%9A%E5%AE%A2/%E4%BB%8B%E7%BB%8D/welcome-to-my-blog/" rel="alternate" type="text/html" title="欢迎来到我的博客" /><published>2024-01-01T10:00:00+08:00</published><updated>2024-01-01T10:00:00+08:00</updated><id>http://0.0.0.0:4000/%E5%8D%9A%E5%AE%A2/%E4%BB%8B%E7%BB%8D/welcome-to-my-blog</id><content type="html" xml:base="http://0.0.0.0:4000/%E5%8D%9A%E5%AE%A2/%E4%BB%8B%E7%BB%8D/welcome-to-my-blog/"><![CDATA[<h2 id="欢迎来到我的个人博客">欢迎来到我的个人博客</h2>

<p>你好！欢迎来到我的个人博客。这是我在这个平台上发布的第一篇文章，我想借此机会介绍一下自己，以及创建这个博客的初衷。</p>

<h2 id="关于我">关于我</h2>

<p>我是 Chico Gong，一个热爱技术和分享的开发者。在技术的世界里，我专注于前端开发、后端架构，以及不断涌现的新兴技术。除了编程，我也对设计、产品思维和创业有着浓厚的兴趣。</p>

<p>我相信知识的力量，更相信分享知识的价值。在学习和工作的过程中，我深深体会到开源社区和技术博客对个人成长的巨大帮助。现在，我希望通过这个博客，将自己的学习心得、技术探索和生活感悟分享给更多的人。</p>

<h2 id="为什么创建这个博客">为什么创建这个博客</h2>

<p>创建这个博客有几个原因：</p>

<ul>
  <li><strong>记录学习历程</strong>：技术发展日新月异，通过写博客可以帮助我整理思路，加深对知识的理解。</li>
  <li><strong>分享经验教训</strong>：在开发过程中遇到的问题和解决方案，希望能够帮助到其他遇到类似问题的朋友。</li>
  <li><strong>建立连接</strong>：希望通过博客认识更多志同道合的朋友，一起交流学习，共同成长。</li>
  <li><strong>提升表达能力</strong>：写作是一种很好的思维训练，可以帮助我更好地表达想法和观点。</li>
</ul>

<h2 id="博客内容规划">博客内容规划</h2>

<p>在这个博客里，我计划分享以下几类内容：</p>

<h3 id="技术文章">技术文章</h3>

<p>包括但不限于：</p>
<ul>
  <li>前端开发技术（React, Vue, JavaScript, CSS等）</li>
  <li>后端开发经验（Node.js, Python, 数据库设计等）</li>
  <li>工具和效率（开发工具使用、工作流优化等）</li>
  <li>新技术探索（AI/ML、Web3、移动开发等）</li>
</ul>

<h3 id="项目分享">项目分享</h3>

<p>我会分享一些自己做过的有趣项目，包括项目的创意来源、技术选型、开发过程中遇到的挑战和解决方案。</p>

<h3 id="学习笔记">学习笔记</h3>

<p>读书笔记、课程学习心得、会议参会感受等，希望通过分享促进更深入的思考。</p>

<h3 id="生活感悟">生活感悟</h3>

<p>技术之外的思考，关于工作、生活、成长的一些想法和体会。</p>

<h2 id="写在最后">写在最后</h2>

<p>这个博客刚刚起步，内容和设计都还在不断完善中。如果你有任何建议或想法，非常欢迎与我交流。你可以通过邮件、GitHub 或其他社交媒体联系我。</p>

<p>感谢你花时间阅读这篇文章，希望在接下来的日子里，我们能在这个小小的数字空间里，一起学习、成长和探索。</p>

<p>期待与你的相遇！</p>

<hr />

<p><em>2024年1月1日</em></p>]]></content><author><name>Chico Gong</name></author><category term="博客" /><category term="介绍" /><category term="博客" /><category term="介绍" /><category term="开始" /><summary type="html"><![CDATA[欢迎来到我的个人博客]]></summary></entry></feed>